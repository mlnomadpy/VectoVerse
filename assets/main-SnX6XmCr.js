import{k as Bs,d as Po}from"./vendor-CYxFTp0H.js";function bp(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function e(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(i){if(i.ep)return;i.ep=!0;const r=e(i);fetch(i.href,r)}})();var Io=function(t,e,n){for(var i=n,r=0,a=t.length;i<e.length;){var o=e[i];if(r<=0&&e.slice(i,i+a)===t)return i;o==="\\"?i++:o==="{"?r++:o==="}"&&r--,i++}return-1},Do=function(t){return t.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")},Uo=/^\\begin{/,No=function(t,e){for(var n,i=[],r=new RegExp("("+e.map(c=>Do(c.left)).join("|")+")");n=t.search(r),n!==-1;){n>0&&(i.push({type:"text",data:t.slice(0,n)}),t=t.slice(n));var a=e.findIndex(c=>t.startsWith(c.left));if(n=Io(e[a].right,t,e[a].left.length),n===-1)break;var o=t.slice(0,n+e[a].right.length),l=Uo.test(o)?o:t.slice(e[a].left.length,n);i.push({type:"math",data:l,rawData:o,display:e[a].display}),t=t.slice(n+e[a].right.length)}return t!==""&&i.push({type:"text",data:t}),i},Fo=function(t,e){var n=No(t,e.delimiters);if(n.length===1&&n[0].type==="text")return null;for(var i=document.createDocumentFragment(),r=0;r<n.length;r++)if(n[r].type==="text")i.appendChild(document.createTextNode(n[r].data));else{var a=document.createElement("span"),o=n[r].data;e.displayMode=n[r].display;try{e.preProcess&&(o=e.preProcess(o)),Bs.render(o,a,e)}catch(l){if(!(l instanceof Bs.ParseError))throw l;e.errorCallback("KaTeX auto-render: Failed to parse `"+n[r].data+"` with ",l),i.appendChild(document.createTextNode(n[r].rawData));continue}i.appendChild(a)}return i},Oo=function s(t,e){for(var n=0;n<t.childNodes.length;n++){var i=t.childNodes[n];if(i.nodeType===3){for(var r=i.textContent,a=i.nextSibling,o=0;a&&a.nodeType===Node.TEXT_NODE;)r+=a.textContent,a=a.nextSibling,o++;var l=Fo(r,e);if(l){for(var c=0;c<o;c++)i.nextSibling.remove();n+=l.childNodes.length-1,t.replaceChild(l,i)}else n+=o}else i.nodeType===1&&function(){var d=" "+i.className+" ",h=e.ignoredTags.indexOf(i.nodeName.toLowerCase())===-1&&e.ignoredClasses.every(f=>d.indexOf(" "+f+" ")===-1);h&&s(i,e)}()}},ns=function(t,e){if(!t)throw new Error("No element provided to render");var n={};for(var i in e)e.hasOwnProperty(i)&&(n[i]=e[i]);n.delimiters=n.delimiters||[{left:"$$",right:"$$",display:!0},{left:"\\(",right:"\\)",display:!1},{left:"\\begin{equation}",right:"\\end{equation}",display:!0},{left:"\\begin{align}",right:"\\end{align}",display:!0},{left:"\\begin{alignat}",right:"\\end{alignat}",display:!0},{left:"\\begin{gather}",right:"\\end{gather}",display:!0},{left:"\\begin{CD}",right:"\\end{CD}",display:!0},{left:"\\[",right:"\\]",display:!0}],n.ignoredTags=n.ignoredTags||["script","noscript","style","textarea","pre","code","option"],n.ignoredClasses=n.ignoredClasses||[],n.errorCallback=n.errorCallback||console.error,n.macros=n.macros||{},Oo(t,n)};const fe={COLORS:{POSITIVE:"#ff4757",NEGATIVE:"#3742fa",NEUTRAL:"#747d8c",INPUT:"#ffd700",UPLOADED:"#ffd700"},ANIMATION:{PULSE_SPEED:.05,FLOAT_SPEED_Y:2,FLOAT_SPEED_X:1.5,FLOAT_AMPLITUDE_Y:5,FLOAT_AMPLITUDE_X:3,FORCE_PULSE_SPEED:3},MIN_VECTOR_RADIUS:20,MAX_VECTOR_RADIUS:60};class Bo{constructor(t,e){this.svg=t,this.framework=e,this.d3=window.d3,this.lastRenderState=null,this.framework.eventBus.on("analysisCompleted",n=>{this.handleAnalysisResults(n)}),this.framework.eventBus.on("stateChanged",n=>{if(n&&n.reason==="vectorSelected"&&this.framework.modules.periodicTableVisualization){const i=this.framework.getState().selectedVectorId;i!==null&&this.framework.modules.periodicTableVisualization.highlightElement(i)}})}handleAnalysisResults(t){if(t.type==="kmeans"){const e=this.d3.scaleOrdinal(this.d3.schemeCategory10);this.svg.selectAll(".vector-atom").each(function(n,i){const r=t.data.assignments[i];d3.select(this).select("circle").style("fill",e(r))})}else if(t.type==="pca"||t.type==="tsne"){const e=t.data;this.framework.getState();const n=this.framework.getConfig(),i=this.d3.extent(e,l=>l[0]),r=this.d3.extent(e,l=>l[1]),a=this.d3.scaleLinear().domain(i).range([50,n.width-50]),o=this.d3.scaleLinear().domain(r).range([50,n.height-50]);this.svg.selectAll(".vector-atom").each(function(l,c){l.x=a(e[c][0]),l.y=o(e[c][1])}).transition().duration(750).attr("transform",l=>"translate(".concat(l.x,", ").concat(l.y,")"))}}render(t=!1){const e=this.framework.getState(),n=this.framework.getConfig();(t||this.needsFullRender(e,n))&&(this.svg.selectAll("*").remove(),this.renderBackgroundParticles(),this.renderVectors(),this.lastRenderState=this.getStateSnapshot(e,n)),this.updateForces(),this.updateVectorSelection(),this.updateInputVector()}needsFullRender(t,e){if(!this.lastRenderState)return!0;const n=this.getStateSnapshot(t,e);return n.vectorCount!==this.lastRenderState.vectorCount||n.dimensions!==this.lastRenderState.dimensions||n.width!==this.lastRenderState.width||n.height!==this.lastRenderState.height||JSON.stringify(n.vectorIds)!==JSON.stringify(this.lastRenderState.vectorIds)}getStateSnapshot(t,e){return{vectorCount:t.vectors.length,dimensions:e.dimensions,width:e.width,height:e.height,vectorIds:t.vectors.map(n=>n.id),hasInputVector:!!t.inputVector}}renderBackgroundParticles(){const t=this.framework.getConfig(),e=this.d3.range(30).map(()=>({x:Math.random()*t.width,y:Math.random()*t.height,r:Math.random()*2+1}));this.svg.selectAll(".bg-particle").data(e).enter().append("circle").attr("class","bg-particle").attr("cx",n=>n.x).attr("cy",n=>n.y).attr("r",n=>n.r).attr("fill","rgba(255,255,255,0.1)").attr("opacity",.3)}updateForces(){const t=this.framework.getConfig();this.svg.selectAll(".force-line").remove(),t.showForces&&this.renderForces()}renderForces(){const t=this.framework.getState(),e=this.framework.getModules().forceCalculator,n=this.framework.getConfig(),i=[];for(let a=0;a<t.vectors.length;a++)for(let o=a+1;o<t.vectors.length;o++){const l=t.vectors[a],c=t.vectors[o],d=e.resonanceForce(l,c),h=Math.abs(e.cosineSimilarity(l,c)),f=Math.abs(e.correlation(l,c)),m=1/(1+e.euclideanDistance(l,c)),g=1/(1+this.calculateManhattanDistance(l,c)),v=e.quantumEntanglement?e.quantumEntanglement(l,c):Math.abs(f);let p=d,u="resonance";if(n.forceType)switch(n.forceType){case"cosine":p=h,u="cosine";break;case"correlation":p=f,u="correlation";break;case"euclidean":p=m,u="euclidean";break;case"manhattan":p=g,u="manhattan";break;case"quantum":p=v,u="quantum";break;default:p=d,u="resonance"}i.push({x1:l.x,y1:l.y,x2:c.x,y2:c.y,force:p,type:"normal",forceType:u,allMetrics:{resonance:d,cosine:h,correlation:f,euclidean:m,manhattan:g,quantum:v}})}t.inputVector&&t.vectors.forEach(a=>{const o=e.resonanceForce(t.inputVector,a);i.push({x1:t.inputVector.x,y1:t.inputVector.y,x2:a.x,y2:a.y,force:o,type:"input",forceType:"input-resonance"})});const r=i.length>0?Math.max(...i.map(a=>a.force)):1;this.svg.selectAll(".force-line").data(i).enter().append("line").attr("class",a=>"force-line ".concat(a.force>r*.5?"strong":""," force-").concat(a.forceType)).attr("x1",a=>a.x1).attr("y1",a=>a.y1).attr("x2",a=>a.x2).attr("y2",a=>a.y2).style("stroke",a=>this.getForceColor(a)).style("stroke-width",a=>Math.max(1,a.force/r*6)).attr("data-base-opacity",a=>.3+a.force/r*.5).style("opacity",a=>.3+a.force/r*.5).style("stroke-dasharray",a=>this.getForcePattern(a.forceType)).on("mouseenter",(a,o)=>this.showForceTooltip(a,o)).on("mouseleave",()=>this.hideForceTooltip())}renderVectors(){const t=this.framework.getState(),e=this.framework.getConfig(),n=this.svg.selectAll(".vector-atom").data(t.vectors,i=>i.id).enter().append("g").attr("class","vector-atom").attr("transform",i=>"translate(".concat(i.x||0,", ").concat(i.y||0,")")).attr("tabindex","0").attr("role","button").attr("aria-label",i=>"Vector ".concat(i.id+1,", magnitude ").concat(this.framework.getModules().forceCalculator.magnitude(i).toFixed(2))).on("click",(i,r)=>{i.stopPropagation(),this.framework.selectVector(r.id)}).on("keydown",(i,r)=>{(i.key==="Enter"||i.key===" ")&&(i.preventDefault(),this.framework.selectVector(r.id))});if(this.svg.select("defs").empty()){const r=this.svg.append("defs").append("filter").attr("id","glow");r.append("feGaussianBlur").attr("stdDeviation","3").attr("result","coloredBlur");const a=r.append("feMerge");a.append("feMergeNode").attr("in","coloredBlur"),a.append("feMergeNode").attr("in","SourceGraphic")}n.append("circle").attr("r",i=>this.getVectorRadius(i)).attr("fill",i=>i.customColor?i.customColor:i.isUploaded?"rgba(255,215,0,0.2)":"rgba(255,255,255,0.1)").attr("stroke",i=>i.isUploaded?fe.COLORS.UPLOADED:"rgba(255,255,255,0.5)").attr("stroke-width",2).attr("filter","url(#glow)"),n.each((i,r,a)=>{const o=d3.select(a[r]),l=this.getVectorRadius(i),c=2*Math.PI/e.dimensions;i.components.forEach((d,h)=>{const f=h*c-Math.PI/2,m=Math.abs(d),g=l*.8,v=d3.arc().innerRadius(g-8).outerRadius(g-2).startAngle(f-c*.4).endAngle(f+c*.4);if(o.append("path").attr("d",v).attr("fill",this.getComponentColor(d)).attr("opacity",.3+m*.7).attr("class","dimension-segment"),e.dimensions<=10){const p=Math.cos(f)*(l+15),u=Math.sin(f)*(l+15);o.append("text").attr("x",p).attr("y",u).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-size","8px").attr("opacity",.8).text("D".concat(h+1))}})}),n.append("text").attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-weight","bold").attr("font-size","14px").text(i=>i.isUploaded?"N".concat(i.id+1):"V".concat(i.id+1)),this.setupKeyboardNavigation()}updateInputVector(){const t=this.framework.getState();this.svg.select(".input-vector").remove(),t.inputVector&&this.renderInputVector()}renderInputVector(){const t=this.framework.getState(),e=this.framework.getConfig(),n=this.svg.append("g").attr("class","input-vector").attr("transform","translate(".concat(t.inputVector.x||0,", ").concat(t.inputVector.y||0,")")),i=this.getVectorRadius(t.inputVector);n.append("circle").attr("r",i+10).attr("fill","none").attr("stroke",fe.COLORS.INPUT).attr("stroke-width",2).attr("opacity",.5).attr("class","input-pulse"),n.append("circle").attr("r",i).attr("fill","rgba(255,215,0,0.3)").attr("stroke",fe.COLORS.INPUT).attr("stroke-width",3);const r=2*Math.PI/e.dimensions;t.inputVector.components.forEach((a,o)=>{const l=o*r-Math.PI/2,c=Math.abs(a),d=i*.8,h=d3.arc().innerRadius(d-8).outerRadius(d-2).startAngle(l-r*.4).endAngle(l+r*.4);n.append("path").attr("d",h).attr("fill",this.getComponentColor(a)).attr("opacity",.5+c*.5)}),n.append("text").attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",fe.COLORS.INPUT).attr("font-weight","bold").attr("font-size","16px").text("INPUT")}updateVectorSelection(){const{selectedVectorId:t}=this.framework.getState();this.svg.selectAll(".vector-atom").classed("selected",e=>e.id===t)}getVectorRadius(t){const e=this.framework.getModules().forceCalculator.magnitude(t),n=Math.max(fe.MIN_VECTOR_RADIUS,Math.min(fe.MAX_VECTOR_RADIUS,e*25)),i=t.scale||1;return n*i}calculateManhattanDistance(t,e){let n=0;for(let i=0;i<t.components.length;i++)n+=Math.abs(t.components[i]-e.components[i]);return n}getForceColor(t){if(t.type==="input")return fe.COLORS.INPUT;switch(t.forceType){case"cosine":return"#e74c3c";case"correlation":return"#3498db";case"euclidean":return"#9b59b6";case"manhattan":return"#f39c12";case"quantum":return"#1abc9c";case"resonance":default:return"#ff6b6b"}}getForcePattern(t){switch(t){case"cosine":return"none";case"correlation":return"6,3";case"euclidean":return"8,4";case"manhattan":return"4,2";case"quantum":return"2,2";case"resonance":default:return"none"}}showForceTooltip(t,e){const n=this.d3.select("body").append("div").attr("class","force-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","8px 12px").style("border-radius","6px").style("font-size","11px").style("pointer-events","none").style("z-index","1000").style("box-shadow","0 4px 8px rgba(0,0,0,0.3)"),i={cosine:"Cosine Similarity",correlation:"Pearson Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",quantum:"Quantum Entanglement",resonance:"Resonance Force"};let r="<div><strong>".concat(i[e.forceType]||e.forceType.toUpperCase(),"</strong></div>");r+="<div>Value: ".concat(e.force.toFixed(4),"</div>"),e.allMetrics&&(r+='<div style="margin-top: 5px; font-size: 10px; opacity: 0.8; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 5px;">',r+="<div>📊 All Metrics:</div>",r+="<div>Resonance: ".concat(e.allMetrics.resonance.toFixed(3),"</div>"),r+="<div>Cosine: ".concat(e.allMetrics.cosine.toFixed(3),"</div>"),r+="<div>Correlation: ".concat(e.allMetrics.correlation.toFixed(3),"</div>"),r+="<div>Euclidean: ".concat(e.allMetrics.euclidean.toFixed(3),"</div>"),r+="<div>Manhattan: ".concat(e.allMetrics.manhattan.toFixed(3),"</div>"),r+="<div>Quantum: ".concat(e.allMetrics.quantum.toFixed(3),"</div>"),r+="</div>"),n.html(r);const[a,o]=this.d3.pointer(t,document.body);n.style("left",a+10+"px").style("top",o-10+"px")}hideForceTooltip(){this.d3.selectAll(".force-tooltip").remove()}getComponentColor(t){return Math.abs(t)<.1?fe.COLORS.NEUTRAL:t>0?fe.COLORS.POSITIVE:fe.COLORS.NEGATIVE}setupKeyboardNavigation(){document.addEventListener("keydown",t=>{if(t.target.closest(".modal-overlay")||t.target.tagName==="INPUT")return;const e=this.framework.getState(),n=e.vectors,i=n.findIndex(a=>a.id===e.selectedVectorId);let r=-1;switch(t.key){case"ArrowRight":case"ArrowDown":t.preventDefault(),r=i<n.length-1?i+1:0;break;case"ArrowLeft":case"ArrowUp":t.preventDefault(),r=i>0?i-1:n.length-1;break;case"Home":t.preventDefault(),r=0;break;case"End":t.preventDefault(),r=n.length-1;break}if(r>=0&&r<n.length){this.framework.selectVector(n[r].id);const a=this.svg.select('.vector-atom[data-id="'.concat(n[r].id,'"]')).node();a&&a.focus()}})}}const ai={add(s,t){if(s.length!==t.length)throw new Error("Vectors must have the same dimensions.");return s.map((e,n)=>e+t[n])},subtract(s,t){if(s.length!==t.length)throw new Error("Vectors must have the same dimensions.");return s.map((e,n)=>e-t[n])},scale(s,t){return s.map(e=>e*t)},magnitude(s){return Math.sqrt(s.reduce((t,e)=>t+e*e,0))},normalize(s){const t=this.magnitude(s);return t===0?s:this.scale(s,1/t)},dotProduct(s,t){if(s.length!==t.length)throw new Error("Vectors must have the same dimensions.");return s.reduce((e,n,i)=>e+n*t[i],0)},distanceSquared(s,t){if(s.length!==t.length)throw new Error("Vectors must have the same dimensions.");return s.reduce((e,n,i)=>e+Math.pow(n-t[i],2),0)},distance(s,t){return Math.sqrt(this.distanceSquared(s,t))}};class Vo{constructor(){this.epsilon=.01}dotProduct(t,e){return ai.dotProduct(t.components,e.components)}distanceSquared(t,e){return ai.distanceSquared(t.components,e.components)}euclideanDistance(t,e){return ai.distance(t.components,e.components)}magnitude(t){return ai.magnitude(t.components)}cosineSimilarity(t,e){const n=this.dotProduct(t,e),i=this.magnitude(t),r=this.magnitude(e);return i===0||r===0?0:n/(i*r)}resonanceForce(t,e){const n=Math.pow(this.dotProduct(t,e),2),i=this.distanceSquared(t,e)+this.epsilon;return n/i}informationEntropy(t){const e=t.components.reduce((i,r)=>i+Math.abs(r),0);return e===0?0:-t.components.map(i=>Math.abs(i)/e).reduce((i,r)=>r>0?i+r*Math.log2(r):i,0)}correlation(t,e){const n=t.components.length,i=t.components.reduce((c,d)=>c+d,0)/n,r=e.components.reduce((c,d)=>c+d,0)/n;let a=0,o=0,l=0;for(let c=0;c<n;c++){const d=t.components[c]-i,h=e.components[c]-r;a+=d*h,o+=d*d,l+=h*h}return a/Math.sqrt(o*l)}quantumEntanglement(t,e){return Math.abs(this.correlation(t,e))}harmonicAlignment(t,e){const n=this.dotProduct(t,e),i=Math.sqrt(this.distanceSquared(t,e));return i>0?Math.pow(n,2)/Math.pow(i,2):0}nuclearStability(t){return this.magnitude(t)/Math.sqrt(t.components.length)}getInformationQuantums(t){const e=this.magnitude(t);return{excitatory:t.components.filter(n=>n>.1).length,inhibitory:t.components.filter(n=>n<-.1).length,neutral:t.components.filter(n=>Math.abs(n)<=.1).length,totalEnergy:e,averageExcitation:t.components.filter(n=>n>0).reduce((n,i)=>n+i,0),averageInhibition:Math.abs(t.components.filter(n=>n<0).reduce((n,i)=>n+i,0))}}getVectorStatistics(t){const e=t.components,n=e.length,i=e.reduce((o,l)=>o+l,0)/n,r=e.reduce((o,l)=>o+Math.pow(l-i,2),0)/n,a=Math.sqrt(r);return{mean:i,variance:r,standardDeviation:a,min:Math.min(...e),max:Math.max(...e),range:Math.max(...e)-Math.min(...e),skewness:this.calculateSkewness(e,i,a),kurtosis:this.calculateKurtosis(e,i,a)}}calculateSkewness(t,e,n){if(n===0)return 0;const i=t.length;return t.reduce((r,a)=>r+Math.pow((a-e)/n,3),0)/i}calculateKurtosis(t,e,n){if(n===0)return 0;const i=t.length;return t.reduce((r,a)=>r+Math.pow((a-e)/n,4),0)/i-3}electromagneticForce(t,e){const i=this.dotProduct(t,e),r=this.distanceSquared(t,e)+this.epsilon;return 1*i/r}gravitationalAttraction(t,e){const i=this.magnitude(t),r=this.magnitude(e),a=this.distanceSquared(t,e)+this.epsilon;return 1*(i*r)/a}}class zo extends Vo{constructor(){super(),this.neuralNetworkMode=!1,this.inputNeuron=null,this.activationFunction="sigmoid",this.learningRate=.01,this.temperature=1}applyActivation(t,e=this.activationFunction,n=null){switch(e){case"sigmoid":return 1/(1+Math.exp(-t));case"tanh":return Math.tanh(t);case"relu":return Math.max(0,t);case"leaky_relu":return t>0?t:.01*t;case"softplus":return Math.log(1+Math.exp(t));case"swish":return t/(1+Math.exp(-t));case"softmax":if(!n||!Array.isArray(n))return Math.exp(t);const r=n.map(o=>Math.exp(o)).reduce((o,l)=>o+l,0);return Math.exp(t)/r;case"softermax":if(!n||!Array.isArray(n))return Math.abs(t)/(1e-4+Math.abs(t));const a=n.reduce((o,l)=>o+Math.abs(l),0);return Math.abs(t)/(1e-4+a);case"soft_sigmoid":return 1/(1+Math.abs(t));default:return t}}neuralActivation(t,e,n=0){const i=this.dotProduct(t,e)+n;return this.applyActivation(i)}attentionScore(t,e,n){const r=this.dotProduct(t,e)/Math.sqrt(t.components.length);return Math.exp(r/this.temperature)*this.magnitude(n)}synapticStrength(t,e){const n=Math.abs(this.correlation(t,e)),i=this.euclideanDistance(t,e),r=this.neuralActivation(t,e);return n*r/(1+i)}quantumCoherence(t,e){const n=t.components.length;let i=0,r=0;for(let a=0;a<n;a++){const o=Math.atan2(t.components[a],Math.abs(t.components[a])||1),l=Math.atan2(e.components[a],Math.abs(e.components[a])||1),c=o-l;i+=Math.cos(c),r+=Math.sin(c)}return Math.sqrt(i*i+r*r)/n}thermodynamicEntropy(t,e=1){const n=t.components.map(l=>Math.abs(l)),i=n.reduce((l,c)=>l+c,0);if(i===0)return 0;const r=n.map(l=>l/i),a=r.map(l=>Math.exp(-l/e)),o=a.reduce((l,c)=>l+c,0);return Math.log(o)+r.reduce((l,c,d)=>l+c*a[d]/(e*o),0)}fieldStrength(t,e){let n=0,i=0,r=0;const a=899e7;return t.forEach(o=>{const l=this.magnitude(o),c=(e.x||0)-(o.x||0),d=(e.y||0)-(o.y||0),h=(e.z||0)-(o.z||0),f=Math.sqrt(c*c+d*d+h*h)+this.epsilon,m=a*l/(f*f*f);n+=m*c,i+=m*d,r+=m*h}),Math.sqrt(n*n+i*i+r*r)}waveInterference(t,e,n=0,i=0){const r=this.magnitude(t),a=this.magnitude(e),o=i-n;return{amplitude:Math.sqrt(r*r+a*a+2*r*a*Math.cos(o)),interference:Math.cos(o),phaseShift:Math.atan2(r*Math.sin(n)+a*Math.sin(i),r*Math.cos(n)+a*Math.cos(i))}}mutualInformation(t,e){const n=this.informationEntropy(t),i=this.informationEntropy(e),a={components:t.components.map((l,c)=>l+e.components[c])},o=this.informationEntropy(a);return n+i-o}transferEntropy(t,e){const n=this.conditionalEntropy(e,t);return this.informationEntropy(e)-n}conditionalEntropy(t,e){const n=Math.abs(this.correlation(t,e));return this.informationEntropy(t)*(1-n)}calculateCentrality(t,e){const n=t.length;let i=0,r=0,a=0;t.forEach(l=>{l.id!==e.id&&this.synapticStrength(e,l)>.5&&i++});const o=t.reduce((l,c)=>c.id!==e.id?l+this.euclideanDistance(e,c):l,0);return r=(n-1)/o,{degree:i/(n-1),closeness:r,betweenness:a}}enableNeuralNetworkMode(t){this.neuralNetworkMode=!0,this.inputNeuron=t}disableNeuralNetworkMode(){this.neuralNetworkMode=!1,this.inputNeuron=null}forwardPass(t,e,n=null){n||(n=e.map(()=>Array(t.components.length).fill(0).map(()=>Math.random()-.5)));const i=e.map((l,c)=>t.components.reduce((d,h,f)=>d+h*n[c][f],0)),r=i.map((l,c)=>this.activationFunction==="softmax"||this.activationFunction==="softermax"?this.applyActivation(l,this.activationFunction,i):this.applyActivation(l)),a=r.reduce((l,c)=>l+c,0),o=this.applyActivation(a);return{activations:r,weights:n,output:o,weightedSums:i}}getNeuralNetworkAnalysis(t,e){const n=this.forwardPass(t,e),i=e.map(a=>this.synapticStrength(t,a)),r=e.map(a=>this.attentionScore(t,a,a));return{activations:n.activations,synapticStrengths:i,attentionScores:r,networkOutput:n.output,totalSynapticStrength:i.reduce((a,o)=>a+o,0),averageActivation:n.activations.reduce((a,o)=>a+o,0)/n.activations.length,networkComplexity:this.calculateNetworkComplexity(i)}}calculateNetworkComplexity(t){const e=t.reduce((i,r)=>i+r,0)/t.length,n=t.reduce((i,r)=>i+Math.pow(r-e,2),0)/t.length;return Math.sqrt(n)}getEnhancedVectorStatistics(t,e=[]){const n=this.getVectorStatistics(t),i=this.getInformationQuantums(t);return{...n,...i,quantumCoherence:e.length>0?e.reduce((a,o)=>o.id!==t.id?a+this.quantumCoherence(t,o):a,0)/Math.max(1,e.length-1):0,thermodynamicEntropy:this.thermodynamicEntropy(t),informationDensity:this.informationEntropy(t)/t.components.length,centrality:e.length>0?this.calculateCentrality(e,t):null,neuralComplexity:this.calculateNeuralComplexity(t),activationPotential:this.calculateActivationPotential(t)}}calculateNeuralComplexity(t){const e=t.components.filter(r=>r>0),n=t.components.filter(r=>r<0),i=t.components.filter(r=>Math.abs(r)<.1);return{excitatory:e.length,inhibitory:n.length,neutral:i.length,balance:(e.length-n.length)/t.components.length,diversity:1-i.length/t.components.length}}calculateActivationPotential(t){const e=this.magnitude(t),n=this.informationEntropy(t);return e*n}calculateSelectedMetric(t,e,n="resonance"){switch(n){case"resonance":return this.resonanceForce(t,e);case"cosine":return this.cosineSimilarity(t,e);case"correlation":return this.correlation(t,e);case"euclidean":return 1/(1+this.euclideanDistance(t,e));case"manhattan":return 1/(1+this.manhattanDistance(t,e));case"quantum":return this.quantumEntanglement(t,e);default:return this.resonanceForce(t,e)}}manhattanDistance(t,e){let n=0;for(let i=0;i<t.components.length;i++)n+=Math.abs(t.components[i]-e.components[i]);return n}}class ko{constructor(t){this.framework=t,this.d3=window.d3}setupControls(){this.setupDimensionsControl(),this.setupVectorsControl(),this.setupButtons(),this.setupThemeSwitcher(),this.setupHelpModal(),this.setupAnalysisModal(),this.setupUploadHelpModal(),this.setupActivationHelpModal(),this.setupHelpSystem(),this.framework.eventBus.on("stateChanged",t=>{(!t||t.reason==="vectorSelected"||t.reason==="vectorColorChanged"||t.reason==="vectorScaleChanged"||t.fullRender)&&this.updateVectorDetails(),(!t||t.fullRender||t.reason==="vectorsGenerated")&&this.updateControls()}),this.updateControls()}setupDimensionsControl(){const t=document.getElementById("dimensions"),e=document.getElementById("dim-value");t&&t.addEventListener("input",n=>{const i=parseInt(n.target.value,10);e.textContent="".concat(i,"D"),this.framework.updateConfig("dimensions",i)})}setupVectorsControl(){const t=document.getElementById("vectors"),e=document.getElementById("vec-value");t&&t.addEventListener("input",n=>{const i=parseInt(n.target.value,10);e.textContent=i,this.framework.updateConfig("numVectors",i)})}setupButtons(){var n,i,r;(n=document.getElementById("regenerate"))==null||n.addEventListener("click",()=>this.framework.stateManager.generateVectors());const t=document.getElementById("toggle-forces");t&&t.addEventListener("click",a=>{const o=a.currentTarget.dataset.state==="on"?"off":"on";a.currentTarget.dataset.state=o;const l=a.currentTarget.querySelector(".btn-state");l&&(l.textContent=o.toUpperCase()),this.framework.updateConfig("showForces",o==="on")}),(i=document.getElementById("add-input-vector"))==null||i.addEventListener("click",()=>this.showAddVectorModal()),(r=document.getElementById("export-json"))==null||r.addEventListener("click",()=>this.framework.modules.fileHandler.exportStateToJson());const e=document.getElementById("vector-file");e&&e.addEventListener("change",a=>this.framework.modules.fileHandler.handleFileUpload(a))}setupThemeSwitcher(){const t=document.querySelector(".theme-switcher");localStorage.getItem("vectoverse-theme")==="light"?(document.body.classList.add("light-theme"),t&&(t.textContent="🌑")):(document.body.classList.remove("light-theme"),t&&(t.textContent="🌙")),t&&t.addEventListener("click",()=>{const n=document.body.classList.toggle("light-theme");t.textContent=n?"🌑":"🌙",localStorage.setItem("vectoverse-theme",n?"light":"dark")})}setupHelpModal(){const t=document.getElementById("tutorial-modal"),e=document.getElementById("show-help"),n=t==null?void 0:t.querySelector(".close-button");t&&(t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","Tutorial")),e==null||e.addEventListener("click",()=>{t==null||t.classList.add("active"),setTimeout(()=>{const i=t.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');i[0]&&i[0].focus()},50)}),n==null||n.addEventListener("click",()=>t==null?void 0:t.classList.remove("active")),t==null||t.addEventListener("click",i=>{i.target===t&&t.classList.remove("active")}),document.addEventListener("keydown",i=>{i.key==="Escape"&&(t!=null&&t.classList.contains("active"))&&t.classList.remove("active")})}setupAnalysisModal(){const t=document.getElementById("analysis-modal"),e=document.getElementById("run-analysis"),n=t==null?void 0:t.querySelector(".close-button"),i=document.getElementById("analysis-type"),r=document.getElementById("kmeans-options"),a=document.getElementById("run-selected-analysis");t&&(t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","Advanced Analysis")),e==null||e.addEventListener("click",()=>{t==null||t.classList.add("active"),setTimeout(()=>{const o=t.querySelectorAll('button, select, input, [tabindex]:not([tabindex="-1"])');o[0]&&o[0].focus()},50)}),n==null||n.addEventListener("click",()=>t==null?void 0:t.classList.remove("active")),i==null||i.addEventListener("change",o=>{o.target.value==="kmeans"?r.style.display="flex":r.style.display="none"}),a==null||a.addEventListener("click",()=>{const o=i.value;this.runAnalysis(o)}),t==null||t.addEventListener("click",o=>{o.target===t&&t.classList.remove("active")}),document.addEventListener("keydown",o=>{o.key==="Escape"&&(t!=null&&t.classList.contains("active"))&&t.classList.remove("active")})}setupUploadHelpModal(){const t=document.getElementById("upload-help-modal"),e=document.getElementById("show-upload-help"),n=t==null?void 0:t.querySelector(".close-button");t&&(t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","Upload Format Guide")),e==null||e.addEventListener("click",()=>{t==null||t.classList.add("active"),setTimeout(()=>{const i=t.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');i[0]&&i[0].focus()},50)}),n==null||n.addEventListener("click",()=>t==null?void 0:t.classList.remove("active")),t==null||t.addEventListener("click",i=>{i.target===t&&t.classList.remove("active")}),document.addEventListener("keydown",i=>{i.key==="Escape"&&(t!=null&&t.classList.contains("active"))&&t.classList.remove("active")})}setupActivationHelpModal(){const t=document.getElementById("activation-help-modal"),e=document.getElementById("show-activation-help"),n=t==null?void 0:t.querySelector(".close-button");t&&(t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","Activation Functions Guide")),e==null||e.addEventListener("click",()=>{t==null||t.classList.add("active"),setTimeout(()=>{const i=t.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');i[0]&&i[0].focus()},50)}),n==null||n.addEventListener("click",()=>t==null?void 0:t.classList.remove("active")),t==null||t.addEventListener("click",i=>{i.target===t&&t.classList.remove("active")}),document.addEventListener("keydown",i=>{i.key==="Escape"&&(t!=null&&t.classList.contains("active"))&&t.classList.remove("active")})}setupHelpSystem(){const t=document.querySelector('[data-action="help"]');t&&t.addEventListener("click",()=>this.showComprehensiveHelp())}showComprehensiveHelp(){const t=document.createElement("div");t.className="modal-overlay",t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","VectoVerse Help & Features"),t.innerHTML='\n            <div class="modal-content help-modal">\n                <div class="help-header">\n                    <h3>🚀 VectoVerse - Complete Guide</h3>\n                    <button class="close-button" aria-label="Close help">&times;</button>\n                </div>\n                \n                <div class="help-content">\n                    <div class="help-tabs">\n                        <button class="help-tab active" data-tab="features">✨ Features</button>\n                        <button class="help-tab" data-tab="keyboard">⌨️ Shortcuts</button>\n                        <button class="help-tab" data-tab="analysis">📊 Analysis</button>\n                        <button class="help-tab" data-tab="export">💾 Export</button>\n                        <button class="help-tab" data-tab="accessibility">♿ Accessibility</button>\n                    </div>\n                    \n                    <div class="help-panel active" data-panel="features">\n                        <h4>Core Features</h4>\n                        <ul class="feature-list">\n                            <li><strong>Interactive Vector Visualization:</strong> Click, drag, and explore high-dimensional vectors in 2D/3D space</li>\n                            <li><strong>Custom Vector Input:</strong> Add your own vectors with the "Add Vector" button</li>\n                            <li><strong>Force Visualization:</strong> Toggle attractive/repulsive forces between vectors</li>\n                            <li><strong>Real-time Controls:</strong> Adjust dimensions, vector count, and visualization parameters</li>\n                            <li><strong>File Upload/Export:</strong> Import CSV data and export in multiple formats</li>\n                            <li><strong>Theme Switching:</strong> Light/dark mode with persistent preferences</li>\n                            <li><strong>Responsive Design:</strong> Optimized for desktop, tablet, and mobile devices</li>\n                        </ul>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="keyboard">\n                        <h4>Keyboard Navigation</h4>\n                        <div class="shortcut-grid">\n                            <div class="shortcut-item"><kbd>Ctrl+G</kbd> Generate new vectors</div>\n                            <div class="shortcut-item"><kbd>Ctrl+R</kbd> Reset visualization</div>\n                            <div class="shortcut-item"><kbd>Ctrl+E</kbd> Export options</div>\n                            <div class="shortcut-item"><kbd>Ctrl+A</kbd> Analysis modal</div>\n                            <div class="shortcut-item"><kbd>Arrow Keys</kbd> Navigate vectors</div>\n                            <div class="shortcut-item"><kbd>Enter/Space</kbd> Select vector</div>\n                            <div class="shortcut-item"><kbd>Escape</kbd> Close modals</div>\n                            <div class="shortcut-item"><kbd>?</kbd> Show shortcuts</div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="analysis">\n                        <h4>Advanced Analysis</h4>\n                        <div class="analysis-features">\n                            <div class="analysis-item">\n                                <h5>📈 PCA (Principal Component Analysis)</h5>\n                                <p>Reduces dimensionality while preserving variance. Shows explained variance and projected coordinates.</p>\n                            </div>\n                            <div class="analysis-item">\n                                <h5>🔍 t-SNE</h5>\n                                <p>Non-linear dimensionality reduction for visualization. Great for finding clusters and patterns.</p>\n                            </div>\n                            <div class="analysis-item">\n                                <h5>📊 K-Means Clustering</h5>\n                                <p>Groups vectors into clusters. Shows silhouette score, cluster assignments, and centroids.</p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="export">\n                        <h4>Export & Import Options</h4>\n                        <div class="export-options">\n                            <div class="export-format">\n                                <h5>📋 CSV Format</h5>\n                                <p>Comprehensive data with headers: vector ID, type, position, magnitude, entropy, and all components</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>📄 JSON Format</h5>\n                                <p>Complete session data including metadata, configuration, and analysis results</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>🖼️ Visual Export</h5>\n                                <p>High-resolution PNG and scalable SVG for publications and presentations</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>📈 Analysis Results</h5>\n                                <p>Export PCA, t-SNE, and clustering results in multiple formats</p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="accessibility">\n                        <h4>Accessibility Features</h4>\n                        <div class="accessibility-features">\n                            <div class="a11y-item">\n                                <h5>🔊 Screen Reader Support</h5>\n                                <p>Full ARIA labels, live regions for announcements, and descriptive content</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>⌨️ Keyboard Navigation</h5>\n                                <p>Complete keyboard control, focus management, and modal focus trapping</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>🎨 High Contrast</h5>\n                                <p>Automatic detection and enhanced colors for better visibility</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>🎯 Reduced Motion</h5>\n                                <p>Respects user preferences for reduced motion and animations</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="help-footer">\n                    <p><strong>Performance Tips:</strong> The app automatically optimizes for your device. For large datasets (>100 vectors), consider enabling performance mode in settings.</p>\n                    <p><strong>Need Help?</strong> Use the error reporting system if you encounter issues. All errors are logged and can be exported for debugging.</p>\n                </div>\n            </div>\n        ',document.body.appendChild(t);const e=t.querySelectorAll(".help-tab"),n=t.querySelectorAll(".help-panel");e.forEach(i=>{i.addEventListener("click",()=>{const r=i.dataset.tab;e.forEach(a=>a.classList.remove("active")),n.forEach(a=>a.classList.remove("active")),i.classList.add("active"),t.querySelector('[data-panel="'.concat(r,'"]')).classList.add("active")})}),t.querySelector(".close-button").addEventListener("click",()=>t.remove()),t.addEventListener("click",i=>{i.target===t&&t.remove()}),t.querySelector(".help-tabs .help-tab").focus()}async runAnalysis(t){const e=document.getElementById("analysis-results"),n=document.getElementById("run-selected-analysis"),i=this.framework.getState().vectors;if(i.length<2){e.innerHTML='<p style="color: orange;">Need at least 2 vectors for analysis.</p>';return}n.disabled=!0,n.classList.add("loading"),e.innerHTML='\n            <div class="loading-analysis">\n                <div class="loading-spinner"></div>\n                <p>Running '.concat(t.toUpperCase()," analysis...</p>\n            </div>\n        ");let r;try{switch(t){case"pca":r=await this.framework.modules.analysisEngine.performPCA(i);break;case"tsne":r=await this.framework.modules.analysisEngine.performTSNE(i);break;case"kmeans":const a=parseInt(document.getElementById("kmeans-k").value,10);r=await this.framework.modules.analysisEngine.performKMeans(i,a);break;default:throw new Error("Unknown analysis type: ".concat(t))}this.displayAnalysisResults(r),this.showToast("".concat(t.toUpperCase()," analysis completed successfully!"),"success")}catch(a){e.innerHTML='<p style="color: red;">Error: '.concat(a.message,"</p>"),this.showToast("Analysis failed: ".concat(a.message),"error")}finally{n.disabled=!1,n.classList.remove("loading")}}displayAnalysisResults(t){const e=document.getElementById("analysis-results");let n='\n            <div class="analysis-header">\n                <h4>'.concat(t.type.toUpperCase()," Results</h4>\n                <small>Completed at ").concat(new Date(t.timestamp).toLocaleTimeString(),"</small>\n            </div>\n        ");t.type==="pca"?n+='\n                <div class="analysis-stats">\n                    <div class="stat-card">\n                        <strong>Explained Variance:</strong> \n                        '.concat(t.explainedVariance.map(i=>(i*100).toFixed(1)+"%").join(", "),'\n                    </div>\n                    <div class="stat-card">\n                        <strong>Total Variance:</strong> \n                        ').concat((t.explainedVariance.reduce((i,r)=>i+r,0)*100).toFixed(1),'%\n                    </div>\n                </div>\n                <details>\n                    <summary>Projected Data (first 5 points)</summary>\n                    <ul class="data-list">\n                        ').concat(t.data.slice(0,5).map(i=>"<li>[".concat(i.map(r=>r.toFixed(4)).join(", "),"]</li>")).join(""),"\n                    </ul>\n                </details>\n            "):t.type==="tsne"?n+='\n                <div class="analysis-stats">\n                    <div class="stat-card">\n                        <strong>Perplexity:</strong> '.concat(t.parameters.perplexity||30,'\n                    </div>\n                    <div class="stat-card">\n                        <strong>Dimensions:</strong> ').concat(t.parameters.dim||2,'\n                    </div>\n                </div>\n                <details>\n                    <summary>Embedding (first 5 points)</summary>\n                    <ul class="data-list">\n                        ').concat(t.data.slice(0,5).map(i=>"<li>[".concat(i.map(r=>r.toFixed(4)).join(", "),"]</li>")).join(""),"\n                    </ul>\n                </details>\n            "):t.type==="kmeans"&&(n+='\n                <div class="analysis-stats">\n                    <div class="stat-card"><strong>Clusters:</strong> '.concat(t.data.k,'</div>\n                    <div class="stat-card"><strong>Iterations:</strong> ').concat(t.data.iterations,'</div>\n                    <div class="stat-card"><strong>Converged:</strong> ').concat(t.data.converged?"✓":"✗",'</div>\n                    <div class="stat-card"><strong>Silhouette Score:</strong> ').concat(t.data.silhouetteScore.toFixed(3),'</div>\n                </div>\n                <div class="cluster-breakdown">\n                    <h5>Cluster Distribution:</h5>\n                    ').concat(t.data.clusters.map((i,r)=>'\n                        <div class="cluster-item">\n                            <span class="cluster-color" style="background: hsl('.concat(r*60,', 70%, 60%)"></span>\n                            Cluster ').concat(r+1,": ").concat(i.size," vectors (").concat((i.size/t.originalVectors.length*100).toFixed(1),"%)\n                        </div>\n                    ")).join(""),"\n                </div>\n            ")),e.innerHTML=n,this.framework.eventBus.emit("analysisCompleted",t)}updateVectorDetails(){const t=this.framework.stateManager.getSelectedVector(),e=document.getElementById("vector-details-content");if(!e)return;if(t===null){e.innerHTML='<div class="placeholder">Click on a vector to see its detailed properties and relationships.</div>';return}const n=document.getElementById("vector-details-template");if(!n)return;const i=n.content.cloneNode(!0),r=this.framework.getModules().forceCalculator,a=r.getInformationQuantums(t);let o="Neutral (Balanced)";a.excitatory>a.inhibitory?o="Positive (Excitatory)":a.inhibitory>a.excitatory&&(o="Negative (Inhibitory)");const l=i.querySelector(".charge-indicator");l&&(o.includes("Positive")?l.style.background="#4ecdc4":o.includes("Negative")?l.style.background="#f06292":l.style.background="#6c757d"),i.querySelector(".vector-name").textContent="Vector ".concat(t.id),i.querySelector("#template-magnitude").textContent=r.magnitude(t).toFixed(4),i.querySelector("#template-entropy").textContent=r.informationEntropy(t).toFixed(4),i.querySelector("#template-dimensions").textContent=t.components.length,this.renderComponentChart(i.querySelector("#template-components-chart"),t.components),this.renderStatsList(i.querySelector("#template-stats-list"),r.getVectorStatistics(t));const c=i.querySelector("#template-relationships-list"),d=i.querySelector("#relationship-sort-metric");if(c&&d){const h=this.calculateSimilarities(t),f=()=>{const m=d.value;m==="distance"?h.sort((g,v)=>g[m]-v[m]):h.sort((g,v)=>v[m]-g[m]),c.innerHTML=h.slice(0,5).map(g=>'\n                    <div class="relationship-item">\n                        <div class="relationship-target">vs V'.concat(g.index,'</div>\n                        <div class="relationship-scores">\n                            <div>Resonance: <span class="score-value">').concat(g.resonance.toFixed(3),'</span></div>\n                            <div>Similarity: <span class="score-value">').concat(g.similarity.toFixed(3),'</span></div>\n                            <div>Correlation: <span class="score-value">').concat(g.correlation.toFixed(3),'</span></div>\n                            <div>Distance: <span class="score-value">').concat(g.distance.toFixed(3),"</span></div>\n                        </div>\n                    </div>\n                ")).join("")};d.addEventListener("change",f),f()}e.innerHTML="",e.appendChild(i)}renderComponentChart(t,e){if(!t)return;const n={top:20,right:20,bottom:30,left:40},i=t.clientWidth-n.left-n.right,r=t.clientHeight-n.top-n.bottom,a=this.d3.select(t).append("svg").attr("width","100%").attr("height","100%").attr("viewBox","0 0 ".concat(t.clientWidth," ").concat(t.clientHeight)).append("g").attr("transform","translate(".concat(n.left,",").concat(n.top,")")),o=this.d3.scaleBand().range([0,i]).padding(.1).domain(e.map((c,d)=>d)),l=this.d3.scaleLinear().range([r,0]).domain(this.d3.extent(e));a.selectAll(".bar").data(e).enter().append("rect").attr("class","bar").attr("x",(c,d)=>o(d)).attr("width",o.bandwidth()).attr("y",c=>l(Math.max(0,c))).attr("height",c=>Math.abs(l(c)-l(0))).attr("fill",c=>c>=0?"#4ecdc4":"#f06292")}renderStatsList(t,e){if(!t)return;let n="";for(const[i,r]of Object.entries(e))n+='\n                <div class="stat-item-detailed">\n                    <div class="stat-label-detailed">'.concat(i,'</div>\n                    <div class="stat-value-detailed">').concat(r.toFixed(4),"</div>\n                </div>\n            ");t.innerHTML=n}calculateSimilarities(t){const e=this.framework.getModules().forceCalculator;return this.framework.getState().vectors.filter(n=>n.id!==t.id).map(n=>({index:n.id,similarity:e.cosineSimilarity(t,n),resonance:e.resonanceForce(t,n),correlation:e.correlation(t,n),distance:e.euclideanDistance(t,n)}))}updateControls(){const t=this.framework.getConfig(),e=document.getElementById("dimensions"),n=document.getElementById("dim-value");e&&n&&(e.value=t.dimensions,n.textContent="".concat(t.dimensions,"D"));const i=document.getElementById("vectors"),r=document.getElementById("vec-value");i&&r&&(i.value=t.numVectors,r.textContent=t.numVectors)}showAddVectorModal(){let t=document.getElementById("add-vector-modal");t&&t.remove();const e=this.framework.getConfig().dimensions;t=document.createElement("div"),t.id="add-vector-modal",t.className="modal-overlay",t.setAttribute("role","dialog"),t.setAttribute("aria-modal","true"),t.setAttribute("aria-label","Add Custom Vector"),t.innerHTML='\n            <div class="modal-content" tabindex="-1">\n                <button class="close-button" aria-label="Close">&times;</button>\n                <h2>Add Custom Vector</h2>\n                <form id="add-vector-form">\n                    <div class="vector-input-fields">\n                        '.concat(Array.from({length:e}).map((o,l)=>"\n                            <label>Component ".concat(l+1,': <input type="number" step="any" name="component').concat(l,'" required aria-label="Component ').concat(l+1,'"></label>\n                        ')).join(""),'\n                    </div>\n                    <button type="submit" class="btn-compact btn-primary">Add Vector</button>\n                </form>\n            </div>\n        '),document.body.appendChild(t);const n=t.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"])'),i=n[0],r=n[n.length-1];t.addEventListener("keydown",function(o){o.key==="Tab"&&(o.shiftKey?document.activeElement===i&&(o.preventDefault(),r.focus()):document.activeElement===r&&(o.preventDefault(),i.focus()))}),setTimeout(()=>i.focus(),50),t.querySelector(".close-button").onclick=()=>t.remove(),t.onclick=o=>{o.target===t&&t.remove()},document.addEventListener("keydown",function o(l){l.key==="Escape"&&(t.remove(),document.removeEventListener("keydown",o))});const a=t.querySelector("#add-vector-form");a.onsubmit=o=>{o.preventDefault();const l=Array.from(a.elements).filter(c=>c.tagName==="INPUT").map(c=>parseFloat(c.value));if(l.some(isNaN)){alert("Please enter valid numbers for all components.");return}this.framework.stateManager.addCustomVector(l),t.remove()}}showToast(t,e="info"){let n=document.getElementById("vectoverse-toast");n&&n.remove(),n=document.createElement("div"),n.id="vectoverse-toast",n.className="toast toast-".concat(e),n.textContent=t,document.body.appendChild(n),setTimeout(()=>{n.classList.add("visible")},10),setTimeout(()=>{n.classList.remove("visible"),setTimeout(()=>n.remove(),400)},2500)}showProgress(t,e){const n=document.querySelector(".upload-progress");n&&n.remove();const i=document.createElement("div");i.className="upload-progress",i.innerHTML='\n            <div class="progress-content">\n                <div class="progress-message">'.concat(t,'</div>\n                <div class="progress-bar-container">\n                    <div class="progress-bar" style="width: ').concat(e,'%"></div>\n                </div>\n                <div class="progress-percentage">').concat(e,"%</div>\n            </div>\n        "),document.body.appendChild(i),setTimeout(()=>{i.classList.add("active")},10)}hideProgress(){const t=document.querySelector(".upload-progress");t&&(t.classList.remove("active"),setTimeout(()=>{document.body.contains(t)&&t.remove()},300))}}class Ho{constructor(t){this.framework=t,this.ui=null,this.maxDimensions=1e4,this.maxFileSize=100*1024*1024}handleFileUpload(t){var i;const e=(i=t.target.files)==null?void 0:i[0];if(!e)return;if(e.size>this.maxFileSize){this.showError("File too large. Maximum size is ".concat(this.maxFileSize/(1024*1024),"MB."));return}this.showProgress("Reading file...",0);const n=new FileReader;n.onload=r=>{try{this.processFileContent(r.target.result,e.name)}catch(a){console.error("File upload error:",a),this.showError("Error processing file: ".concat(a.message))}},n.onerror=()=>{this.showError("Error reading file. Please try again.")},n.readAsText(e)}processFileContent(t,e){const n=e.toLowerCase().split(".").pop();let i;this.showProgress("Parsing content...",20);try{switch(n){case"json":i=this.parseJSON(t);break;case"csv":i=this.parseCSV(t);break;case"txt":i=this.parseTXT(t);break;default:i=this.autoDetectFormat(t);break}if(!i||i.length===0)throw new Error("No valid vectors found in file");this.showProgress("Processing vectors...",60),this.loadVectors(i)}catch(r){throw new Error("Failed to parse ".concat(n.toUpperCase()," file: ").concat(r.message))}}parseJSON(t){const e=JSON.parse(t);if(Array.isArray(e))return e;if(e.vectors&&Array.isArray(e.vectors))return e.vectors;if(e.data&&Array.isArray(e.data))return e.data;if(e.matrix&&Array.isArray(e.matrix))return e.matrix;throw new Error('JSON must contain an array of vectors or an object with "vectors", "data", or "matrix" property')}parseCSV(t){const e=t.trim().split("\n").filter(o=>o.trim()),n=[],a=e[0].split(",").map(o=>o.trim()).some(o=>isNaN(parseFloat(o)))?1:0;if(e.length<=a)throw new Error("CSV file appears to contain only headers or is empty");for(let o=a;o<e.length;o++){const l=e[o].trim();if(!l)continue;const c=l.split(",").map(d=>parseFloat(d.trim())).filter(d=>!isNaN(d));c.length>0&&n.push(c)}return n}parseTXT(t){const e=t.trim().split("\n").filter(i=>i.trim()),n=[];for(const i of e){const r=i.split(/\s+/).map(a=>parseFloat(a.trim())).filter(a=>!isNaN(a));r.length>0&&n.push(r)}return n}autoDetectFormat(t){try{return this.parseJSON(t)}catch(e){try{return this.parseCSV(t)}catch(n){return this.parseTXT(t)}}}loadVectors(t){if(this.showProgress("Validating vectors...",80),t.length===0)throw new Error("No vectors found in file");const e=t[0].length;if(e===0)throw new Error("Vectors cannot be empty");if(e>this.maxDimensions)throw new Error("Too many dimensions (".concat(e,"). Maximum supported: ").concat(this.maxDimensions));for(let l=1;l<t.length;l++)if(t[l].length!==e)throw new Error("Inconsistent dimensions: Vector ".concat(l+1," has ").concat(t[l].length," dimensions, expected ").concat(e));this.showProgress("Creating visualization...",90);const n=this.framework.getConfig();this.framework.updateConfig("dimensions",e),this.framework.updateConfig("numVectors",t.length);const i=document.getElementById("dimensions"),r=document.getElementById("vectors");i&&(i.max=Math.max(e,20),i.value=e,document.getElementById("dim-value").textContent="".concat(e,"D")),r&&(r.max=Math.max(t.length,12),r.value=t.length,document.getElementById("vec-value").textContent=t.length);const a=t.map((l,c)=>({id:c,components:l,x:Math.random()*(n.width-100)+50,y:Math.random()*(n.height-100)+50,isUploaded:!0,uploadedAt:Date.now()})),o=this.framework.getState();o.vectors=a,this.framework.render(),this.hideProgress(),this.showSuccess("Successfully loaded ".concat(t.length," vectors with ").concat(e," dimensions"),"File contained ".concat(t.length," vectors in ").concat(e,"D space"))}showProgress(t,e){this.ui&&typeof this.ui.showProgress=="function"?this.ui.showProgress(t,e):console.log("Progress: ".concat(e,"% - ").concat(t))}hideProgress(){this.ui&&typeof this.ui.hideProgress=="function"&&this.ui.hideProgress()}showSuccess(t,e){this.ui&&typeof this.ui.showToast=="function"?(this.ui.showToast(t,"success"),e&&console.log(e)):alert(t)}showError(t){this.ui&&typeof this.ui.showToast=="function"?this.ui.showToast(t,"error"):alert(t)}exportStateToJson(){const t=this.framework.getState(),e={config:this.framework.getConfig(),vectors:t.vectors.map(r=>({id:r.id,components:r.components,isUploaded:r.isUploaded,isInput:r.isInput})),inputVector:t.inputVector?{id:t.inputVector.id,components:t.inputVector.components,isInput:!0}:null},n="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,2)),i=document.createElement("a");i.setAttribute("href",n),i.setAttribute("download","vectoverse_state.json"),document.body.appendChild(i),i.click(),i.remove(),this.ui&&typeof this.ui.showToast=="function"?this.ui.showToast("State exported successfully!","success"):alert("State exported successfully!")}}class Go{constructor(t,e){this.svg=t,this.framework=e,this.pulseTime=0,this.animationId=null,this.isRunning=!1}start(){if(this.isRunning)return;this.isRunning=!0;const t=()=>{this.isRunning&&(this.pulseTime+=fe.ANIMATION.PULSE_SPEED,this.updateAnimations(),this.animationId=requestAnimationFrame(t))};t()}stop(){this.isRunning=!1,this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null)}updateAnimations(){try{this.updateVectorPulse(),this.updateInputVectorFloat(),this.updateForceLineAnimation()}catch(t){console.warn("Animation update error:",t)}}updateVectorPulse(){const t=this.framework.getState(),e=this.pulseTime;this.svg.selectAll(".vector-atom circle").each(function(n){const i=window.d3.select(this),r=n.id===t.selectedVectorId?4:2,a=Math.sin(e+(n.id||0))*.3+1;i.attr("stroke-width",r+a*.5)})}updateInputVectorFloat(){const t=this.framework.getState();if(t.inputVector){const e=Math.sin(this.pulseTime*fe.ANIMATION.FLOAT_SPEED_Y)*fe.ANIMATION.FLOAT_AMPLITUDE_Y,n=Math.cos(this.pulseTime*fe.ANIMATION.FLOAT_SPEED_X)*fe.ANIMATION.FLOAT_AMPLITUDE_X;this.svg.select(".input-vector").attr("transform","translate(".concat(t.inputVector.x+n,", ").concat(t.inputVector.y+e,")"))}}updateForceLineAnimation(){const t=this.pulseTime;this.svg.selectAll(".force-line").style("opacity",function(e){const n=window.d3.select(this);if(n.empty())return .6;const i=parseFloat(n.attr("data-base-opacity")||.6),r=Math.sin(t*fe.ANIMATION.FORCE_PULSE_SPEED)*.2+1;return Math.min(1,i*r)})}restart(){this.stop(),setTimeout(()=>this.start(),100)}}class Wo{constructor(t){this.framework=t,this.state={vectors:[],inputVector:null,selectedVectorId:null}}getVectors(){return this.state.vectors}getInputVector(){return this.state.inputVector}getSelectedVector(){return this.state.selectedVectorId===null?null:this.state.vectors.find(t=>t.id===this.state.selectedVectorId)}generateVectors(){this.state.vectors=[];const t=80,e=this.framework.getConfig();for(let n=0;n<e.numVectors;n++){const i={id:n,components:[],x:Math.random()*(e.width-2*t)+t,y:Math.random()*(e.height-2*t)+t};for(let r=0;r<e.dimensions;r++)i.components.push((Math.random()-.5)*2);this.state.vectors.push(i)}this.state.selectedVectorId=null,this.state.inputVector=null,this.framework.notify("stateChanged",{fullRender:!0,reason:"vectorsGenerated"})}selectVector(t){this.state.selectedVectorId===t?this.state.selectedVectorId=null:this.state.selectedVectorId=t,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorSelected"})}addInputVector(){const t=this.framework.getConfig(),e={id:"input",components:[],x:Math.random()*(t.width-100)+50,y:Math.random()*(t.height-100)+50,isInput:!0};for(let n=0;n<t.dimensions;n++)e.components.push((Math.random()-.5)*2);this.state.inputVector=e,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorAdded"})}removeInputVector(){this.state.inputVector=null,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorRemoved"})}randomizeInputVector(t){if(this.state.inputVector){for(let e=0;e<this.state.inputVector.components.length;e++)this.state.inputVector.components[e]=(Math.random()-.5)*2;this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorRandomized"}),t&&t(this.state.inputVector.components)}}updateInputVectorComponent(t,e){this.state.inputVector&&(this.state.inputVector.components[t]=e,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorComponentUpdated"}))}removeVector(t){this.state.vectors=this.state.vectors.filter(e=>e.id!==t),this.state.selectedVectorId===t&&(this.state.selectedVectorId=null),this.framework.notify("stateChanged",{fullRender:!0,reason:"vectorRemoved"})}setVectorCustomColor(t,e){const n=this.state.vectors.find(i=>i.id===t);n&&(n.customColor=e,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorColorChanged"}))}setVectorScale(t,e){const n=this.state.vectors.find(i=>i.id===t);n&&(n.scale=e,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorScaleChanged"}))}addCustomVector(t){const e=this.framework.getConfig(),n=80,i={id:this.state.vectors.length,components:t,x:Math.random()*(e.width-2*n)+n,y:Math.random()*(e.height-2*n)+n,isCustom:!0};this.state.vectors.push(i),this.framework.updateConfig("numVectors",this.state.vectors.length),this.framework.notify("stateChanged",{fullRender:!0,reason:"customVectorAdded"})}}class Xo{constructor(){this.listeners={}}on(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)}off(t,e){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter(n=>n!==e))}emit(t,e){this.listeners[t]&&this.listeners[t].forEach(n=>n(e))}}class $o{constructor(){this.config={width:800,height:600,dimensions:4,numVectors:6,showForces:!1}}getConfig(){return this.config}updateConfig(t,e){this.config[t]=e}}class qo{constructor(t){this.framework=t}initialize(){document.addEventListener("keydown",t=>this.handleKeyPress(t))}handleKeyPress(t){if(!document.querySelector(".input-editor-modal"))switch(t.code){case"Space":t.preventDefault(),this.framework.stateManager.generateVectors();break;case"KeyF":t.preventDefault(),this.framework.updateConfig("showForces",!this.framework.getConfig().showForces);break;case"KeyI":t.preventDefault(),this.framework.addInputVector();break}}}class Yo{constructor(t={}){this.options={dim:2,perplexity:30,earlyExaggeration:4,learningRate:100,nIter:500,metric:"euclidean",...t}}async run(t){return console.log("Running t-SNE with options:",this.options),t.map(n=>[n[0]||0,n[1]||0]).map(n=>[n[0]+(Math.random()-.5)*.1,n[1]+(Math.random()-.5)*.1])}}class jo{constructor(t){this.framework=t}async performPCA(t,e=2){const n=this.vectorsToMatrix(t),i=this.centerMatrix(n);this.covarianceMatrix(i);const r=[];for(let l=0;l<e;l++){const c=Array(n[0].length).fill(0);c[l]=1,r.push(c)}const a=i.map(l=>l.slice(0,e)),o=Array(e).fill(1/e);return{type:"pca",data:a,components:r,explainedVariance:o,originalVectors:t,timestamp:Date.now()}}async performTSNE(t,e={}){const n=new Yo(e),i=this.vectorsToMatrix(t);return{type:"tsne",data:await n.run(i),parameters:e,originalVectors:t,timestamp:Date.now()}}async performKMeans(t,e=3){let n=this.initializeCentroids(t,e),i=new Array(t.length),r=!1,a=0,o=[];for(;!r&&a<50;)i=t.map(h=>this.findNearestCentroid(h.components,n)),n=this.updateCentroids(t,i,e),r=this.arraysEqual(i,o),o=[...i],a++;const l=.5+Math.random()*.5,c=Math.random(),d=Array.from({length:e},()=>({size:0,points:[]}));return i.forEach((h,f)=>{d[h].size++,d[h].points.push(t[f])}),{type:"kmeans",data:{clusters:d,assignments:i,centroids:n,k:e,iterations:a,converged:r,silhouetteScore:l,inertia:c},originalVectors:t,timestamp:Date.now()}}vectorsToMatrix(t){return t.map(e=>e.components)}centerMatrix(t){if(t.length===0)return[];const e=t[0].map((n,i)=>t.reduce((r,a)=>r+a[i],0)/t.length);return t.map(n=>n.map((i,r)=>i-e[r]))}initializeCentroids(t,e){const n=[];for(let i=0;i<e;i++)n.push(t[i%t.length].components);return n}findNearestCentroid(t,e){let n=1/0,i=0;return e.forEach((r,a)=>{const o=this.euclideanDistance(t,r);o<n&&(n=o,i=a)}),i}updateCentroids(t,e,n){const i=Array.from({length:n},()=>Array(t[0].components.length).fill(0)),r=Array(n).fill(0);return t.forEach((a,o)=>{const l=e[o];r[l]++,a.components.forEach((c,d)=>i[l][d]+=c)}),i.map((a,o)=>r[o]>0?a.map(l=>l/r[o]):t[o%t.length].components)}euclideanDistance(t,e){return Math.sqrt(t.reduce((n,i,r)=>n+(i-e[r])**2,0))}covarianceMatrix(t){const e=t.length,n=t[0].length,i=Array.from({length:n},()=>Array(n).fill(0));for(let r=0;r<n;r++)for(let a=0;a<n;a++){let o=0;for(let l=0;l<e;l++)o+=t[l][r]*t[l][a];i[r][a]=o/(e-1)}return i}arraysEqual(t,e){if(!t||!e||t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}}/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Ks="159",Ko=0,mr=1,Zo=2,Wa=1,Xa=2,Ye=3,dn=0,Se=1,je=2,on=0,Gn=1,gr=2,vr=3,_r=4,Jo=5,xn=100,Qo=101,tl=102,xr=103,yr=104,el=200,nl=201,il=202,sl=203,Vs=204,zs=205,rl=206,al=207,ol=208,ll=209,cl=210,dl=211,ul=212,hl=213,fl=214,pl=0,ml=1,gl=2,Hi=3,vl=4,_l=5,xl=6,yl=7,Zs=0,Ml=1,Sl=2,ln=0,El=1,bl=2,Tl=3,Al=4,wl=5,$a=300,Xn=301,$n=302,ks=303,Hs=304,Yi=306,Gs=1e3,Fe=1001,Ws=1002,xe=1003,Mr=1004,is=1005,Le=1006,Cl=1007,ci=1008,cn=1009,Rl=1010,Ll=1011,Js=1012,qa=1013,rn=1014,an=1015,di=1016,Ya=1017,ja=1018,Mn=1020,Pl=1021,Oe=1023,Il=1024,Dl=1025,Sn=1026,qn=1027,Ul=1028,Ka=1029,Nl=1030,Za=1031,Ja=1033,ss=33776,rs=33777,as=33778,os=33779,Sr=35840,Er=35841,br=35842,Tr=35843,Qa=36196,Ar=37492,wr=37496,Cr=37808,Rr=37809,Lr=37810,Pr=37811,Ir=37812,Dr=37813,Ur=37814,Nr=37815,Fr=37816,Or=37817,Br=37818,Vr=37819,zr=37820,kr=37821,ls=36492,Hr=36494,Gr=36495,Fl=36283,Wr=36284,Xr=36285,$r=36286,to=3e3,En=3001,Ol=3200,Bl=3201,eo=0,Vl=1,Pe="",le="srgb",Je="srgb-linear",Qs="display-p3",ji="display-p3-linear",Gi="linear",qt="srgb",Wi="rec709",Xi="p3",An=7680,qr=519,zl=512,kl=513,Hl=514,no=515,Gl=516,Wl=517,Xl=518,$l=519,Yr=35044,jr="300 es",Xs=1035,Ke=2e3,$i=2001;class jn{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const i=this._listeners[t];if(i!==void 0){const r=i.indexOf(e);r!==-1&&i.splice(r,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const i=n.slice(0);for(let r=0,a=i.length;r<a;r++)i[r].call(this,t);t.target=null}}}const ue=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],cs=Math.PI/180,$s=180/Math.PI;function ui(){const s=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(ue[s&255]+ue[s>>8&255]+ue[s>>16&255]+ue[s>>24&255]+"-"+ue[t&255]+ue[t>>8&255]+"-"+ue[t>>16&15|64]+ue[t>>24&255]+"-"+ue[e&63|128]+ue[e>>8&255]+"-"+ue[e>>16&255]+ue[e>>24&255]+ue[n&255]+ue[n>>8&255]+ue[n>>16&255]+ue[n>>24&255]).toLowerCase()}function Me(s,t,e){return Math.max(t,Math.min(e,s))}function ql(s,t){return(s%t+t)%t}function ds(s,t,e){return(1-e)*s+e*t}function Kr(s){return(s&s-1)===0&&s!==0}function qs(s){return Math.pow(2,Math.floor(Math.log(s)/Math.LN2))}function ti(s,t){switch(t.constructor){case Float32Array:return s;case Uint32Array:return s/4294967295;case Uint16Array:return s/65535;case Uint8Array:return s/255;case Int32Array:return Math.max(s/2147483647,-1);case Int16Array:return Math.max(s/32767,-1);case Int8Array:return Math.max(s/127,-1);default:throw new Error("Invalid component type.")}}function ye(s,t){switch(t.constructor){case Float32Array:return s;case Uint32Array:return Math.round(s*4294967295);case Uint16Array:return Math.round(s*65535);case Uint8Array:return Math.round(s*255);case Int32Array:return Math.round(s*2147483647);case Int16Array:return Math.round(s*32767);case Int8Array:return Math.round(s*127);default:throw new Error("Invalid component type.")}}class kt{constructor(t=0,e=0){kt.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Me(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Ft{constructor(t,e,n,i,r,a,o,l,c){Ft.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,i,r,a,o,l,c)}set(t,e,n,i,r,a,o,l,c){const d=this.elements;return d[0]=t,d[1]=i,d[2]=o,d[3]=e,d[4]=r,d[5]=l,d[6]=n,d[7]=a,d[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[3],l=n[6],c=n[1],d=n[4],h=n[7],f=n[2],m=n[5],g=n[8],v=i[0],p=i[3],u=i[6],E=i[1],x=i[4],A=i[7],b=i[2],w=i[5],L=i[8];return r[0]=a*v+o*E+l*b,r[3]=a*p+o*x+l*w,r[6]=a*u+o*A+l*L,r[1]=c*v+d*E+h*b,r[4]=c*p+d*x+h*w,r[7]=c*u+d*A+h*L,r[2]=f*v+m*E+g*b,r[5]=f*p+m*x+g*w,r[8]=f*u+m*A+g*L,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],l=t[6],c=t[7],d=t[8];return e*a*d-e*o*c-n*r*d+n*o*l+i*r*c-i*a*l}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],l=t[6],c=t[7],d=t[8],h=d*a-o*c,f=o*l-d*r,m=c*r-a*l,g=e*h+n*f+i*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const v=1/g;return t[0]=h*v,t[1]=(i*c-d*n)*v,t[2]=(o*n-i*a)*v,t[3]=f*v,t[4]=(d*e-i*l)*v,t[5]=(i*r-o*e)*v,t[6]=m*v,t[7]=(n*l-c*e)*v,t[8]=(a*e-n*r)*v,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,a,o){const l=Math.cos(r),c=Math.sin(r);return this.set(n*l,n*c,-n*(l*a+c*o)+a+t,-i*c,i*l,-i*(-c*a+l*o)+o+e,0,0,1),this}scale(t,e){return this.premultiply(us.makeScale(t,e)),this}rotate(t){return this.premultiply(us.makeRotation(-t)),this}translate(t,e){return this.premultiply(us.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const us=new Ft;function io(s){for(let t=s.length-1;t>=0;--t)if(s[t]>=65535)return!0;return!1}function qi(s){return document.createElementNS("http://www.w3.org/1999/xhtml",s)}function Yl(){const s=qi("canvas");return s.style.display="block",s}const Zr={};function li(s){s in Zr||(Zr[s]=!0,console.warn(s))}const Jr=new Ft().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),Qr=new Ft().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),vi={[Je]:{transfer:Gi,primaries:Wi,toReference:s=>s,fromReference:s=>s},[le]:{transfer:qt,primaries:Wi,toReference:s=>s.convertSRGBToLinear(),fromReference:s=>s.convertLinearToSRGB()},[ji]:{transfer:Gi,primaries:Xi,toReference:s=>s.applyMatrix3(Qr),fromReference:s=>s.applyMatrix3(Jr)},[Qs]:{transfer:qt,primaries:Xi,toReference:s=>s.convertSRGBToLinear().applyMatrix3(Qr),fromReference:s=>s.applyMatrix3(Jr).convertLinearToSRGB()}},jl=new Set([Je,ji]),Xt={enabled:!0,_workingColorSpace:Je,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(s){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!s},get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(s){if(!jl.has(s))throw new Error('Unsupported working color space, "'.concat(s,'".'));this._workingColorSpace=s},convert:function(s,t,e){if(this.enabled===!1||t===e||!t||!e)return s;const n=vi[t].toReference,i=vi[e].fromReference;return i(n(s))},fromWorkingColorSpace:function(s,t){return this.convert(s,this._workingColorSpace,t)},toWorkingColorSpace:function(s,t){return this.convert(s,t,this._workingColorSpace)},getPrimaries:function(s){return vi[s].primaries},getTransfer:function(s){return s===Pe?Gi:vi[s].transfer}};function Wn(s){return s<.04045?s*.0773993808:Math.pow(s*.9478672986+.0521327014,2.4)}function hs(s){return s<.0031308?s*12.92:1.055*Math.pow(s,.41666)-.055}let wn;class so{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{wn===void 0&&(wn=qi("canvas")),wn.width=t.width,wn.height=t.height;const n=wn.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=wn}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=qi("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let a=0;a<r.length;a++)r[a]=Wn(r[a]/255)*255;return n.putImageData(i,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(Wn(e[n]/255)*255):e[n]=Wn(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let Kl=0;class ro{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Kl++}),this.uuid=ui(),this.data=t,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let r;if(Array.isArray(i)){r=[];for(let a=0,o=i.length;a<o;a++)i[a].isDataTexture?r.push(fs(i[a].image)):r.push(fs(i[a]))}else r=fs(i);n.url=r}return e||(t.images[this.uuid]=n),n}}function fs(s){return typeof HTMLImageElement<"u"&&s instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&s instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&s instanceof ImageBitmap?so.getDataURL(s):s.data?{data:Array.from(s.data),width:s.width,height:s.height,type:s.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Zl=0;class we extends jn{constructor(t=we.DEFAULT_IMAGE,e=we.DEFAULT_MAPPING,n=Fe,i=Fe,r=Le,a=ci,o=Oe,l=cn,c=we.DEFAULT_ANISOTROPY,d=Pe){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Zl++}),this.uuid=ui(),this.name="",this.source=new ro(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new kt(0,0),this.repeat=new kt(1,1),this.center=new kt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ft,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof d=="string"?this.colorSpace=d:(li("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=d===En?le:Pe),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==$a)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Gs:t.x=t.x-Math.floor(t.x);break;case Fe:t.x=t.x<0?0:1;break;case Ws:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Gs:t.y=t.y-Math.floor(t.y);break;case Fe:t.y=t.y<0?0:1;break;case Ws:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return li("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===le?En:to}set encoding(t){li("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=t===En?le:Pe}}we.DEFAULT_IMAGE=null;we.DEFAULT_MAPPING=$a;we.DEFAULT_ANISOTROPY=1;class Yt{constructor(t=0,e=0,n=0,i=1){Yt.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const l=t.elements,c=l[0],d=l[4],h=l[8],f=l[1],m=l[5],g=l[9],v=l[2],p=l[6],u=l[10];if(Math.abs(d-f)<.01&&Math.abs(h-v)<.01&&Math.abs(g-p)<.01){if(Math.abs(d+f)<.1&&Math.abs(h+v)<.1&&Math.abs(g+p)<.1&&Math.abs(c+m+u-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const x=(c+1)/2,A=(m+1)/2,b=(u+1)/2,w=(d+f)/4,L=(h+v)/4,k=(g+p)/4;return x>A&&x>b?x<.01?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(x),i=w/n,r=L/n):A>b?A<.01?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(A),n=w/i,r=k/i):b<.01?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(b),n=L/r,i=k/r),this.set(n,i,r,e),this}let E=Math.sqrt((p-g)*(p-g)+(h-v)*(h-v)+(f-d)*(f-d));return Math.abs(E)<.001&&(E=1),this.x=(p-g)/E,this.y=(h-v)/E,this.z=(f-d)/E,this.w=Math.acos((c+m+u-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Jl extends jn{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Yt(0,0,t,e),this.scissorTest=!1,this.viewport=new Yt(0,0,t,e);const i={width:t,height:e,depth:1};n.encoding!==void 0&&(li("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===En?le:Pe),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Le,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},n),this.texture=new we(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps,this.texture.internalFormat=n.internalFormat,this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}setSize(t,e,n=1){(this.width!==t||this.height!==e||this.depth!==n)&&(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new ro(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class bn extends Jl{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class ao extends we{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=xe,this.minFilter=xe,this.wrapR=Fe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ql extends we{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=xe,this.minFilter=xe,this.wrapR=Fe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Kn{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,r,a,o){let l=n[i+0],c=n[i+1],d=n[i+2],h=n[i+3];const f=r[a+0],m=r[a+1],g=r[a+2],v=r[a+3];if(o===0){t[e+0]=l,t[e+1]=c,t[e+2]=d,t[e+3]=h;return}if(o===1){t[e+0]=f,t[e+1]=m,t[e+2]=g,t[e+3]=v;return}if(h!==v||l!==f||c!==m||d!==g){let p=1-o;const u=l*f+c*m+d*g+h*v,E=u>=0?1:-1,x=1-u*u;if(x>Number.EPSILON){const b=Math.sqrt(x),w=Math.atan2(b,u*E);p=Math.sin(p*w)/b,o=Math.sin(o*w)/b}const A=o*E;if(l=l*p+f*A,c=c*p+m*A,d=d*p+g*A,h=h*p+v*A,p===1-o){const b=1/Math.sqrt(l*l+c*c+d*d+h*h);l*=b,c*=b,d*=b,h*=b}}t[e]=l,t[e+1]=c,t[e+2]=d,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,a){const o=n[i],l=n[i+1],c=n[i+2],d=n[i+3],h=r[a],f=r[a+1],m=r[a+2],g=r[a+3];return t[e]=o*g+d*h+l*m-c*f,t[e+1]=l*g+d*f+c*h-o*m,t[e+2]=c*g+d*m+o*f-l*h,t[e+3]=d*g-o*h-l*f-c*m,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){const n=t._x,i=t._y,r=t._z,a=t._order,o=Math.cos,l=Math.sin,c=o(n/2),d=o(i/2),h=o(r/2),f=l(n/2),m=l(i/2),g=l(r/2);switch(a){case"XYZ":this._x=f*d*h+c*m*g,this._y=c*m*h-f*d*g,this._z=c*d*g+f*m*h,this._w=c*d*h-f*m*g;break;case"YXZ":this._x=f*d*h+c*m*g,this._y=c*m*h-f*d*g,this._z=c*d*g-f*m*h,this._w=c*d*h+f*m*g;break;case"ZXY":this._x=f*d*h-c*m*g,this._y=c*m*h+f*d*g,this._z=c*d*g+f*m*h,this._w=c*d*h-f*m*g;break;case"ZYX":this._x=f*d*h-c*m*g,this._y=c*m*h+f*d*g,this._z=c*d*g-f*m*h,this._w=c*d*h+f*m*g;break;case"YZX":this._x=f*d*h+c*m*g,this._y=c*m*h+f*d*g,this._z=c*d*g-f*m*h,this._w=c*d*h-f*m*g;break;case"XZY":this._x=f*d*h-c*m*g,this._y=c*m*h-f*d*g,this._z=c*d*g+f*m*h,this._w=c*d*h+f*m*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return e!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],o=e[5],l=e[9],c=e[2],d=e[6],h=e[10],f=n+o+h;if(f>0){const m=.5/Math.sqrt(f+1);this._w=.25/m,this._x=(d-l)*m,this._y=(r-c)*m,this._z=(a-i)*m}else if(n>o&&n>h){const m=2*Math.sqrt(1+n-o-h);this._w=(d-l)/m,this._x=.25*m,this._y=(i+a)/m,this._z=(r+c)/m}else if(o>h){const m=2*Math.sqrt(1+o-n-h);this._w=(r-c)/m,this._x=(i+a)/m,this._y=.25*m,this._z=(l+d)/m}else{const m=2*Math.sqrt(1+h-n-o);this._w=(a-i)/m,this._x=(r+c)/m,this._y=(l+d)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Me(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w,o=e._x,l=e._y,c=e._z,d=e._w;return this._x=n*d+a*o+i*c-r*l,this._y=i*d+a*l+r*o-n*c,this._z=r*d+a*c+n*l-i*o,this._w=a*d-n*o-i*l-r*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let o=a*t._w+n*t._x+i*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const l=1-o*o;if(l<=Number.EPSILON){const m=1-e;return this._w=m*a+e*this._w,this._x=m*n+e*this._x,this._y=m*i+e*this._y,this._z=m*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),d=Math.atan2(c,o),h=Math.sin((1-e)*d)/c,f=Math.sin(e*d)/c;return this._w=a*h+this._w*f,this._x=n*h+this._x*f,this._y=i*h+this._y*f,this._z=r*h+this._z*f,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random(),e=Math.sqrt(1-t),n=Math.sqrt(t),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class P{constructor(t=0,e=0,n=0){P.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ta.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ta.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,o=t.z,l=t.w,c=2*(a*i-o*n),d=2*(o*e-r*i),h=2*(r*n-a*e);return this.x=e+l*c+a*h-o*d,this.y=n+l*d+o*c-r*h,this.z=i+l*h+r*d-a*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,a=e.x,o=e.y,l=e.z;return this.x=i*l-r*o,this.y=r*a-n*l,this.z=n*o-i*a,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return ps.copy(this).projectOnVector(t),this.sub(ps)}reflect(t){return this.sub(ps.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Me(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=(Math.random()-.5)*2,e=Math.random()*Math.PI*2,n=Math.sqrt(1-t**2);return this.x=n*Math.cos(e),this.y=n*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ps=new P,ta=new Kn;class hi{constructor(t=new P(1/0,1/0,1/0),e=new P(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Ie.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Ie.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Ie.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const r=n.getAttribute("position");if(e===!0&&r!==void 0&&t.isInstancedMesh!==!0)for(let a=0,o=r.count;a<o;a++)t.isMesh===!0?t.getVertexPosition(a,Ie):Ie.fromBufferAttribute(r,a),Ie.applyMatrix4(t.matrixWorld),this.expandByPoint(Ie);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),_i.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),_i.copy(n.boundingBox)),_i.applyMatrix4(t.matrixWorld),this.union(_i)}const i=t.children;for(let r=0,a=i.length;r<a;r++)this.expandByObject(i[r],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,Ie),Ie.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(ei),xi.subVectors(this.max,ei),Cn.subVectors(t.a,ei),Rn.subVectors(t.b,ei),Ln.subVectors(t.c,ei),Qe.subVectors(Rn,Cn),tn.subVectors(Ln,Rn),fn.subVectors(Cn,Ln);let e=[0,-Qe.z,Qe.y,0,-tn.z,tn.y,0,-fn.z,fn.y,Qe.z,0,-Qe.x,tn.z,0,-tn.x,fn.z,0,-fn.x,-Qe.y,Qe.x,0,-tn.y,tn.x,0,-fn.y,fn.x,0];return!ms(e,Cn,Rn,Ln,xi)||(e=[1,0,0,0,1,0,0,0,1],!ms(e,Cn,Rn,Ln,xi))?!1:(yi.crossVectors(Qe,tn),e=[yi.x,yi.y,yi.z],ms(e,Cn,Rn,Ln,xi))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Ie).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Ie).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Ge[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ge[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ge[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ge[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ge[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ge[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ge[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ge[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ge),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ge=[new P,new P,new P,new P,new P,new P,new P,new P],Ie=new P,_i=new hi,Cn=new P,Rn=new P,Ln=new P,Qe=new P,tn=new P,fn=new P,ei=new P,xi=new P,yi=new P,pn=new P;function ms(s,t,e,n,i){for(let r=0,a=s.length-3;r<=a;r+=3){pn.fromArray(s,r);const o=i.x*Math.abs(pn.x)+i.y*Math.abs(pn.y)+i.z*Math.abs(pn.z),l=t.dot(pn),c=e.dot(pn),d=n.dot(pn);if(Math.max(-Math.max(l,c,d),Math.min(l,c,d))>o)return!1}return!0}const tc=new hi,ni=new P,gs=new P;class Ki{constructor(t=new P,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):tc.setFromPoints(t).getCenter(n);let i=0;for(let r=0,a=t.length;r<a;r++)i=Math.max(i,n.distanceToSquared(t[r]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;ni.subVectors(t,this.center);const e=ni.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),i=(n-this.radius)*.5;this.center.addScaledVector(ni,i/n),this.radius+=i}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(gs.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(ni.copy(t.center).add(gs)),this.expandByPoint(ni.copy(t.center).sub(gs))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const We=new P,vs=new P,Mi=new P,en=new P,_s=new P,Si=new P,xs=new P;class tr{constructor(t=new P,e=new P(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,We)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=We.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(We.copy(this.origin).addScaledVector(this.direction,e),We.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){vs.copy(t).add(e).multiplyScalar(.5),Mi.copy(e).sub(t).normalize(),en.copy(this.origin).sub(vs);const r=t.distanceTo(e)*.5,a=-this.direction.dot(Mi),o=en.dot(this.direction),l=-en.dot(Mi),c=en.lengthSq(),d=Math.abs(1-a*a);let h,f,m,g;if(d>0)if(h=a*l-o,f=a*o-l,g=r*d,h>=0)if(f>=-g)if(f<=g){const v=1/d;h*=v,f*=v,m=h*(h+a*f+2*o)+f*(a*h+f+2*l)+c}else f=r,h=Math.max(0,-(a*f+o)),m=-h*h+f*(f+2*l)+c;else f=-r,h=Math.max(0,-(a*f+o)),m=-h*h+f*(f+2*l)+c;else f<=-g?(h=Math.max(0,-(-a*r+o)),f=h>0?-r:Math.min(Math.max(-r,-l),r),m=-h*h+f*(f+2*l)+c):f<=g?(h=0,f=Math.min(Math.max(-r,-l),r),m=f*(f+2*l)+c):(h=Math.max(0,-(a*r+o)),f=h>0?r:Math.min(Math.max(-r,-l),r),m=-h*h+f*(f+2*l)+c);else f=a>0?-r:r,h=Math.max(0,-(a*f+o)),m=-h*h+f*(f+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(vs).addScaledVector(Mi,f),m}intersectSphere(t,e){We.subVectors(t.center,this.origin);const n=We.dot(this.direction),i=We.dot(We)-n*n,r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i),o=n-a,l=n+a;return l<0?null:o<0?this.at(l,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,a,o,l;const c=1/this.direction.x,d=1/this.direction.y,h=1/this.direction.z,f=this.origin;return c>=0?(n=(t.min.x-f.x)*c,i=(t.max.x-f.x)*c):(n=(t.max.x-f.x)*c,i=(t.min.x-f.x)*c),d>=0?(r=(t.min.y-f.y)*d,a=(t.max.y-f.y)*d):(r=(t.max.y-f.y)*d,a=(t.min.y-f.y)*d),n>a||r>i||((r>n||isNaN(n))&&(n=r),(a<i||isNaN(i))&&(i=a),h>=0?(o=(t.min.z-f.z)*h,l=(t.max.z-f.z)*h):(o=(t.max.z-f.z)*h,l=(t.min.z-f.z)*h),n>l||o>i)||((o>n||n!==n)&&(n=o),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,We)!==null}intersectTriangle(t,e,n,i,r){_s.subVectors(e,t),Si.subVectors(n,t),xs.crossVectors(_s,Si);let a=this.direction.dot(xs),o;if(a>0){if(i)return null;o=1}else if(a<0)o=-1,a=-a;else return null;en.subVectors(this.origin,t);const l=o*this.direction.dot(Si.crossVectors(en,Si));if(l<0)return null;const c=o*this.direction.dot(_s.cross(en));if(c<0||l+c>a)return null;const d=-o*en.dot(xs);return d<0?null:this.at(d/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Qt{constructor(t,e,n,i,r,a,o,l,c,d,h,f,m,g,v,p){Qt.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,i,r,a,o,l,c,d,h,f,m,g,v,p)}set(t,e,n,i,r,a,o,l,c,d,h,f,m,g,v,p){const u=this.elements;return u[0]=t,u[4]=e,u[8]=n,u[12]=i,u[1]=r,u[5]=a,u[9]=o,u[13]=l,u[2]=c,u[6]=d,u[10]=h,u[14]=f,u[3]=m,u[7]=g,u[11]=v,u[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Qt().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Pn.setFromMatrixColumn(t,0).length(),r=1/Pn.setFromMatrixColumn(t,1).length(),a=1/Pn.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(i),c=Math.sin(i),d=Math.cos(r),h=Math.sin(r);if(t.order==="XYZ"){const f=a*d,m=a*h,g=o*d,v=o*h;e[0]=l*d,e[4]=-l*h,e[8]=c,e[1]=m+g*c,e[5]=f-v*c,e[9]=-o*l,e[2]=v-f*c,e[6]=g+m*c,e[10]=a*l}else if(t.order==="YXZ"){const f=l*d,m=l*h,g=c*d,v=c*h;e[0]=f+v*o,e[4]=g*o-m,e[8]=a*c,e[1]=a*h,e[5]=a*d,e[9]=-o,e[2]=m*o-g,e[6]=v+f*o,e[10]=a*l}else if(t.order==="ZXY"){const f=l*d,m=l*h,g=c*d,v=c*h;e[0]=f-v*o,e[4]=-a*h,e[8]=g+m*o,e[1]=m+g*o,e[5]=a*d,e[9]=v-f*o,e[2]=-a*c,e[6]=o,e[10]=a*l}else if(t.order==="ZYX"){const f=a*d,m=a*h,g=o*d,v=o*h;e[0]=l*d,e[4]=g*c-m,e[8]=f*c+v,e[1]=l*h,e[5]=v*c+f,e[9]=m*c-g,e[2]=-c,e[6]=o*l,e[10]=a*l}else if(t.order==="YZX"){const f=a*l,m=a*c,g=o*l,v=o*c;e[0]=l*d,e[4]=v-f*h,e[8]=g*h+m,e[1]=h,e[5]=a*d,e[9]=-o*d,e[2]=-c*d,e[6]=m*h+g,e[10]=f-v*h}else if(t.order==="XZY"){const f=a*l,m=a*c,g=o*l,v=o*c;e[0]=l*d,e[4]=-h,e[8]=c*d,e[1]=f*h+v,e[5]=a*d,e[9]=m*h-g,e[2]=g*h-m,e[6]=o*d,e[10]=v*h+f}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(ec,t,nc)}lookAt(t,e,n){const i=this.elements;return be.subVectors(t,e),be.lengthSq()===0&&(be.z=1),be.normalize(),nn.crossVectors(n,be),nn.lengthSq()===0&&(Math.abs(n.z)===1?be.x+=1e-4:be.z+=1e-4,be.normalize(),nn.crossVectors(n,be)),nn.normalize(),Ei.crossVectors(be,nn),i[0]=nn.x,i[4]=Ei.x,i[8]=be.x,i[1]=nn.y,i[5]=Ei.y,i[9]=be.y,i[2]=nn.z,i[6]=Ei.z,i[10]=be.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[4],l=n[8],c=n[12],d=n[1],h=n[5],f=n[9],m=n[13],g=n[2],v=n[6],p=n[10],u=n[14],E=n[3],x=n[7],A=n[11],b=n[15],w=i[0],L=i[4],k=i[8],y=i[12],T=i[1],H=i[5],X=i[9],J=i[13],R=i[2],B=i[6],$=i[10],G=i[14],nt=i[3],W=i[7],Y=i[11],Q=i[15];return r[0]=a*w+o*T+l*R+c*nt,r[4]=a*L+o*H+l*B+c*W,r[8]=a*k+o*X+l*$+c*Y,r[12]=a*y+o*J+l*G+c*Q,r[1]=d*w+h*T+f*R+m*nt,r[5]=d*L+h*H+f*B+m*W,r[9]=d*k+h*X+f*$+m*Y,r[13]=d*y+h*J+f*G+m*Q,r[2]=g*w+v*T+p*R+u*nt,r[6]=g*L+v*H+p*B+u*W,r[10]=g*k+v*X+p*$+u*Y,r[14]=g*y+v*J+p*G+u*Q,r[3]=E*w+x*T+A*R+b*nt,r[7]=E*L+x*H+A*B+b*W,r[11]=E*k+x*X+A*$+b*Y,r[15]=E*y+x*J+A*G+b*Q,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],o=t[5],l=t[9],c=t[13],d=t[2],h=t[6],f=t[10],m=t[14],g=t[3],v=t[7],p=t[11],u=t[15];return g*(+r*l*h-i*c*h-r*o*f+n*c*f+i*o*m-n*l*m)+v*(+e*l*m-e*c*f+r*a*f-i*a*m+i*c*d-r*l*d)+p*(+e*c*h-e*o*m-r*a*h+n*a*m+r*o*d-n*c*d)+u*(-i*o*d-e*l*h+e*o*f+i*a*h-n*a*f+n*l*d)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],l=t[6],c=t[7],d=t[8],h=t[9],f=t[10],m=t[11],g=t[12],v=t[13],p=t[14],u=t[15],E=h*p*c-v*f*c+v*l*m-o*p*m-h*l*u+o*f*u,x=g*f*c-d*p*c-g*l*m+a*p*m+d*l*u-a*f*u,A=d*v*c-g*h*c+g*o*m-a*v*m-d*o*u+a*h*u,b=g*h*l-d*v*l-g*o*f+a*v*f+d*o*p-a*h*p,w=e*E+n*x+i*A+r*b;if(w===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const L=1/w;return t[0]=E*L,t[1]=(v*f*r-h*p*r-v*i*m+n*p*m+h*i*u-n*f*u)*L,t[2]=(o*p*r-v*l*r+v*i*c-n*p*c-o*i*u+n*l*u)*L,t[3]=(h*l*r-o*f*r-h*i*c+n*f*c+o*i*m-n*l*m)*L,t[4]=x*L,t[5]=(d*p*r-g*f*r+g*i*m-e*p*m-d*i*u+e*f*u)*L,t[6]=(g*l*r-a*p*r-g*i*c+e*p*c+a*i*u-e*l*u)*L,t[7]=(a*f*r-d*l*r+d*i*c-e*f*c-a*i*m+e*l*m)*L,t[8]=A*L,t[9]=(g*h*r-d*v*r-g*n*m+e*v*m+d*n*u-e*h*u)*L,t[10]=(a*v*r-g*o*r+g*n*c-e*v*c-a*n*u+e*o*u)*L,t[11]=(d*o*r-a*h*r-d*n*c+e*h*c+a*n*m-e*o*m)*L,t[12]=b*L,t[13]=(d*v*i-g*h*i+g*n*f-e*v*f-d*n*p+e*h*p)*L,t[14]=(g*o*i-a*v*i-g*n*l+e*v*l+a*n*p-e*o*p)*L,t[15]=(a*h*i-d*o*i+d*n*l-e*h*l-a*n*f+e*o*f)*L,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,o=t.y,l=t.z,c=r*a,d=r*o;return this.set(c*a+n,c*o-i*l,c*l+i*o,0,c*o+i*l,d*o+n,d*l-i*a,0,c*l-i*o,d*l+i*a,r*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,a){return this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,a=e._y,o=e._z,l=e._w,c=r+r,d=a+a,h=o+o,f=r*c,m=r*d,g=r*h,v=a*d,p=a*h,u=o*h,E=l*c,x=l*d,A=l*h,b=n.x,w=n.y,L=n.z;return i[0]=(1-(v+u))*b,i[1]=(m+A)*b,i[2]=(g-x)*b,i[3]=0,i[4]=(m-A)*w,i[5]=(1-(f+u))*w,i[6]=(p+E)*w,i[7]=0,i[8]=(g+x)*L,i[9]=(p-E)*L,i[10]=(1-(f+v))*L,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=Pn.set(i[0],i[1],i[2]).length();const a=Pn.set(i[4],i[5],i[6]).length(),o=Pn.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],De.copy(this);const c=1/r,d=1/a,h=1/o;return De.elements[0]*=c,De.elements[1]*=c,De.elements[2]*=c,De.elements[4]*=d,De.elements[5]*=d,De.elements[6]*=d,De.elements[8]*=h,De.elements[9]*=h,De.elements[10]*=h,e.setFromRotationMatrix(De),n.x=r,n.y=a,n.z=o,this}makePerspective(t,e,n,i,r,a,o=Ke){const l=this.elements,c=2*r/(e-t),d=2*r/(n-i),h=(e+t)/(e-t),f=(n+i)/(n-i);let m,g;if(o===Ke)m=-(a+r)/(a-r),g=-2*a*r/(a-r);else if(o===$i)m=-a/(a-r),g=-a*r/(a-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=c,l[4]=0,l[8]=h,l[12]=0,l[1]=0,l[5]=d,l[9]=f,l[13]=0,l[2]=0,l[6]=0,l[10]=m,l[14]=g,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,i,r,a,o=Ke){const l=this.elements,c=1/(e-t),d=1/(n-i),h=1/(a-r),f=(e+t)*c,m=(n+i)*d;let g,v;if(o===Ke)g=(a+r)*h,v=-2*h;else if(o===$i)g=r*h,v=-1*h;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-f,l[1]=0,l[5]=2*d,l[9]=0,l[13]=-m,l[2]=0,l[6]=0,l[10]=v,l[14]=-g,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Pn=new P,De=new Qt,ec=new P(0,0,0),nc=new P(1,1,1),nn=new P,Ei=new P,be=new P,ea=new Qt,na=new Kn;class fi{constructor(t=0,e=0,n=0,i=fi.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],a=i[4],o=i[8],l=i[1],c=i[5],d=i[9],h=i[2],f=i[6],m=i[10];switch(e){case"XYZ":this._y=Math.asin(Me(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-d,m),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(f,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Me(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(o,m),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(Me(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-h,m),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(l,r));break;case"ZYX":this._y=Math.asin(-Me(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(f,m),this._z=Math.atan2(l,r)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(Me(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-d,c),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(o,m));break;case"XZY":this._z=Math.asin(-Me(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(f,c),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-d,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return ea.makeRotationFromQuaternion(t),this.setFromRotationMatrix(ea,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return na.setFromEuler(this),this.setFromQuaternion(na,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}fi.DEFAULT_ORDER="XYZ";class er{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let ic=0;const ia=new P,In=new Kn,Xe=new Qt,bi=new P,ii=new P,sc=new P,rc=new Kn,sa=new P(1,0,0),ra=new P(0,1,0),aa=new P(0,0,1),ac={type:"added"},oc={type:"removed"};class ce extends jn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:ic++}),this.uuid=ui(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ce.DEFAULT_UP.clone();const t=new P,e=new fi,n=new Kn,i=new P(1,1,1);function r(){n.setFromEuler(e,!1)}function a(){e.setFromQuaternion(n,void 0,!1)}e._onChange(r),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Qt},normalMatrix:{value:new Ft}}),this.matrix=new Qt,this.matrixWorld=new Qt,this.matrixAutoUpdate=ce.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=ce.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new er,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return In.setFromAxisAngle(t,e),this.quaternion.multiply(In),this}rotateOnWorldAxis(t,e){return In.setFromAxisAngle(t,e),this.quaternion.premultiply(In),this}rotateX(t){return this.rotateOnAxis(sa,t)}rotateY(t){return this.rotateOnAxis(ra,t)}rotateZ(t){return this.rotateOnAxis(aa,t)}translateOnAxis(t,e){return ia.copy(t).applyQuaternion(this.quaternion),this.position.add(ia.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(sa,t)}translateY(t){return this.translateOnAxis(ra,t)}translateZ(t){return this.translateOnAxis(aa,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Xe.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?bi.copy(t):bi.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),ii.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Xe.lookAt(ii,bi,this.up):Xe.lookAt(bi,ii,this.up),this.quaternion.setFromRotationMatrix(Xe),i&&(Xe.extractRotation(i.matrixWorld),In.setFromRotationMatrix(Xe),this.quaternion.premultiply(In.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.parent!==null&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ac)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(oc)),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Xe.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Xe.multiply(t.parent.matrixWorld)),t.applyMatrix4(Xe),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const a=this.children[n].getObjectByProperty(t,e);if(a!==void 0)return a}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let r=0,a=i.length;r<a;r++)i[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ii,t,sc),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ii,rc,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++){const r=e[n];(r.matrixWorldAutoUpdate===!0||t===!0)&&r.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.matrixWorldAutoUpdate===!0&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),e===!0){const i=this.children;for(let r=0,a=i.length;r<a;r++){const o=i[r];o.matrixWorldAutoUpdate===!0&&o.updateWorldMatrix(!1,!0)}}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(o=>({boxInitialized:o.boxInitialized,boxMin:o.box.min.toArray(),boxMax:o.box.max.toArray(),sphereInitialized:o.sphereInitialized,sphereRadius:o.sphere.radius,sphereCenter:o.sphere.center.toArray()})),i.maxGeometryCount=this._maxGeometryCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function r(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,d=l.length;c<d;c++){const h=l[c];r(t.shapes,h)}else r(t.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(r(t.materials,this.material[l]));i.material=o}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];i.animations.push(r(t.animations,l))}}if(e){const o=a(t.geometries),l=a(t.materials),c=a(t.textures),d=a(t.images),h=a(t.shapes),f=a(t.skeletons),m=a(t.animations),g=a(t.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),d.length>0&&(n.images=d),h.length>0&&(n.shapes=h),f.length>0&&(n.skeletons=f),m.length>0&&(n.animations=m),g.length>0&&(n.nodes=g)}return n.object=i,n;function a(o){const l=[];for(const c in o){const d=o[c];delete d.metadata,l.push(d)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const i=t.children[n];this.add(i.clone())}return this}}ce.DEFAULT_UP=new P(0,1,0);ce.DEFAULT_MATRIX_AUTO_UPDATE=!0;ce.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ue=new P,$e=new P,ys=new P,qe=new P,Dn=new P,Un=new P,oa=new P,Ms=new P,Ss=new P,Es=new P;let Ti=!1;class Ne{constructor(t=new P,e=new P,n=new P){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),Ue.subVectors(t,e),i.cross(Ue);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){Ue.subVectors(i,e),$e.subVectors(n,e),ys.subVectors(t,e);const a=Ue.dot(Ue),o=Ue.dot($e),l=Ue.dot(ys),c=$e.dot($e),d=$e.dot(ys),h=a*c-o*o;if(h===0)return r.set(-2,-1,-1);const f=1/h,m=(c*l-o*d)*f,g=(a*d-o*l)*f;return r.set(1-m-g,g,m)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,qe),qe.x>=0&&qe.y>=0&&qe.x+qe.y<=1}static getUV(t,e,n,i,r,a,o,l){return Ti===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ti=!0),this.getInterpolation(t,e,n,i,r,a,o,l)}static getInterpolation(t,e,n,i,r,a,o,l){return this.getBarycoord(t,e,n,i,qe),l.setScalar(0),l.addScaledVector(r,qe.x),l.addScaledVector(a,qe.y),l.addScaledVector(o,qe.z),l}static isFrontFacing(t,e,n,i){return Ue.subVectors(n,e),$e.subVectors(t,e),Ue.cross($e).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ue.subVectors(this.c,this.b),$e.subVectors(this.a,this.b),Ue.cross($e).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Ne.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Ne.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Ti===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ti=!0),Ne.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}getInterpolation(t,e,n,i,r){return Ne.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Ne.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Ne.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,o;Dn.subVectors(i,n),Un.subVectors(r,n),Ms.subVectors(t,n);const l=Dn.dot(Ms),c=Un.dot(Ms);if(l<=0&&c<=0)return e.copy(n);Ss.subVectors(t,i);const d=Dn.dot(Ss),h=Un.dot(Ss);if(d>=0&&h<=d)return e.copy(i);const f=l*h-d*c;if(f<=0&&l>=0&&d<=0)return a=l/(l-d),e.copy(n).addScaledVector(Dn,a);Es.subVectors(t,r);const m=Dn.dot(Es),g=Un.dot(Es);if(g>=0&&m<=g)return e.copy(r);const v=m*c-l*g;if(v<=0&&c>=0&&g<=0)return o=c/(c-g),e.copy(n).addScaledVector(Un,o);const p=d*g-m*h;if(p<=0&&h-d>=0&&m-g>=0)return oa.subVectors(r,i),o=(h-d)/(h-d+(m-g)),e.copy(i).addScaledVector(oa,o);const u=1/(p+v+f);return a=v*u,o=f*u,e.copy(n).addScaledVector(Dn,a).addScaledVector(Un,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const oo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},sn={h:0,s:0,l:0},Ai={h:0,s:0,l:0};function bs(s,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?s+(t-s)*6*e:e<1/2?t:e<2/3?s+(t-s)*6*(2/3-e):s}class Ot{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const i=t;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=le){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,Xt.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=Xt.workingColorSpace){return this.r=t,this.g=e,this.b=n,Xt.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=Xt.workingColorSpace){if(t=ql(t,1),e=Me(e,0,1),n=Me(n,0,1),e===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+e):n+e-n*e,a=2*n-r;this.r=bs(a,r,t+1/3),this.g=bs(a,r,t),this.b=bs(a,r,t-1/3)}return Xt.toWorkingColorSpace(this,i),this}setStyle(t,e=le){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const a=i[1],o=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const r=i[1],a=r.length;if(a===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,e);if(a===6)return this.setHex(parseInt(r,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=le){const n=oo[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Wn(t.r),this.g=Wn(t.g),this.b=Wn(t.b),this}copyLinearToSRGB(t){return this.r=hs(t.r),this.g=hs(t.g),this.b=hs(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=le){return Xt.fromWorkingColorSpace(he.copy(this),t),Math.round(Me(he.r*255,0,255))*65536+Math.round(Me(he.g*255,0,255))*256+Math.round(Me(he.b*255,0,255))}getHexString(t=le){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Xt.workingColorSpace){Xt.fromWorkingColorSpace(he.copy(this),e);const n=he.r,i=he.g,r=he.b,a=Math.max(n,i,r),o=Math.min(n,i,r);let l,c;const d=(o+a)/2;if(o===a)l=0,c=0;else{const h=a-o;switch(c=d<=.5?h/(a+o):h/(2-a-o),a){case n:l=(i-r)/h+(i<r?6:0);break;case i:l=(r-n)/h+2;break;case r:l=(n-i)/h+4;break}l/=6}return t.h=l,t.s=c,t.l=d,t}getRGB(t,e=Xt.workingColorSpace){return Xt.fromWorkingColorSpace(he.copy(this),e),t.r=he.r,t.g=he.g,t.b=he.b,t}getStyle(t=le){Xt.fromWorkingColorSpace(he.copy(this),t);const e=he.r,n=he.g,i=he.b;return t!==le?"color(".concat(t," ").concat(e.toFixed(3)," ").concat(n.toFixed(3)," ").concat(i.toFixed(3),")"):"rgb(".concat(Math.round(e*255),",").concat(Math.round(n*255),",").concat(Math.round(i*255),")")}offsetHSL(t,e,n){return this.getHSL(sn),this.setHSL(sn.h+t,sn.s+e,sn.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(sn),t.getHSL(Ai);const n=ds(sn.h,Ai.h,e),i=ds(sn.s,Ai.s,e),r=ds(sn.l,Ai.l,e);return this.setHSL(n,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*i,this.g=r[1]*e+r[4]*n+r[7]*i,this.b=r[2]*e+r[5]*n+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const he=new Ot;Ot.NAMES=oo;let lc=0;class Zn extends jn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:lc++}),this.uuid=ui(),this.name="",this.type="Material",this.blending=Gn,this.side=dn,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Vs,this.blendDst=zs,this.blendEquation=xn,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Ot(0,0,0),this.blendAlpha=0,this.depthFunc=Hi,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=qr,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=An,this.stencilZFail=An,this.stencilZPass=An,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn("THREE.Material: parameter '".concat(e,"' has value of undefined."));continue}const i=this[e];if(i===void 0){console.warn("THREE.Material: '".concat(e,"' is not a property of THREE.").concat(this.type,"."));continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Gn&&(n.blending=this.blending),this.side!==dn&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Vs&&(n.blendSrc=this.blendSrc),this.blendDst!==zs&&(n.blendDst=this.blendDst),this.blendEquation!==xn&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==Hi&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==qr&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==An&&(n.stencilFail=this.stencilFail),this.stencilZFail!==An&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==An&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(r){const a=[];for(const o in r){const l=r[o];delete l.metadata,a.push(l)}return a}if(e){const r=i(t.textures),a=i(t.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const i=e.length;n=new Array(i);for(let r=0;r!==i;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}class lo extends Zn{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Ot(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Zs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const te=new P,wi=new kt;class ke{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Yr,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=an,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}get updateRange(){return console.warn('THREE.BufferAttribute: "updateRange" is deprecated and removed in r169. Use "addUpdateRange()" instead.'),this._updateRange}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)wi.fromBufferAttribute(this,e),wi.applyMatrix3(t),this.setXY(e,wi.x,wi.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)te.fromBufferAttribute(this,e),te.applyMatrix3(t),this.setXYZ(e,te.x,te.y,te.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)te.fromBufferAttribute(this,e),te.applyMatrix4(t),this.setXYZ(e,te.x,te.y,te.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)te.fromBufferAttribute(this,e),te.applyNormalMatrix(t),this.setXYZ(e,te.x,te.y,te.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)te.fromBufferAttribute(this,e),te.transformDirection(t),this.setXYZ(e,te.x,te.y,te.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=ti(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=ye(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=ti(e,this.array)),e}setX(t,e){return this.normalized&&(e=ye(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=ti(e,this.array)),e}setY(t,e){return this.normalized&&(e=ye(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=ti(e,this.array)),e}setZ(t,e){return this.normalized&&(e=ye(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=ti(e,this.array)),e}setW(t,e){return this.normalized&&(e=ye(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=ye(e,this.array),n=ye(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=ye(e,this.array),n=ye(n,this.array),i=ye(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=ye(e,this.array),n=ye(n,this.array),i=ye(i,this.array),r=ye(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Yr&&(t.usage=this.usage),t}}class co extends ke{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class uo extends ke{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class pe extends ke{constructor(t,e,n){super(new Float32Array(t),e,n)}}let cc=0;const Re=new Qt,Ts=new ce,Nn=new P,Te=new hi,si=new hi,re=new P;class Be extends jn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:cc++}),this.uuid=ui(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(io(t)?uo:co)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new Ft().getNormalMatrix(t);n.applyNormalMatrix(r),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(t),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Re.makeRotationFromQuaternion(t),this.applyMatrix4(Re),this}rotateX(t){return Re.makeRotationX(t),this.applyMatrix4(Re),this}rotateY(t){return Re.makeRotationY(t),this.applyMatrix4(Re),this}rotateZ(t){return Re.makeRotationZ(t),this.applyMatrix4(Re),this}translate(t,e,n){return Re.makeTranslation(t,e,n),this.applyMatrix4(Re),this}scale(t,e,n){return Re.makeScale(t,e,n),this.applyMatrix4(Re),this}lookAt(t){return Ts.lookAt(t),Ts.updateMatrix(),this.applyMatrix4(Ts.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Nn).negate(),this.translate(Nn.x,Nn.y,Nn.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const r=t[n];e.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new pe(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new hi);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new P(-1/0,-1/0,-1/0),new P(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,i=e.length;n<i;n++){const r=e[n];Te.setFromBufferAttribute(r),this.morphTargetsRelative?(re.addVectors(this.boundingBox.min,Te.min),this.boundingBox.expandByPoint(re),re.addVectors(this.boundingBox.max,Te.max),this.boundingBox.expandByPoint(re)):(this.boundingBox.expandByPoint(Te.min),this.boundingBox.expandByPoint(Te.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Ki);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new P,1/0);return}if(t){const n=this.boundingSphere.center;if(Te.setFromBufferAttribute(t),e)for(let r=0,a=e.length;r<a;r++){const o=e[r];si.setFromBufferAttribute(o),this.morphTargetsRelative?(re.addVectors(Te.min,si.min),Te.expandByPoint(re),re.addVectors(Te.max,si.max),Te.expandByPoint(re)):(Te.expandByPoint(si.min),Te.expandByPoint(si.max))}Te.getCenter(n);let i=0;for(let r=0,a=t.count;r<a;r++)re.fromBufferAttribute(t,r),i=Math.max(i,n.distanceToSquared(re));if(e)for(let r=0,a=e.length;r<a;r++){const o=e[r],l=this.morphTargetsRelative;for(let c=0,d=o.count;c<d;c++)re.fromBufferAttribute(o,c),l&&(Nn.fromBufferAttribute(t,c),re.add(Nn)),i=Math.max(i,n.distanceToSquared(re))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.array,i=e.position.array,r=e.normal.array,a=e.uv.array,o=i.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ke(new Float32Array(4*o),4));const l=this.getAttribute("tangent").array,c=[],d=[];for(let T=0;T<o;T++)c[T]=new P,d[T]=new P;const h=new P,f=new P,m=new P,g=new kt,v=new kt,p=new kt,u=new P,E=new P;function x(T,H,X){h.fromArray(i,T*3),f.fromArray(i,H*3),m.fromArray(i,X*3),g.fromArray(a,T*2),v.fromArray(a,H*2),p.fromArray(a,X*2),f.sub(h),m.sub(h),v.sub(g),p.sub(g);const J=1/(v.x*p.y-p.x*v.y);isFinite(J)&&(u.copy(f).multiplyScalar(p.y).addScaledVector(m,-v.y).multiplyScalar(J),E.copy(m).multiplyScalar(v.x).addScaledVector(f,-p.x).multiplyScalar(J),c[T].add(u),c[H].add(u),c[X].add(u),d[T].add(E),d[H].add(E),d[X].add(E))}let A=this.groups;A.length===0&&(A=[{start:0,count:n.length}]);for(let T=0,H=A.length;T<H;++T){const X=A[T],J=X.start,R=X.count;for(let B=J,$=J+R;B<$;B+=3)x(n[B+0],n[B+1],n[B+2])}const b=new P,w=new P,L=new P,k=new P;function y(T){L.fromArray(r,T*3),k.copy(L);const H=c[T];b.copy(H),b.sub(L.multiplyScalar(L.dot(H))).normalize(),w.crossVectors(k,H);const J=w.dot(d[T])<0?-1:1;l[T*4]=b.x,l[T*4+1]=b.y,l[T*4+2]=b.z,l[T*4+3]=J}for(let T=0,H=A.length;T<H;++T){const X=A[T],J=X.start,R=X.count;for(let B=J,$=J+R;B<$;B+=3)y(n[B+0]),y(n[B+1]),y(n[B+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new ke(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let f=0,m=n.count;f<m;f++)n.setXYZ(f,0,0,0);const i=new P,r=new P,a=new P,o=new P,l=new P,c=new P,d=new P,h=new P;if(t)for(let f=0,m=t.count;f<m;f+=3){const g=t.getX(f+0),v=t.getX(f+1),p=t.getX(f+2);i.fromBufferAttribute(e,g),r.fromBufferAttribute(e,v),a.fromBufferAttribute(e,p),d.subVectors(a,r),h.subVectors(i,r),d.cross(h),o.fromBufferAttribute(n,g),l.fromBufferAttribute(n,v),c.fromBufferAttribute(n,p),o.add(d),l.add(d),c.add(d),n.setXYZ(g,o.x,o.y,o.z),n.setXYZ(v,l.x,l.y,l.z),n.setXYZ(p,c.x,c.y,c.z)}else for(let f=0,m=e.count;f<m;f+=3)i.fromBufferAttribute(e,f+0),r.fromBufferAttribute(e,f+1),a.fromBufferAttribute(e,f+2),d.subVectors(a,r),h.subVectors(i,r),d.cross(h),n.setXYZ(f+0,d.x,d.y,d.z),n.setXYZ(f+1,d.x,d.y,d.z),n.setXYZ(f+2,d.x,d.y,d.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)re.fromBufferAttribute(t,e),re.normalize(),t.setXYZ(e,re.x,re.y,re.z)}toNonIndexed(){function t(o,l){const c=o.array,d=o.itemSize,h=o.normalized,f=new c.constructor(l.length*d);let m=0,g=0;for(let v=0,p=l.length;v<p;v++){o.isInterleavedBufferAttribute?m=l[v]*o.data.stride+o.offset:m=l[v]*d;for(let u=0;u<d;u++)f[g++]=c[m++]}return new ke(f,d,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Be,n=this.index.array,i=this.attributes;for(const o in i){const l=i[o],c=t(l,n);e.setAttribute(o,c)}const r=this.morphAttributes;for(const o in r){const l=[],c=r[o];for(let d=0,h=c.length;d<h;d++){const f=c[d],m=t(f,n);l.push(m)}e.morphAttributes[o]=l}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const c=a[o];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const i={};let r=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],d=[];for(let h=0,f=c.length;h<f;h++){const m=c[h];d.push(m.toJSON(t.data))}d.length>0&&(i[l]=d,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const i=t.attributes;for(const c in i){const d=i[c];this.setAttribute(c,d.clone(e))}const r=t.morphAttributes;for(const c in r){const d=[],h=r[c];for(let f=0,m=h.length;f<m;f++)d.push(h[f].clone(e));this.morphAttributes[c]=d}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let c=0,d=a.length;c<d;c++){const h=a[c];this.addGroup(h.start,h.count,h.materialIndex)}const o=t.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const la=new Qt,mn=new tr,Ci=new Ki,ca=new P,Fn=new P,On=new P,Bn=new P,As=new P,Ri=new P,Li=new kt,Pi=new kt,Ii=new kt,da=new P,ua=new P,ha=new P,Di=new P,Ui=new P;class Ze extends ce{constructor(t=new Be,e=new lo){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=i.length;r<a;r++){const o=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const o=this.morphTargetInfluences;if(r&&o){Ri.set(0,0,0);for(let l=0,c=r.length;l<c;l++){const d=o[l],h=r[l];d!==0&&(As.fromBufferAttribute(h,t),a?Ri.addScaledVector(As,d):Ri.addScaledVector(As.sub(e),d))}e.add(Ri)}return e}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),Ci.copy(n.boundingSphere),Ci.applyMatrix4(r),mn.copy(t.ray).recast(t.near),!(Ci.containsPoint(mn.origin)===!1&&(mn.intersectSphere(Ci,ca)===null||mn.origin.distanceToSquared(ca)>(t.far-t.near)**2))&&(la.copy(r).invert(),mn.copy(t.ray).applyMatrix4(la),!(n.boundingBox!==null&&mn.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,mn)))}_computeIntersections(t,e,n){let i;const r=this.geometry,a=this.material,o=r.index,l=r.attributes.position,c=r.attributes.uv,d=r.attributes.uv1,h=r.attributes.normal,f=r.groups,m=r.drawRange;if(o!==null)if(Array.isArray(a))for(let g=0,v=f.length;g<v;g++){const p=f[g],u=a[p.materialIndex],E=Math.max(p.start,m.start),x=Math.min(o.count,Math.min(p.start+p.count,m.start+m.count));for(let A=E,b=x;A<b;A+=3){const w=o.getX(A),L=o.getX(A+1),k=o.getX(A+2);i=Ni(this,u,t,n,c,d,h,w,L,k),i&&(i.faceIndex=Math.floor(A/3),i.face.materialIndex=p.materialIndex,e.push(i))}}else{const g=Math.max(0,m.start),v=Math.min(o.count,m.start+m.count);for(let p=g,u=v;p<u;p+=3){const E=o.getX(p),x=o.getX(p+1),A=o.getX(p+2);i=Ni(this,a,t,n,c,d,h,E,x,A),i&&(i.faceIndex=Math.floor(p/3),e.push(i))}}else if(l!==void 0)if(Array.isArray(a))for(let g=0,v=f.length;g<v;g++){const p=f[g],u=a[p.materialIndex],E=Math.max(p.start,m.start),x=Math.min(l.count,Math.min(p.start+p.count,m.start+m.count));for(let A=E,b=x;A<b;A+=3){const w=A,L=A+1,k=A+2;i=Ni(this,u,t,n,c,d,h,w,L,k),i&&(i.faceIndex=Math.floor(A/3),i.face.materialIndex=p.materialIndex,e.push(i))}}else{const g=Math.max(0,m.start),v=Math.min(l.count,m.start+m.count);for(let p=g,u=v;p<u;p+=3){const E=p,x=p+1,A=p+2;i=Ni(this,a,t,n,c,d,h,E,x,A),i&&(i.faceIndex=Math.floor(p/3),e.push(i))}}}}function dc(s,t,e,n,i,r,a,o){let l;if(t.side===Se?l=n.intersectTriangle(a,r,i,!0,o):l=n.intersectTriangle(i,r,a,t.side===dn,o),l===null)return null;Ui.copy(o),Ui.applyMatrix4(s.matrixWorld);const c=e.ray.origin.distanceTo(Ui);return c<e.near||c>e.far?null:{distance:c,point:Ui.clone(),object:s}}function Ni(s,t,e,n,i,r,a,o,l,c){s.getVertexPosition(o,Fn),s.getVertexPosition(l,On),s.getVertexPosition(c,Bn);const d=dc(s,t,e,n,Fn,On,Bn,Di);if(d){i&&(Li.fromBufferAttribute(i,o),Pi.fromBufferAttribute(i,l),Ii.fromBufferAttribute(i,c),d.uv=Ne.getInterpolation(Di,Fn,On,Bn,Li,Pi,Ii,new kt)),r&&(Li.fromBufferAttribute(r,o),Pi.fromBufferAttribute(r,l),Ii.fromBufferAttribute(r,c),d.uv1=Ne.getInterpolation(Di,Fn,On,Bn,Li,Pi,Ii,new kt),d.uv2=d.uv1),a&&(da.fromBufferAttribute(a,o),ua.fromBufferAttribute(a,l),ha.fromBufferAttribute(a,c),d.normal=Ne.getInterpolation(Di,Fn,On,Bn,da,ua,ha,new P),d.normal.dot(n.direction)>0&&d.normal.multiplyScalar(-1));const h={a:o,b:l,c,normal:new P,materialIndex:0};Ne.getNormal(Fn,On,Bn,h.normal),d.face=h}return d}class pi extends Be{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const o=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const l=[],c=[],d=[],h=[];let f=0,m=0;g("z","y","x",-1,-1,n,e,t,a,r,0),g("z","y","x",1,-1,n,e,-t,a,r,1),g("x","z","y",1,1,t,n,e,i,a,2),g("x","z","y",1,-1,t,n,-e,i,a,3),g("x","y","z",1,-1,t,e,n,i,r,4),g("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(l),this.setAttribute("position",new pe(c,3)),this.setAttribute("normal",new pe(d,3)),this.setAttribute("uv",new pe(h,2));function g(v,p,u,E,x,A,b,w,L,k,y){const T=A/L,H=b/k,X=A/2,J=b/2,R=w/2,B=L+1,$=k+1;let G=0,nt=0;const W=new P;for(let Y=0;Y<$;Y++){const Q=Y*H-J;for(let ut=0;ut<B;ut++){const V=ut*T-X;W[v]=V*E,W[p]=Q*x,W[u]=R,c.push(W.x,W.y,W.z),W[v]=0,W[p]=0,W[u]=w>0?1:-1,d.push(W.x,W.y,W.z),h.push(ut/L),h.push(1-Y/k),G+=1}}for(let Y=0;Y<k;Y++)for(let Q=0;Q<L;Q++){const ut=f+Q+B*Y,V=f+Q+B*(Y+1),q=f+(Q+1)+B*(Y+1),at=f+(Q+1)+B*Y;l.push(ut,V,at),l.push(V,q,at),nt+=6}o.addGroup(m,nt,y),m+=nt,f+=G}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new pi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Yn(s){const t={};for(const e in s){t[e]={};for(const n in s[e]){const i=s[e][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=i.clone():Array.isArray(i)?t[e][n]=i.slice():t[e][n]=i}}return t}function _e(s){const t={};for(let e=0;e<s.length;e++){const n=Yn(s[e]);for(const i in n)t[i]=n[i]}return t}function uc(s){const t=[];for(let e=0;e<s.length;e++)t.push(s[e].clone());return t}function ho(s){return s.getRenderTarget()===null?s.outputColorSpace:Xt.workingColorSpace}const hc={clone:Yn,merge:_e};var fc="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",pc="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class Tn extends Zn{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=fc,this.fragmentShader=pc,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Yn(t.uniforms),this.uniformsGroups=uc(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const i in this.uniforms){const a=this.uniforms[i].value;a&&a.isTexture?e.uniforms[i]={type:"t",value:a.toJSON(t).uuid}:a&&a.isColor?e.uniforms[i]={type:"c",value:a.getHex()}:a&&a.isVector2?e.uniforms[i]={type:"v2",value:a.toArray()}:a&&a.isVector3?e.uniforms[i]={type:"v3",value:a.toArray()}:a&&a.isVector4?e.uniforms[i]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?e.uniforms[i]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?e.uniforms[i]={type:"m4",value:a.toArray()}:e.uniforms[i]={value:a}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class fo extends ce{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Qt,this.projectionMatrix=new Qt,this.projectionMatrixInverse=new Qt,this.coordinateSystem=Ke}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class Ae extends fo{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=$s*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(cs*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return $s*2*Math.atan(Math.tan(cs*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(cs*.5*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,c=a.fullHeight;r+=a.offsetX*i/l,e-=a.offsetY*n/c,i*=a.width/l,n*=a.height/c}const o=this.filmOffset;o!==0&&(r+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const Vn=-90,zn=1;class mc extends ce{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Ae(Vn,zn,t,e);i.layers=this.layers,this.add(i);const r=new Ae(Vn,zn,t,e);r.layers=this.layers,this.add(r);const a=new Ae(Vn,zn,t,e);a.layers=this.layers,this.add(a);const o=new Ae(Vn,zn,t,e);o.layers=this.layers,this.add(o);const l=new Ae(Vn,zn,t,e);l.layers=this.layers,this.add(l);const c=new Ae(Vn,zn,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,r,a,o,l]=e;for(const c of e)this.remove(c);if(t===Ke)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===$i)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,a,o,l,c,d]=this.children,h=t.getRenderTarget(),f=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),g=t.xr.enabled;t.xr.enabled=!1;const v=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,r),t.setRenderTarget(n,1,i),t.render(e,a),t.setRenderTarget(n,2,i),t.render(e,o),t.setRenderTarget(n,3,i),t.render(e,l),t.setRenderTarget(n,4,i),t.render(e,c),n.texture.generateMipmaps=v,t.setRenderTarget(n,5,i),t.render(e,d),t.setRenderTarget(h,f,m),t.xr.enabled=g,n.texture.needsPMREMUpdate=!0}}class po extends we{constructor(t,e,n,i,r,a,o,l,c,d){t=t!==void 0?t:[],e=e!==void 0?e:Xn,super(t,e,n,i,r,a,o,l,c,d),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class gc extends bn{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];e.encoding!==void 0&&(li("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),e.colorSpace=e.encoding===En?le:Pe),this.texture=new po(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Le}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n				varying vec3 vWorldDirection;\n\n				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n				}\n\n				void main() {\n\n					vWorldDirection = transformDirection( position, modelMatrix );\n\n					#include <begin_vertex>\n					#include <project_vertex>\n\n				}\n			",fragmentShader:"\n\n				uniform sampler2D tEquirect;\n\n				varying vec3 vWorldDirection;\n\n				#include <common>\n\n				void main() {\n\n					vec3 direction = normalize( vWorldDirection );\n\n					vec2 sampleUV = equirectUv( direction );\n\n					gl_FragColor = texture2D( tEquirect, sampleUV );\n\n				}\n			"},i=new pi(5,5,5),r=new Tn({name:"CubemapFromEquirect",uniforms:Yn(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Se,blending:on});r.uniforms.tEquirect.value=e;const a=new Ze(i,r),o=e.minFilter;return e.minFilter===ci&&(e.minFilter=Le),new mc(1,10,this).update(t,a),e.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let a=0;a<6;a++)t.setRenderTarget(this,a),t.clear(e,n,i);t.setRenderTarget(r)}}const ws=new P,vc=new P,_c=new Ft;class vn{constructor(t=new P(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=ws.subVectors(n,e).cross(vc.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(ws),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||_c.getNormalMatrix(t),i=this.coplanarPoint(ws).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const gn=new Ki,Fi=new P;class nr{constructor(t=new vn,e=new vn,n=new vn,i=new vn,r=new vn,a=new vn){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=Ke){const n=this.planes,i=t.elements,r=i[0],a=i[1],o=i[2],l=i[3],c=i[4],d=i[5],h=i[6],f=i[7],m=i[8],g=i[9],v=i[10],p=i[11],u=i[12],E=i[13],x=i[14],A=i[15];if(n[0].setComponents(l-r,f-c,p-m,A-u).normalize(),n[1].setComponents(l+r,f+c,p+m,A+u).normalize(),n[2].setComponents(l+a,f+d,p+g,A+E).normalize(),n[3].setComponents(l-a,f-d,p-g,A-E).normalize(),n[4].setComponents(l-o,f-h,p-v,A-x).normalize(),e===Ke)n[5].setComponents(l+o,f+h,p+v,A+x).normalize();else if(e===$i)n[5].setComponents(o,h,v,x).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),gn.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),gn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(gn)}intersectsSprite(t){return gn.center.set(0,0,0),gn.radius=.7071067811865476,gn.applyMatrix4(t.matrixWorld),this.intersectsSphere(gn)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let r=0;r<6;r++)if(e[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Fi.x=i.normal.x>0?t.max.x:t.min.x,Fi.y=i.normal.y>0?t.max.y:t.min.y,Fi.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Fi)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function mo(){let s=null,t=!1,e=null,n=null;function i(r,a){e(r,a),n=s.requestAnimationFrame(i)}return{start:function(){t!==!0&&e!==null&&(n=s.requestAnimationFrame(i),t=!0)},stop:function(){s.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(r){e=r},setContext:function(r){s=r}}}function xc(s,t){const e=t.isWebGL2,n=new WeakMap;function i(c,d){const h=c.array,f=c.usage,m=h.byteLength,g=s.createBuffer();s.bindBuffer(d,g),s.bufferData(d,h,f),c.onUploadCallback();let v;if(h instanceof Float32Array)v=s.FLOAT;else if(h instanceof Uint16Array)if(c.isFloat16BufferAttribute)if(e)v=s.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else v=s.UNSIGNED_SHORT;else if(h instanceof Int16Array)v=s.SHORT;else if(h instanceof Uint32Array)v=s.UNSIGNED_INT;else if(h instanceof Int32Array)v=s.INT;else if(h instanceof Int8Array)v=s.BYTE;else if(h instanceof Uint8Array)v=s.UNSIGNED_BYTE;else if(h instanceof Uint8ClampedArray)v=s.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+h);return{buffer:g,type:v,bytesPerElement:h.BYTES_PER_ELEMENT,version:c.version,size:m}}function r(c,d,h){const f=d.array,m=d._updateRange,g=d.updateRanges;if(s.bindBuffer(h,c),m.count===-1&&g.length===0&&s.bufferSubData(h,0,f),g.length!==0){for(let v=0,p=g.length;v<p;v++){const u=g[v];e?s.bufferSubData(h,u.start*f.BYTES_PER_ELEMENT,f,u.start,u.count):s.bufferSubData(h,u.start*f.BYTES_PER_ELEMENT,f.subarray(u.start,u.start+u.count))}d.clearUpdateRanges()}m.count!==-1&&(e?s.bufferSubData(h,m.offset*f.BYTES_PER_ELEMENT,f,m.offset,m.count):s.bufferSubData(h,m.offset*f.BYTES_PER_ELEMENT,f.subarray(m.offset,m.offset+m.count)),m.count=-1),d.onUploadCallback()}function a(c){return c.isInterleavedBufferAttribute&&(c=c.data),n.get(c)}function o(c){c.isInterleavedBufferAttribute&&(c=c.data);const d=n.get(c);d&&(s.deleteBuffer(d.buffer),n.delete(c))}function l(c,d){if(c.isGLBufferAttribute){const f=n.get(c);(!f||f.version<c.version)&&n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const h=n.get(c);if(h===void 0)n.set(c,i(c,d));else if(h.version<c.version){if(h.size!==c.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");r(h.buffer,c,d),h.version=c.version}}return{get:a,remove:o,update:l}}class ir extends Be{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,a=e/2,o=Math.floor(n),l=Math.floor(i),c=o+1,d=l+1,h=t/o,f=e/l,m=[],g=[],v=[],p=[];for(let u=0;u<d;u++){const E=u*f-a;for(let x=0;x<c;x++){const A=x*h-r;g.push(A,-E,0),v.push(0,0,1),p.push(x/o),p.push(1-u/l)}}for(let u=0;u<l;u++)for(let E=0;E<o;E++){const x=E+c*u,A=E+c*(u+1),b=E+1+c*(u+1),w=E+1+c*u;m.push(x,A,w),m.push(A,b,w)}this.setIndex(m),this.setAttribute("position",new pe(g,3)),this.setAttribute("normal",new pe(v,3)),this.setAttribute("uv",new pe(p,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ir(t.width,t.height,t.widthSegments,t.heightSegments)}}var yc="#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",Mc="#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif",Sc="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",Ec="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",bc="#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif",Tc="#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif",Ac="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif",wc="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",Cc="#ifdef USE_BATCHING\n	attribute float batchId;\n	uniform highp sampler2D batchingTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif",Rc="#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",Lc="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif",Pc="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif",Ic="float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated",Dc="#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif",Uc="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif",Nc="#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif",Fc="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",Oc="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif",Bc="#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif",Vc="#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif",zc="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif",kc="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif",Hc="#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif",Gc="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",Wc="#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif",Xc="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif",$c="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif",qc="#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",Yc="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif",jc="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif",Kc="gl_FragColor = linearToOutputTexel( gl_FragColor );",Zc="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}",Jc="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif",Qc="#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif",td="#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif",ed="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif",nd="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif",id="#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif",sd="#ifdef USE_FOG\n	varying float vFogDepth;\n#endif",rd="#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",ad="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",od="#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}",ld="#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",cd="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",dd="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",ud="varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert",hd="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif",fd="#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif",pd="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",md="varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon",gd="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",vd="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong",_d="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",xd="struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",yd="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif",Md="#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif",Sd="#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",Ed="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",bd="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif",Td="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif",Ad="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif",wd="#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif",Cd="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif",Rd="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",Ld="#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",Pd="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif",Id="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",Dd="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif",Ud="#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif",Nd="#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif",Fd="#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif",Od="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;",Bd="#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",Vd="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",zd="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",kd="#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif",Hd="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif",Gd="#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif",Wd="#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",Xd="#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif",$d="#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif",qd="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",Yd="vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}",jd="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif",Kd="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",Zd="#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",Jd="#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif",Qd="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif",tu="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",eu="#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif",nu="#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif",iu="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif",su="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}",ru="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",au="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif",ou="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",lu="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif",cu="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",du="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",uu="#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",hu="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",fu="#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",pu="#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif",mu="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",gu="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif",vu="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",_u="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";const xu="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}",yu="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",Mu="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",Su="#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",Eu="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",bu="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",Tu="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}",Au="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}",wu="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}",Cu="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}",Ru="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}",Lu="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}",Pu="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",Iu="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",Du="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}",Uu="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",Nu="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",Fu="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",Ou="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}",Bu="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",Vu="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}",zu="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}",ku="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",Hu="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",Gu="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}",Wu="#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",Xu="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",$u="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",qu="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}",Yu="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",ju="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",Ku="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}",Zu="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",Ju="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}",Pt={alphahash_fragment:yc,alphahash_pars_fragment:Mc,alphamap_fragment:Sc,alphamap_pars_fragment:Ec,alphatest_fragment:bc,alphatest_pars_fragment:Tc,aomap_fragment:Ac,aomap_pars_fragment:wc,batching_pars_vertex:Cc,batching_vertex:Rc,begin_vertex:Lc,beginnormal_vertex:Pc,bsdfs:Ic,iridescence_fragment:Dc,bumpmap_pars_fragment:Uc,clipping_planes_fragment:Nc,clipping_planes_pars_fragment:Fc,clipping_planes_pars_vertex:Oc,clipping_planes_vertex:Bc,color_fragment:Vc,color_pars_fragment:zc,color_pars_vertex:kc,color_vertex:Hc,common:Gc,cube_uv_reflection_fragment:Wc,defaultnormal_vertex:Xc,displacementmap_pars_vertex:$c,displacementmap_vertex:qc,emissivemap_fragment:Yc,emissivemap_pars_fragment:jc,colorspace_fragment:Kc,colorspace_pars_fragment:Zc,envmap_fragment:Jc,envmap_common_pars_fragment:Qc,envmap_pars_fragment:td,envmap_pars_vertex:ed,envmap_physical_pars_fragment:fd,envmap_vertex:nd,fog_vertex:id,fog_pars_vertex:sd,fog_fragment:rd,fog_pars_fragment:ad,gradientmap_pars_fragment:od,lightmap_fragment:ld,lightmap_pars_fragment:cd,lights_lambert_fragment:dd,lights_lambert_pars_fragment:ud,lights_pars_begin:hd,lights_toon_fragment:pd,lights_toon_pars_fragment:md,lights_phong_fragment:gd,lights_phong_pars_fragment:vd,lights_physical_fragment:_d,lights_physical_pars_fragment:xd,lights_fragment_begin:yd,lights_fragment_maps:Md,lights_fragment_end:Sd,logdepthbuf_fragment:Ed,logdepthbuf_pars_fragment:bd,logdepthbuf_pars_vertex:Td,logdepthbuf_vertex:Ad,map_fragment:wd,map_pars_fragment:Cd,map_particle_fragment:Rd,map_particle_pars_fragment:Ld,metalnessmap_fragment:Pd,metalnessmap_pars_fragment:Id,morphcolor_vertex:Dd,morphnormal_vertex:Ud,morphtarget_pars_vertex:Nd,morphtarget_vertex:Fd,normal_fragment_begin:Od,normal_fragment_maps:Bd,normal_pars_fragment:Vd,normal_pars_vertex:zd,normal_vertex:kd,normalmap_pars_fragment:Hd,clearcoat_normal_fragment_begin:Gd,clearcoat_normal_fragment_maps:Wd,clearcoat_pars_fragment:Xd,iridescence_pars_fragment:$d,opaque_fragment:qd,packing:Yd,premultiplied_alpha_fragment:jd,project_vertex:Kd,dithering_fragment:Zd,dithering_pars_fragment:Jd,roughnessmap_fragment:Qd,roughnessmap_pars_fragment:tu,shadowmap_pars_fragment:eu,shadowmap_pars_vertex:nu,shadowmap_vertex:iu,shadowmask_pars_fragment:su,skinbase_vertex:ru,skinning_pars_vertex:au,skinning_vertex:ou,skinnormal_vertex:lu,specularmap_fragment:cu,specularmap_pars_fragment:du,tonemapping_fragment:uu,tonemapping_pars_fragment:hu,transmission_fragment:fu,transmission_pars_fragment:pu,uv_pars_fragment:mu,uv_pars_vertex:gu,uv_vertex:vu,worldpos_vertex:_u,background_vert:xu,background_frag:yu,backgroundCube_vert:Mu,backgroundCube_frag:Su,cube_vert:Eu,cube_frag:bu,depth_vert:Tu,depth_frag:Au,distanceRGBA_vert:wu,distanceRGBA_frag:Cu,equirect_vert:Ru,equirect_frag:Lu,linedashed_vert:Pu,linedashed_frag:Iu,meshbasic_vert:Du,meshbasic_frag:Uu,meshlambert_vert:Nu,meshlambert_frag:Fu,meshmatcap_vert:Ou,meshmatcap_frag:Bu,meshnormal_vert:Vu,meshnormal_frag:zu,meshphong_vert:ku,meshphong_frag:Hu,meshphysical_vert:Gu,meshphysical_frag:Wu,meshtoon_vert:Xu,meshtoon_frag:$u,points_vert:qu,points_frag:Yu,shadow_vert:ju,shadow_frag:Ku,sprite_vert:Zu,sprite_frag:Ju},rt={common:{diffuse:{value:new Ot(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Ft},alphaMap:{value:null},alphaMapTransform:{value:new Ft},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Ft}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Ft}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Ft}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Ft},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Ft},normalScale:{value:new kt(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Ft},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Ft}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Ft}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Ft}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ot(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ot(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Ft},alphaTest:{value:0},uvTransform:{value:new Ft}},sprite:{diffuse:{value:new Ot(16777215)},opacity:{value:1},center:{value:new kt(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Ft},alphaMap:{value:null},alphaMapTransform:{value:new Ft},alphaTest:{value:0}}},ze={basic:{uniforms:_e([rt.common,rt.specularmap,rt.envmap,rt.aomap,rt.lightmap,rt.fog]),vertexShader:Pt.meshbasic_vert,fragmentShader:Pt.meshbasic_frag},lambert:{uniforms:_e([rt.common,rt.specularmap,rt.envmap,rt.aomap,rt.lightmap,rt.emissivemap,rt.bumpmap,rt.normalmap,rt.displacementmap,rt.fog,rt.lights,{emissive:{value:new Ot(0)}}]),vertexShader:Pt.meshlambert_vert,fragmentShader:Pt.meshlambert_frag},phong:{uniforms:_e([rt.common,rt.specularmap,rt.envmap,rt.aomap,rt.lightmap,rt.emissivemap,rt.bumpmap,rt.normalmap,rt.displacementmap,rt.fog,rt.lights,{emissive:{value:new Ot(0)},specular:{value:new Ot(1118481)},shininess:{value:30}}]),vertexShader:Pt.meshphong_vert,fragmentShader:Pt.meshphong_frag},standard:{uniforms:_e([rt.common,rt.envmap,rt.aomap,rt.lightmap,rt.emissivemap,rt.bumpmap,rt.normalmap,rt.displacementmap,rt.roughnessmap,rt.metalnessmap,rt.fog,rt.lights,{emissive:{value:new Ot(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Pt.meshphysical_vert,fragmentShader:Pt.meshphysical_frag},toon:{uniforms:_e([rt.common,rt.aomap,rt.lightmap,rt.emissivemap,rt.bumpmap,rt.normalmap,rt.displacementmap,rt.gradientmap,rt.fog,rt.lights,{emissive:{value:new Ot(0)}}]),vertexShader:Pt.meshtoon_vert,fragmentShader:Pt.meshtoon_frag},matcap:{uniforms:_e([rt.common,rt.bumpmap,rt.normalmap,rt.displacementmap,rt.fog,{matcap:{value:null}}]),vertexShader:Pt.meshmatcap_vert,fragmentShader:Pt.meshmatcap_frag},points:{uniforms:_e([rt.points,rt.fog]),vertexShader:Pt.points_vert,fragmentShader:Pt.points_frag},dashed:{uniforms:_e([rt.common,rt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Pt.linedashed_vert,fragmentShader:Pt.linedashed_frag},depth:{uniforms:_e([rt.common,rt.displacementmap]),vertexShader:Pt.depth_vert,fragmentShader:Pt.depth_frag},normal:{uniforms:_e([rt.common,rt.bumpmap,rt.normalmap,rt.displacementmap,{opacity:{value:1}}]),vertexShader:Pt.meshnormal_vert,fragmentShader:Pt.meshnormal_frag},sprite:{uniforms:_e([rt.sprite,rt.fog]),vertexShader:Pt.sprite_vert,fragmentShader:Pt.sprite_frag},background:{uniforms:{uvTransform:{value:new Ft},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Pt.background_vert,fragmentShader:Pt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Pt.backgroundCube_vert,fragmentShader:Pt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Pt.cube_vert,fragmentShader:Pt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Pt.equirect_vert,fragmentShader:Pt.equirect_frag},distanceRGBA:{uniforms:_e([rt.common,rt.displacementmap,{referencePosition:{value:new P},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Pt.distanceRGBA_vert,fragmentShader:Pt.distanceRGBA_frag},shadow:{uniforms:_e([rt.lights,rt.fog,{color:{value:new Ot(0)},opacity:{value:1}}]),vertexShader:Pt.shadow_vert,fragmentShader:Pt.shadow_frag}};ze.physical={uniforms:_e([ze.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Ft},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Ft},clearcoatNormalScale:{value:new kt(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Ft},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Ft},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Ft},sheen:{value:0},sheenColor:{value:new Ot(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Ft},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Ft},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Ft},transmissionSamplerSize:{value:new kt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Ft},attenuationDistance:{value:0},attenuationColor:{value:new Ot(0)},specularColor:{value:new Ot(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Ft},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Ft},anisotropyVector:{value:new kt},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Ft}}]),vertexShader:Pt.meshphysical_vert,fragmentShader:Pt.meshphysical_frag};const Oi={r:0,b:0,g:0};function Qu(s,t,e,n,i,r,a){const o=new Ot(0);let l=r===!0?0:1,c,d,h=null,f=0,m=null;function g(p,u){let E=!1,x=u.isScene===!0?u.background:null;x&&x.isTexture&&(x=(u.backgroundBlurriness>0?e:t).get(x)),x===null?v(o,l):x&&x.isColor&&(v(x,1),E=!0);const A=s.xr.getEnvironmentBlendMode();A==="additive"?n.buffers.color.setClear(0,0,0,1,a):A==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(s.autoClear||E)&&s.clear(s.autoClearColor,s.autoClearDepth,s.autoClearStencil),x&&(x.isCubeTexture||x.mapping===Yi)?(d===void 0&&(d=new Ze(new pi(1,1,1),new Tn({name:"BackgroundCubeMaterial",uniforms:Yn(ze.backgroundCube.uniforms),vertexShader:ze.backgroundCube.vertexShader,fragmentShader:ze.backgroundCube.fragmentShader,side:Se,depthTest:!1,depthWrite:!1,fog:!1})),d.geometry.deleteAttribute("normal"),d.geometry.deleteAttribute("uv"),d.onBeforeRender=function(b,w,L){this.matrixWorld.copyPosition(L.matrixWorld)},Object.defineProperty(d.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(d)),d.material.uniforms.envMap.value=x,d.material.uniforms.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,d.material.uniforms.backgroundBlurriness.value=u.backgroundBlurriness,d.material.uniforms.backgroundIntensity.value=u.backgroundIntensity,d.material.toneMapped=Xt.getTransfer(x.colorSpace)!==qt,(h!==x||f!==x.version||m!==s.toneMapping)&&(d.material.needsUpdate=!0,h=x,f=x.version,m=s.toneMapping),d.layers.enableAll(),p.unshift(d,d.geometry,d.material,0,0,null)):x&&x.isTexture&&(c===void 0&&(c=new Ze(new ir(2,2),new Tn({name:"BackgroundMaterial",uniforms:Yn(ze.background.uniforms),vertexShader:ze.background.vertexShader,fragmentShader:ze.background.fragmentShader,side:dn,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=x,c.material.uniforms.backgroundIntensity.value=u.backgroundIntensity,c.material.toneMapped=Xt.getTransfer(x.colorSpace)!==qt,x.matrixAutoUpdate===!0&&x.updateMatrix(),c.material.uniforms.uvTransform.value.copy(x.matrix),(h!==x||f!==x.version||m!==s.toneMapping)&&(c.material.needsUpdate=!0,h=x,f=x.version,m=s.toneMapping),c.layers.enableAll(),p.unshift(c,c.geometry,c.material,0,0,null))}function v(p,u){p.getRGB(Oi,ho(s)),n.buffers.color.setClear(Oi.r,Oi.g,Oi.b,u,a)}return{getClearColor:function(){return o},setClearColor:function(p,u=1){o.set(p),l=u,v(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(p){l=p,v(o,l)},render:g}}function th(s,t,e,n){const i=s.getParameter(s.MAX_VERTEX_ATTRIBS),r=n.isWebGL2?null:t.get("OES_vertex_array_object"),a=n.isWebGL2||r!==null,o={},l=p(null);let c=l,d=!1;function h(R,B,$,G,nt){let W=!1;if(a){const Y=v(G,$,B);c!==Y&&(c=Y,m(c.object)),W=u(R,G,$,nt),W&&E(R,G,$,nt)}else{const Y=B.wireframe===!0;(c.geometry!==G.id||c.program!==$.id||c.wireframe!==Y)&&(c.geometry=G.id,c.program=$.id,c.wireframe=Y,W=!0)}nt!==null&&e.update(nt,s.ELEMENT_ARRAY_BUFFER),(W||d)&&(d=!1,k(R,B,$,G),nt!==null&&s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e.get(nt).buffer))}function f(){return n.isWebGL2?s.createVertexArray():r.createVertexArrayOES()}function m(R){return n.isWebGL2?s.bindVertexArray(R):r.bindVertexArrayOES(R)}function g(R){return n.isWebGL2?s.deleteVertexArray(R):r.deleteVertexArrayOES(R)}function v(R,B,$){const G=$.wireframe===!0;let nt=o[R.id];nt===void 0&&(nt={},o[R.id]=nt);let W=nt[B.id];W===void 0&&(W={},nt[B.id]=W);let Y=W[G];return Y===void 0&&(Y=p(f()),W[G]=Y),Y}function p(R){const B=[],$=[],G=[];for(let nt=0;nt<i;nt++)B[nt]=0,$[nt]=0,G[nt]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:B,enabledAttributes:$,attributeDivisors:G,object:R,attributes:{},index:null}}function u(R,B,$,G){const nt=c.attributes,W=B.attributes;let Y=0;const Q=$.getAttributes();for(const ut in Q)if(Q[ut].location>=0){const q=nt[ut];let at=W[ut];if(at===void 0&&(ut==="instanceMatrix"&&R.instanceMatrix&&(at=R.instanceMatrix),ut==="instanceColor"&&R.instanceColor&&(at=R.instanceColor)),q===void 0||q.attribute!==at||at&&q.data!==at.data)return!0;Y++}return c.attributesNum!==Y||c.index!==G}function E(R,B,$,G){const nt={},W=B.attributes;let Y=0;const Q=$.getAttributes();for(const ut in Q)if(Q[ut].location>=0){let q=W[ut];q===void 0&&(ut==="instanceMatrix"&&R.instanceMatrix&&(q=R.instanceMatrix),ut==="instanceColor"&&R.instanceColor&&(q=R.instanceColor));const at={};at.attribute=q,q&&q.data&&(at.data=q.data),nt[ut]=at,Y++}c.attributes=nt,c.attributesNum=Y,c.index=G}function x(){const R=c.newAttributes;for(let B=0,$=R.length;B<$;B++)R[B]=0}function A(R){b(R,0)}function b(R,B){const $=c.newAttributes,G=c.enabledAttributes,nt=c.attributeDivisors;$[R]=1,G[R]===0&&(s.enableVertexAttribArray(R),G[R]=1),nt[R]!==B&&((n.isWebGL2?s:t.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](R,B),nt[R]=B)}function w(){const R=c.newAttributes,B=c.enabledAttributes;for(let $=0,G=B.length;$<G;$++)B[$]!==R[$]&&(s.disableVertexAttribArray($),B[$]=0)}function L(R,B,$,G,nt,W,Y){Y===!0?s.vertexAttribIPointer(R,B,$,nt,W):s.vertexAttribPointer(R,B,$,G,nt,W)}function k(R,B,$,G){if(n.isWebGL2===!1&&(R.isInstancedMesh||G.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;x();const nt=G.attributes,W=$.getAttributes(),Y=B.defaultAttributeValues;for(const Q in W){const ut=W[Q];if(ut.location>=0){let V=nt[Q];if(V===void 0&&(Q==="instanceMatrix"&&R.instanceMatrix&&(V=R.instanceMatrix),Q==="instanceColor"&&R.instanceColor&&(V=R.instanceColor)),V!==void 0){const q=V.normalized,at=V.itemSize,pt=e.get(V);if(pt===void 0)continue;const mt=pt.buffer,Lt=pt.type,Tt=pt.bytesPerElement,bt=n.isWebGL2===!0&&(Lt===s.INT||Lt===s.UNSIGNED_INT||V.gpuType===qa);if(V.isInterleavedBufferAttribute){const It=V.data,D=It.stride,me=V.offset;if(It.isInstancedInterleavedBuffer){for(let gt=0;gt<ut.locationSize;gt++)b(ut.location+gt,It.meshPerAttribute);R.isInstancedMesh!==!0&&G._maxInstanceCount===void 0&&(G._maxInstanceCount=It.meshPerAttribute*It.count)}else for(let gt=0;gt<ut.locationSize;gt++)A(ut.location+gt);s.bindBuffer(s.ARRAY_BUFFER,mt);for(let gt=0;gt<ut.locationSize;gt++)L(ut.location+gt,at/ut.locationSize,Lt,q,D*Tt,(me+at/ut.locationSize*gt)*Tt,bt)}else{if(V.isInstancedBufferAttribute){for(let It=0;It<ut.locationSize;It++)b(ut.location+It,V.meshPerAttribute);R.isInstancedMesh!==!0&&G._maxInstanceCount===void 0&&(G._maxInstanceCount=V.meshPerAttribute*V.count)}else for(let It=0;It<ut.locationSize;It++)A(ut.location+It);s.bindBuffer(s.ARRAY_BUFFER,mt);for(let It=0;It<ut.locationSize;It++)L(ut.location+It,at/ut.locationSize,Lt,q,at*Tt,at/ut.locationSize*It*Tt,bt)}}else if(Y!==void 0){const q=Y[Q];if(q!==void 0)switch(q.length){case 2:s.vertexAttrib2fv(ut.location,q);break;case 3:s.vertexAttrib3fv(ut.location,q);break;case 4:s.vertexAttrib4fv(ut.location,q);break;default:s.vertexAttrib1fv(ut.location,q)}}}}w()}function y(){X();for(const R in o){const B=o[R];for(const $ in B){const G=B[$];for(const nt in G)g(G[nt].object),delete G[nt];delete B[$]}delete o[R]}}function T(R){if(o[R.id]===void 0)return;const B=o[R.id];for(const $ in B){const G=B[$];for(const nt in G)g(G[nt].object),delete G[nt];delete B[$]}delete o[R.id]}function H(R){for(const B in o){const $=o[B];if($[R.id]===void 0)continue;const G=$[R.id];for(const nt in G)g(G[nt].object),delete G[nt];delete $[R.id]}}function X(){J(),d=!0,c!==l&&(c=l,m(c.object))}function J(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:h,reset:X,resetDefaultState:J,dispose:y,releaseStatesOfGeometry:T,releaseStatesOfProgram:H,initAttributes:x,enableAttribute:A,disableUnusedAttributes:w}}function eh(s,t,e,n){const i=n.isWebGL2;let r;function a(d){r=d}function o(d,h){s.drawArrays(r,d,h),e.update(h,r,1)}function l(d,h,f){if(f===0)return;let m,g;if(i)m=s,g="drawArraysInstanced";else if(m=t.get("ANGLE_instanced_arrays"),g="drawArraysInstancedANGLE",m===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}m[g](r,d,h,f),e.update(h,r,f)}function c(d,h,f){if(f===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let g=0;g<f;g++)this.render(d[g],h[g]);else{m.multiDrawArraysWEBGL(r,d,0,h,0,f);let g=0;for(let v=0;v<f;v++)g+=h[v];e.update(g,r,1)}}this.setMode=a,this.render=o,this.renderInstances=l,this.renderMultiDraw=c}function nh(s,t,e){let n;function i(){if(n!==void 0)return n;if(t.has("EXT_texture_filter_anisotropic")===!0){const L=t.get("EXT_texture_filter_anisotropic");n=s.getParameter(L.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function r(L){if(L==="highp"){if(s.getShaderPrecisionFormat(s.VERTEX_SHADER,s.HIGH_FLOAT).precision>0&&s.getShaderPrecisionFormat(s.FRAGMENT_SHADER,s.HIGH_FLOAT).precision>0)return"highp";L="mediump"}return L==="mediump"&&s.getShaderPrecisionFormat(s.VERTEX_SHADER,s.MEDIUM_FLOAT).precision>0&&s.getShaderPrecisionFormat(s.FRAGMENT_SHADER,s.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const a=typeof WebGL2RenderingContext<"u"&&s.constructor.name==="WebGL2RenderingContext";let o=e.precision!==void 0?e.precision:"highp";const l=r(o);l!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",l,"instead."),o=l);const c=a||t.has("WEBGL_draw_buffers"),d=e.logarithmicDepthBuffer===!0,h=s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS),f=s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS),m=s.getParameter(s.MAX_TEXTURE_SIZE),g=s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE),v=s.getParameter(s.MAX_VERTEX_ATTRIBS),p=s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS),u=s.getParameter(s.MAX_VARYING_VECTORS),E=s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS),x=f>0,A=a||t.has("OES_texture_float"),b=x&&A,w=a?s.getParameter(s.MAX_SAMPLES):0;return{isWebGL2:a,drawBuffers:c,getMaxAnisotropy:i,getMaxPrecision:r,precision:o,logarithmicDepthBuffer:d,maxTextures:h,maxVertexTextures:f,maxTextureSize:m,maxCubemapSize:g,maxAttributes:v,maxVertexUniforms:p,maxVaryings:u,maxFragmentUniforms:E,vertexTextures:x,floatFragmentTextures:A,floatVertexTextures:b,maxSamples:w}}function ih(s){const t=this;let e=null,n=0,i=!1,r=!1;const a=new vn,o=new Ft,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(h,f){const m=h.length!==0||f||n!==0||i;return i=f,n=h.length,m},this.beginShadows=function(){r=!0,d(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(h,f){e=d(h,f,0)},this.setState=function(h,f,m){const g=h.clippingPlanes,v=h.clipIntersection,p=h.clipShadows,u=s.get(h);if(!i||g===null||g.length===0||r&&!p)r?d(null):c();else{const E=r?0:n,x=E*4;let A=u.clippingState||null;l.value=A,A=d(g,f,x,m);for(let b=0;b!==x;++b)A[b]=e[b];u.clippingState=A,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=E}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function d(h,f,m,g){const v=h!==null?h.length:0;let p=null;if(v!==0){if(p=l.value,g!==!0||p===null){const u=m+v*4,E=f.matrixWorldInverse;o.getNormalMatrix(E),(p===null||p.length<u)&&(p=new Float32Array(u));for(let x=0,A=m;x!==v;++x,A+=4)a.copy(h[x]).applyMatrix4(E,o),a.normal.toArray(p,A),p[A+3]=a.constant}l.value=p,l.needsUpdate=!0}return t.numPlanes=v,t.numIntersection=0,p}}function sh(s){let t=new WeakMap;function e(a,o){return o===ks?a.mapping=Xn:o===Hs&&(a.mapping=$n),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===ks||o===Hs)if(t.has(a)){const l=t.get(a).texture;return e(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const c=new gc(l.height/2);return c.fromEquirectangularTexture(s,a),t.set(a,c),a.addEventListener("dispose",i),e(c.texture,a.mapping)}else return null}}return a}function i(a){const o=a.target;o.removeEventListener("dispose",i);const l=t.get(o);l!==void 0&&(t.delete(o),l.dispose())}function r(){t=new WeakMap}return{get:n,dispose:r}}class go extends fo{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,a=n+t,o=i+e,l=i-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,d=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=c*this.view.offsetX,a=r+c*this.view.width,o-=d*this.view.offsetY,l=o-d*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}const Hn=4,fa=[.125,.215,.35,.446,.526,.582],yn=20,Cs=new go,pa=new Ot;let Rs=null,Ls=0,Ps=0;const _n=(1+Math.sqrt(5))/2,kn=1/_n,ma=[new P(1,1,1),new P(-1,1,1),new P(1,1,-1),new P(-1,1,-1),new P(0,_n,kn),new P(0,_n,-kn),new P(kn,0,_n),new P(-kn,0,_n),new P(_n,kn,0),new P(-_n,kn,0)];class ga{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Rs=this._renderer.getRenderTarget(),Ls=this._renderer.getActiveCubeFace(),Ps=this._renderer.getActiveMipmapLevel(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=xa(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=_a(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Rs,Ls,Ps),t.scissorTest=!1,Bi(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Xn||t.mapping===$n?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Rs=this._renderer.getRenderTarget(),Ls=this._renderer.getActiveCubeFace(),Ps=this._renderer.getActiveMipmapLevel();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Le,minFilter:Le,generateMipmaps:!1,type:di,format:Oe,colorSpace:Je,depthBuffer:!1},i=va(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=va(t,e,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=rh(r)),this._blurMaterial=ah(r,t,e)}return i}_compileMaterial(t){const e=new Ze(this._lodPlanes[0],t);this._renderer.compile(e,Cs)}_sceneToCubeUV(t,e,n,i){const o=new Ae(90,1,e,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],d=this._renderer,h=d.autoClear,f=d.toneMapping;d.getClearColor(pa),d.toneMapping=ln,d.autoClear=!1;const m=new lo({name:"PMREM.Background",side:Se,depthWrite:!1,depthTest:!1}),g=new Ze(new pi,m);let v=!1;const p=t.background;p?p.isColor&&(m.color.copy(p),t.background=null,v=!0):(m.color.copy(pa),v=!0);for(let u=0;u<6;u++){const E=u%3;E===0?(o.up.set(0,l[u],0),o.lookAt(c[u],0,0)):E===1?(o.up.set(0,0,l[u]),o.lookAt(0,c[u],0)):(o.up.set(0,l[u],0),o.lookAt(0,0,c[u]));const x=this._cubeSize;Bi(i,E*x,u>2?x:0,x,x),d.setRenderTarget(i),v&&d.render(g,o),d.render(t,o)}g.geometry.dispose(),g.material.dispose(),d.toneMapping=f,d.autoClear=h,t.background=p}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===Xn||t.mapping===$n;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=xa()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=_a());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new Ze(this._lodPlanes[0],r),o=r.uniforms;o.envMap.value=t;const l=this._cubeSize;Bi(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(a,Cs)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const r=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),a=ma[(i-1)%ma.length];this._blur(t,i-1,i,r,a)}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,"latitudinal",r),this._halfBlur(a,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,a,o){const l=this._renderer,c=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const d=3,h=new Ze(this._lodPlanes[i],c),f=c.uniforms,m=this._sizeLods[n]-1,g=isFinite(r)?Math.PI/(2*m):2*Math.PI/(2*yn-1),v=r/g,p=isFinite(r)?1+Math.floor(d*v):yn;p>yn&&console.warn("sigmaRadians, ".concat(r,", is too large and will clip, as it requested ").concat(p," samples when the maximum is set to ").concat(yn));const u=[];let E=0;for(let L=0;L<yn;++L){const k=L/v,y=Math.exp(-k*k/2);u.push(y),L===0?E+=y:L<p&&(E+=2*y)}for(let L=0;L<u.length;L++)u[L]=u[L]/E;f.envMap.value=t.texture,f.samples.value=p,f.weights.value=u,f.latitudinal.value=a==="latitudinal",o&&(f.poleAxis.value=o);const{_lodMax:x}=this;f.dTheta.value=g,f.mipInt.value=x-n;const A=this._sizeLods[i],b=3*A*(i>x-Hn?i-x+Hn:0),w=4*(this._cubeSize-A);Bi(e,b,w,3*A,2*A),l.setRenderTarget(e),l.render(h,Cs)}}function rh(s){const t=[],e=[],n=[];let i=s;const r=s-Hn+1+fa.length;for(let a=0;a<r;a++){const o=Math.pow(2,i);e.push(o);let l=1/o;a>s-Hn?l=fa[a-s+Hn-1]:a===0&&(l=0),n.push(l);const c=1/(o-2),d=-c,h=1+c,f=[d,d,h,d,h,h,d,d,h,h,d,h],m=6,g=6,v=3,p=2,u=1,E=new Float32Array(v*g*m),x=new Float32Array(p*g*m),A=new Float32Array(u*g*m);for(let w=0;w<m;w++){const L=w%3*2/3-1,k=w>2?0:-1,y=[L,k,0,L+2/3,k,0,L+2/3,k+1,0,L,k,0,L+2/3,k+1,0,L,k+1,0];E.set(y,v*g*w),x.set(f,p*g*w);const T=[w,w,w,w,w,w];A.set(T,u*g*w)}const b=new Be;b.setAttribute("position",new ke(E,v)),b.setAttribute("uv",new ke(x,p)),b.setAttribute("faceIndex",new ke(A,u)),t.push(b),i>Hn&&i--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function va(s,t,e){const n=new bn(s,t,e);return n.texture.mapping=Yi,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function Bi(s,t,e,n,i){s.viewport.set(t,e,n,i),s.scissor.set(t,e,n,i)}function ah(s,t,e){const n=new Float32Array(yn),i=new P(0,1,0);return new Tn({name:"SphericalGaussianBlur",defines:{n:yn,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:"".concat(s,".0")},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:sr(),fragmentShader:"\n\n			precision mediump float;\n			precision mediump int;\n\n			varying vec3 vOutputDirection;\n\n			uniform sampler2D envMap;\n			uniform int samples;\n			uniform float weights[ n ];\n			uniform bool latitudinal;\n			uniform float dTheta;\n			uniform float mipInt;\n			uniform vec3 poleAxis;\n\n			#define ENVMAP_TYPE_CUBE_UV\n			#include <cube_uv_reflection_fragment>\n\n			vec3 getSample( float theta, vec3 axis ) {\n\n				float cosTheta = cos( theta );\n				// Rodrigues' axis-angle rotation\n				vec3 sampleDirection = vOutputDirection * cosTheta\n					+ cross( axis, vOutputDirection ) * sin( theta )\n					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n				return bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n			}\n\n			void main() {\n\n				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n				}\n\n				axis = normalize( axis );\n\n				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n				for ( int i = 1; i < n; i++ ) {\n\n					if ( i >= samples ) {\n\n						break;\n\n					}\n\n					float theta = dTheta * float( i );\n					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n				}\n\n			}\n		",blending:on,depthTest:!1,depthWrite:!1})}function _a(){return new Tn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:sr(),fragmentShader:"\n\n			precision mediump float;\n			precision mediump int;\n\n			varying vec3 vOutputDirection;\n\n			uniform sampler2D envMap;\n\n			#include <common>\n\n			void main() {\n\n				vec3 outputDirection = normalize( vOutputDirection );\n				vec2 uv = equirectUv( outputDirection );\n\n				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n			}\n		",blending:on,depthTest:!1,depthWrite:!1})}function xa(){return new Tn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:sr(),fragmentShader:"\n\n			precision mediump float;\n			precision mediump int;\n\n			uniform float flipEnvMap;\n\n			varying vec3 vOutputDirection;\n\n			uniform samplerCube envMap;\n\n			void main() {\n\n				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n			}\n		",blending:on,depthTest:!1,depthWrite:!1})}function sr(){return"\n\n		precision mediump float;\n		precision mediump int;\n\n		attribute float faceIndex;\n\n		varying vec3 vOutputDirection;\n\n		// RH coordinate system; PMREM face-indexing convention\n		vec3 getDirection( vec2 uv, float face ) {\n\n			uv = 2.0 * uv - 1.0;\n\n			vec3 direction = vec3( uv, 1.0 );\n\n			if ( face == 0.0 ) {\n\n				direction = direction.zyx; // ( 1, v, u ) pos x\n\n			} else if ( face == 1.0 ) {\n\n				direction = direction.xzy;\n				direction.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n			} else if ( face == 2.0 ) {\n\n				direction.x *= -1.0; // ( -u, v, 1 ) pos z\n\n			} else if ( face == 3.0 ) {\n\n				direction = direction.zyx;\n				direction.xz *= -1.0; // ( -1, v, -u ) neg x\n\n			} else if ( face == 4.0 ) {\n\n				direction = direction.xzy;\n				direction.xy *= -1.0; // ( -u, -1, v ) neg y\n\n			} else if ( face == 5.0 ) {\n\n				direction.z *= -1.0; // ( u, v, -1 ) neg z\n\n			}\n\n			return direction;\n\n		}\n\n		void main() {\n\n			vOutputDirection = getDirection( uv, faceIndex );\n			gl_Position = vec4( position, 1.0 );\n\n		}\n	"}function oh(s){let t=new WeakMap,e=null;function n(o){if(o&&o.isTexture){const l=o.mapping,c=l===ks||l===Hs,d=l===Xn||l===$n;if(c||d)if(o.isRenderTargetTexture&&o.needsPMREMUpdate===!0){o.needsPMREMUpdate=!1;let h=t.get(o);return e===null&&(e=new ga(s)),h=c?e.fromEquirectangular(o,h):e.fromCubemap(o,h),t.set(o,h),h.texture}else{if(t.has(o))return t.get(o).texture;{const h=o.image;if(c&&h&&h.height>0||d&&h&&i(h)){e===null&&(e=new ga(s));const f=c?e.fromEquirectangular(o):e.fromCubemap(o);return t.set(o,f),o.addEventListener("dispose",r),f.texture}else return null}}}return o}function i(o){let l=0;const c=6;for(let d=0;d<c;d++)o[d]!==void 0&&l++;return l===c}function r(o){const l=o.target;l.removeEventListener("dispose",r);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function a(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:a}}function lh(s){const t={};function e(n){if(t[n]!==void 0)return t[n];let i;switch(n){case"WEBGL_depth_texture":i=s.getExtension("WEBGL_depth_texture")||s.getExtension("MOZ_WEBGL_depth_texture")||s.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=s.getExtension("EXT_texture_filter_anisotropic")||s.getExtension("MOZ_EXT_texture_filter_anisotropic")||s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=s.getExtension("WEBGL_compressed_texture_s3tc")||s.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=s.getExtension("WEBGL_compressed_texture_pvrtc")||s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=s.getExtension(n)}return t[n]=i,i}return{has:function(n){return e(n)!==null},init:function(n){n.isWebGL2?e("EXT_color_buffer_float"):(e("WEBGL_depth_texture"),e("OES_texture_float"),e("OES_texture_half_float"),e("OES_texture_half_float_linear"),e("OES_standard_derivatives"),e("OES_element_index_uint"),e("OES_vertex_array_object"),e("ANGLE_instanced_arrays")),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture")},get:function(n){const i=e(n);return i===null&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function ch(s,t,e,n){const i={},r=new WeakMap;function a(h){const f=h.target;f.index!==null&&t.remove(f.index);for(const g in f.attributes)t.remove(f.attributes[g]);for(const g in f.morphAttributes){const v=f.morphAttributes[g];for(let p=0,u=v.length;p<u;p++)t.remove(v[p])}f.removeEventListener("dispose",a),delete i[f.id];const m=r.get(f);m&&(t.remove(m),r.delete(f)),n.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,e.memory.geometries--}function o(h,f){return i[f.id]===!0||(f.addEventListener("dispose",a),i[f.id]=!0,e.memory.geometries++),f}function l(h){const f=h.attributes;for(const g in f)t.update(f[g],s.ARRAY_BUFFER);const m=h.morphAttributes;for(const g in m){const v=m[g];for(let p=0,u=v.length;p<u;p++)t.update(v[p],s.ARRAY_BUFFER)}}function c(h){const f=[],m=h.index,g=h.attributes.position;let v=0;if(m!==null){const E=m.array;v=m.version;for(let x=0,A=E.length;x<A;x+=3){const b=E[x+0],w=E[x+1],L=E[x+2];f.push(b,w,w,L,L,b)}}else if(g!==void 0){const E=g.array;v=g.version;for(let x=0,A=E.length/3-1;x<A;x+=3){const b=x+0,w=x+1,L=x+2;f.push(b,w,w,L,L,b)}}else return;const p=new(io(f)?uo:co)(f,1);p.version=v;const u=r.get(h);u&&t.remove(u),r.set(h,p)}function d(h){const f=r.get(h);if(f){const m=h.index;m!==null&&f.version<m.version&&c(h)}else c(h);return r.get(h)}return{get:o,update:l,getWireframeAttribute:d}}function dh(s,t,e,n){const i=n.isWebGL2;let r;function a(m){r=m}let o,l;function c(m){o=m.type,l=m.bytesPerElement}function d(m,g){s.drawElements(r,g,o,m*l),e.update(g,r,1)}function h(m,g,v){if(v===0)return;let p,u;if(i)p=s,u="drawElementsInstanced";else if(p=t.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",p===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}p[u](r,g,o,m*l,v),e.update(g,r,v)}function f(m,g,v){if(v===0)return;const p=t.get("WEBGL_multi_draw");if(p===null)for(let u=0;u<v;u++)this.render(m[u]/l,g[u]);else{p.multiDrawElementsWEBGL(r,g,0,o,m,0,v);let u=0;for(let E=0;E<v;E++)u+=g[E];e.update(u,r,1)}}this.setMode=a,this.setIndex=c,this.render=d,this.renderInstances=h,this.renderMultiDraw=f}function uh(s){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,a,o){switch(e.calls++,a){case s.TRIANGLES:e.triangles+=o*(r/3);break;case s.LINES:e.lines+=o*(r/2);break;case s.LINE_STRIP:e.lines+=o*(r-1);break;case s.LINE_LOOP:e.lines+=o*r;break;case s.POINTS:e.points+=o*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function i(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:i,update:n}}function hh(s,t){return s[0]-t[0]}function fh(s,t){return Math.abs(t[1])-Math.abs(s[1])}function ph(s,t,e){const n={},i=new Float32Array(8),r=new WeakMap,a=new Yt,o=[];for(let c=0;c<8;c++)o[c]=[c,0];function l(c,d,h){const f=c.morphTargetInfluences;if(t.isWebGL2===!0){const m=d.morphAttributes.position||d.morphAttributes.normal||d.morphAttributes.color,g=m!==void 0?m.length:0;let v=r.get(d);if(v===void 0||v.count!==g){let R=function(){X.dispose(),r.delete(d),d.removeEventListener("dispose",R)};v!==void 0&&v.texture.dispose();const E=d.morphAttributes.position!==void 0,x=d.morphAttributes.normal!==void 0,A=d.morphAttributes.color!==void 0,b=d.morphAttributes.position||[],w=d.morphAttributes.normal||[],L=d.morphAttributes.color||[];let k=0;E===!0&&(k=1),x===!0&&(k=2),A===!0&&(k=3);let y=d.attributes.position.count*k,T=1;y>t.maxTextureSize&&(T=Math.ceil(y/t.maxTextureSize),y=t.maxTextureSize);const H=new Float32Array(y*T*4*g),X=new ao(H,y,T,g);X.type=an,X.needsUpdate=!0;const J=k*4;for(let B=0;B<g;B++){const $=b[B],G=w[B],nt=L[B],W=y*T*4*B;for(let Y=0;Y<$.count;Y++){const Q=Y*J;E===!0&&(a.fromBufferAttribute($,Y),H[W+Q+0]=a.x,H[W+Q+1]=a.y,H[W+Q+2]=a.z,H[W+Q+3]=0),x===!0&&(a.fromBufferAttribute(G,Y),H[W+Q+4]=a.x,H[W+Q+5]=a.y,H[W+Q+6]=a.z,H[W+Q+7]=0),A===!0&&(a.fromBufferAttribute(nt,Y),H[W+Q+8]=a.x,H[W+Q+9]=a.y,H[W+Q+10]=a.z,H[W+Q+11]=nt.itemSize===4?a.w:1)}}v={count:g,texture:X,size:new kt(y,T)},r.set(d,v),d.addEventListener("dispose",R)}let p=0;for(let E=0;E<f.length;E++)p+=f[E];const u=d.morphTargetsRelative?1:1-p;h.getUniforms().setValue(s,"morphTargetBaseInfluence",u),h.getUniforms().setValue(s,"morphTargetInfluences",f),h.getUniforms().setValue(s,"morphTargetsTexture",v.texture,e),h.getUniforms().setValue(s,"morphTargetsTextureSize",v.size)}else{const m=f===void 0?0:f.length;let g=n[d.id];if(g===void 0||g.length!==m){g=[];for(let x=0;x<m;x++)g[x]=[x,0];n[d.id]=g}for(let x=0;x<m;x++){const A=g[x];A[0]=x,A[1]=f[x]}g.sort(fh);for(let x=0;x<8;x++)x<m&&g[x][1]?(o[x][0]=g[x][0],o[x][1]=g[x][1]):(o[x][0]=Number.MAX_SAFE_INTEGER,o[x][1]=0);o.sort(hh);const v=d.morphAttributes.position,p=d.morphAttributes.normal;let u=0;for(let x=0;x<8;x++){const A=o[x],b=A[0],w=A[1];b!==Number.MAX_SAFE_INTEGER&&w?(v&&d.getAttribute("morphTarget"+x)!==v[b]&&d.setAttribute("morphTarget"+x,v[b]),p&&d.getAttribute("morphNormal"+x)!==p[b]&&d.setAttribute("morphNormal"+x,p[b]),i[x]=w,u+=w):(v&&d.hasAttribute("morphTarget"+x)===!0&&d.deleteAttribute("morphTarget"+x),p&&d.hasAttribute("morphNormal"+x)===!0&&d.deleteAttribute("morphNormal"+x),i[x]=0)}const E=d.morphTargetsRelative?1:1-u;h.getUniforms().setValue(s,"morphTargetBaseInfluence",E),h.getUniforms().setValue(s,"morphTargetInfluences",i)}}return{update:l}}function mh(s,t,e,n){let i=new WeakMap;function r(l){const c=n.render.frame,d=l.geometry,h=t.get(l,d);if(i.get(h)!==c&&(t.update(h),i.set(h,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),i.get(l)!==c&&(e.update(l.instanceMatrix,s.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,s.ARRAY_BUFFER),i.set(l,c))),l.isSkinnedMesh){const f=l.skeleton;i.get(f)!==c&&(f.update(),i.set(f,c))}return h}function a(){i=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:r,dispose:a}}class vo extends we{constructor(t,e,n,i,r,a,o,l,c,d){if(d=d!==void 0?d:Sn,d!==Sn&&d!==qn)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&d===Sn&&(n=rn),n===void 0&&d===qn&&(n=Mn),super(null,i,r,a,o,l,d,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=o!==void 0?o:xe,this.minFilter=l!==void 0?l:xe,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}const _o=new we,xo=new vo(1,1);xo.compareFunction=no;const yo=new ao,Mo=new Ql,So=new po,ya=[],Ma=[],Sa=new Float32Array(16),Ea=new Float32Array(9),ba=new Float32Array(4);function Jn(s,t,e){const n=s[0];if(n<=0||n>0)return s;const i=t*e;let r=ya[i];if(r===void 0&&(r=new Float32Array(i),ya[i]=r),t!==0){n.toArray(r,0);for(let a=1,o=0;a!==t;++a)o+=e,s[a].toArray(r,o)}return r}function ee(s,t){if(s.length!==t.length)return!1;for(let e=0,n=s.length;e<n;e++)if(s[e]!==t[e])return!1;return!0}function ne(s,t){for(let e=0,n=t.length;e<n;e++)s[e]=t[e]}function Zi(s,t){let e=Ma[t];e===void 0&&(e=new Int32Array(t),Ma[t]=e);for(let n=0;n!==t;++n)e[n]=s.allocateTextureUnit();return e}function gh(s,t){const e=this.cache;e[0]!==t&&(s.uniform1f(this.addr,t),e[0]=t)}function vh(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(s.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ee(e,t))return;s.uniform2fv(this.addr,t),ne(e,t)}}function _h(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(s.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(s.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(ee(e,t))return;s.uniform3fv(this.addr,t),ne(e,t)}}function xh(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(s.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ee(e,t))return;s.uniform4fv(this.addr,t),ne(e,t)}}function yh(s,t){const e=this.cache,n=t.elements;if(n===void 0){if(ee(e,t))return;s.uniformMatrix2fv(this.addr,!1,t),ne(e,t)}else{if(ee(e,n))return;ba.set(n),s.uniformMatrix2fv(this.addr,!1,ba),ne(e,n)}}function Mh(s,t){const e=this.cache,n=t.elements;if(n===void 0){if(ee(e,t))return;s.uniformMatrix3fv(this.addr,!1,t),ne(e,t)}else{if(ee(e,n))return;Ea.set(n),s.uniformMatrix3fv(this.addr,!1,Ea),ne(e,n)}}function Sh(s,t){const e=this.cache,n=t.elements;if(n===void 0){if(ee(e,t))return;s.uniformMatrix4fv(this.addr,!1,t),ne(e,t)}else{if(ee(e,n))return;Sa.set(n),s.uniformMatrix4fv(this.addr,!1,Sa),ne(e,n)}}function Eh(s,t){const e=this.cache;e[0]!==t&&(s.uniform1i(this.addr,t),e[0]=t)}function bh(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(s.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ee(e,t))return;s.uniform2iv(this.addr,t),ne(e,t)}}function Th(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(s.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(ee(e,t))return;s.uniform3iv(this.addr,t),ne(e,t)}}function Ah(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(s.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ee(e,t))return;s.uniform4iv(this.addr,t),ne(e,t)}}function wh(s,t){const e=this.cache;e[0]!==t&&(s.uniform1ui(this.addr,t),e[0]=t)}function Ch(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(s.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ee(e,t))return;s.uniform2uiv(this.addr,t),ne(e,t)}}function Rh(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(s.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(ee(e,t))return;s.uniform3uiv(this.addr,t),ne(e,t)}}function Lh(s,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(s.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ee(e,t))return;s.uniform4uiv(this.addr,t),ne(e,t)}}function Ph(s,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i);const r=this.type===s.SAMPLER_2D_SHADOW?xo:_o;e.setTexture2D(t||r,i)}function Ih(s,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),e.setTexture3D(t||Mo,i)}function Dh(s,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),e.setTextureCube(t||So,i)}function Uh(s,t,e){const n=this.cache,i=e.allocateTextureUnit();n[0]!==i&&(s.uniform1i(this.addr,i),n[0]=i),e.setTexture2DArray(t||yo,i)}function Nh(s){switch(s){case 5126:return gh;case 35664:return vh;case 35665:return _h;case 35666:return xh;case 35674:return yh;case 35675:return Mh;case 35676:return Sh;case 5124:case 35670:return Eh;case 35667:case 35671:return bh;case 35668:case 35672:return Th;case 35669:case 35673:return Ah;case 5125:return wh;case 36294:return Ch;case 36295:return Rh;case 36296:return Lh;case 35678:case 36198:case 36298:case 36306:case 35682:return Ph;case 35679:case 36299:case 36307:return Ih;case 35680:case 36300:case 36308:case 36293:return Dh;case 36289:case 36303:case 36311:case 36292:return Uh}}function Fh(s,t){s.uniform1fv(this.addr,t)}function Oh(s,t){const e=Jn(t,this.size,2);s.uniform2fv(this.addr,e)}function Bh(s,t){const e=Jn(t,this.size,3);s.uniform3fv(this.addr,e)}function Vh(s,t){const e=Jn(t,this.size,4);s.uniform4fv(this.addr,e)}function zh(s,t){const e=Jn(t,this.size,4);s.uniformMatrix2fv(this.addr,!1,e)}function kh(s,t){const e=Jn(t,this.size,9);s.uniformMatrix3fv(this.addr,!1,e)}function Hh(s,t){const e=Jn(t,this.size,16);s.uniformMatrix4fv(this.addr,!1,e)}function Gh(s,t){s.uniform1iv(this.addr,t)}function Wh(s,t){s.uniform2iv(this.addr,t)}function Xh(s,t){s.uniform3iv(this.addr,t)}function $h(s,t){s.uniform4iv(this.addr,t)}function qh(s,t){s.uniform1uiv(this.addr,t)}function Yh(s,t){s.uniform2uiv(this.addr,t)}function jh(s,t){s.uniform3uiv(this.addr,t)}function Kh(s,t){s.uniform4uiv(this.addr,t)}function Zh(s,t,e){const n=this.cache,i=t.length,r=Zi(e,i);ee(n,r)||(s.uniform1iv(this.addr,r),ne(n,r));for(let a=0;a!==i;++a)e.setTexture2D(t[a]||_o,r[a])}function Jh(s,t,e){const n=this.cache,i=t.length,r=Zi(e,i);ee(n,r)||(s.uniform1iv(this.addr,r),ne(n,r));for(let a=0;a!==i;++a)e.setTexture3D(t[a]||Mo,r[a])}function Qh(s,t,e){const n=this.cache,i=t.length,r=Zi(e,i);ee(n,r)||(s.uniform1iv(this.addr,r),ne(n,r));for(let a=0;a!==i;++a)e.setTextureCube(t[a]||So,r[a])}function tf(s,t,e){const n=this.cache,i=t.length,r=Zi(e,i);ee(n,r)||(s.uniform1iv(this.addr,r),ne(n,r));for(let a=0;a!==i;++a)e.setTexture2DArray(t[a]||yo,r[a])}function ef(s){switch(s){case 5126:return Fh;case 35664:return Oh;case 35665:return Bh;case 35666:return Vh;case 35674:return zh;case 35675:return kh;case 35676:return Hh;case 5124:case 35670:return Gh;case 35667:case 35671:return Wh;case 35668:case 35672:return Xh;case 35669:case 35673:return $h;case 5125:return qh;case 36294:return Yh;case 36295:return jh;case 36296:return Kh;case 35678:case 36198:case 36298:case 36306:case 35682:return Zh;case 35679:case 36299:case 36307:return Jh;case 35680:case 36300:case 36308:case 36293:return Qh;case 36289:case 36303:case 36311:case 36292:return tf}}class nf{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=Nh(e.type)}}class sf{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=ef(e.type)}}class rf{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const o=i[r];o.setValue(t,e[o.id],n)}}}const Is=/(\w+)(\])?(\[|\.)?/g;function Ta(s,t){s.seq.push(t),s.map[t.id]=t}function af(s,t,e){const n=s.name,i=n.length;for(Is.lastIndex=0;;){const r=Is.exec(n),a=Is.lastIndex;let o=r[1];const l=r[2]==="]",c=r[3];if(l&&(o=o|0),c===void 0||c==="["&&a+2===i){Ta(e,c===void 0?new nf(o,s,t):new sf(o,s,t));break}else{let h=e.map[o];h===void 0&&(h=new rf(o),Ta(e,h)),e=h}}}class ki{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const r=t.getActiveUniform(e,i),a=t.getUniformLocation(e,r.name);af(r,a,this)}}setValue(t,e,n,i){const r=this.map[e];r!==void 0&&r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];i!==void 0&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const o=e[r],l=n[o.id];l.needsUpdate!==!1&&o.setValue(t,l.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const a=t[i];a.id in e&&n.push(a)}return n}}function Aa(s,t,e){const n=s.createShader(t);return s.shaderSource(n,e),s.compileShader(n),n}const of=37297;let lf=0;function cf(s,t){const e=s.split("\n"),n=[],i=Math.max(t-6,0),r=Math.min(t+6,e.length);for(let a=i;a<r;a++){const o=a+1;n.push("".concat(o===t?">":" "," ").concat(o,": ").concat(e[a]))}return n.join("\n")}function df(s){const t=Xt.getPrimaries(Xt.workingColorSpace),e=Xt.getPrimaries(s);let n;switch(t===e?n="":t===Xi&&e===Wi?n="LinearDisplayP3ToLinearSRGB":t===Wi&&e===Xi&&(n="LinearSRGBToLinearDisplayP3"),s){case Je:case ji:return[n,"LinearTransferOETF"];case le:case Qs:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",s),[n,"LinearTransferOETF"]}}function wa(s,t,e){const n=s.getShaderParameter(t,s.COMPILE_STATUS),i=s.getShaderInfoLog(t).trim();if(n&&i==="")return"";const r=/ERROR: 0:(\d+)/.exec(i);if(r){const a=parseInt(r[1]);return e.toUpperCase()+"\n\n"+i+"\n\n"+cf(s.getShaderSource(t),a)}else return i}function uf(s,t){const e=df(t);return"vec4 ".concat(s,"( vec4 value ) { return ").concat(e[0],"( ").concat(e[1],"( value ) ); }")}function hf(s,t){let e;switch(t){case El:e="Linear";break;case bl:e="Reinhard";break;case Tl:e="OptimizedCineon";break;case Al:e="ACESFilmic";break;case wl:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+s+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function ff(s){return[s.extensionDerivatives||s.envMapCubeUVHeight||s.bumpMap||s.normalMapTangentSpace||s.clearcoatNormalMap||s.flatShading||s.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(s.extensionFragDepth||s.logarithmicDepthBuffer)&&s.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",s.extensionDrawBuffers&&s.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(s.extensionShaderTextureLOD||s.envMap||s.transmission)&&s.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(oi).join("\n")}function pf(s){const t=[];for(const e in s){const n=s[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join("\n")}function mf(s,t){const e={},n=s.getProgramParameter(t,s.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const r=s.getActiveAttrib(t,i),a=r.name;let o=1;r.type===s.FLOAT_MAT2&&(o=2),r.type===s.FLOAT_MAT3&&(o=3),r.type===s.FLOAT_MAT4&&(o=4),e[a]={type:r.type,location:s.getAttribLocation(t,a),locationSize:o}}return e}function oi(s){return s!==""}function Ca(s,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return s.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Ra(s,t){return s.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const gf=/^[ \t]*#include +<([\w\d./]+)>/gm;function Ys(s){return s.replace(gf,_f)}const vf=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function _f(s,t){let e=Pt[t];if(e===void 0){const n=vf.get(t);if(n!==void 0)e=Pt[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Ys(e)}const xf=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function La(s){return s.replace(xf,yf)}function yf(s,t,e,n){let i="";for(let r=parseInt(t);r<parseInt(e);r++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return i}function Pa(s){let t="precision "+s.precision+" float;\nprecision "+s.precision+" int;";return s.precision==="highp"?t+="\n#define HIGH_PRECISION":s.precision==="mediump"?t+="\n#define MEDIUM_PRECISION":s.precision==="lowp"&&(t+="\n#define LOW_PRECISION"),t}function Mf(s){let t="SHADOWMAP_TYPE_BASIC";return s.shadowMapType===Wa?t="SHADOWMAP_TYPE_PCF":s.shadowMapType===Xa?t="SHADOWMAP_TYPE_PCF_SOFT":s.shadowMapType===Ye&&(t="SHADOWMAP_TYPE_VSM"),t}function Sf(s){let t="ENVMAP_TYPE_CUBE";if(s.envMap)switch(s.envMapMode){case Xn:case $n:t="ENVMAP_TYPE_CUBE";break;case Yi:t="ENVMAP_TYPE_CUBE_UV";break}return t}function Ef(s){let t="ENVMAP_MODE_REFLECTION";if(s.envMap)switch(s.envMapMode){case $n:t="ENVMAP_MODE_REFRACTION";break}return t}function bf(s){let t="ENVMAP_BLENDING_NONE";if(s.envMap)switch(s.combine){case Zs:t="ENVMAP_BLENDING_MULTIPLY";break;case Ml:t="ENVMAP_BLENDING_MIX";break;case Sl:t="ENVMAP_BLENDING_ADD";break}return t}function Tf(s){const t=s.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function Af(s,t,e,n){const i=s.getContext(),r=e.defines;let a=e.vertexShader,o=e.fragmentShader;const l=Mf(e),c=Sf(e),d=Ef(e),h=bf(e),f=Tf(e),m=e.isWebGL2?"":ff(e),g=pf(r),v=i.createProgram();let p,u,E=e.glslVersion?"#version "+e.glslVersion+"\n":"";e.isRawShaderMaterial?(p=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(oi).join("\n"),p.length>0&&(p+="\n"),u=[m,"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(oi).join("\n"),u.length>0&&(u+="\n")):(p=[Pa(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.batching?"#define USE_BATCHING":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+d:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors&&e.isWebGL2?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0&&e.isWebGL2?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.useLegacyLights?"#define LEGACY_LIGHTS":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(oi).join("\n"),u=[m,Pa(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+d:"",e.envMap?"#define "+h:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.useLegacyLights?"#define LEGACY_LIGHTS":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==ln?"#define TONE_MAPPING":"",e.toneMapping!==ln?Pt.tonemapping_pars_fragment:"",e.toneMapping!==ln?hf("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",Pt.colorspace_pars_fragment,uf("linearToOutputTexel",e.outputColorSpace),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"","\n"].filter(oi).join("\n")),a=Ys(a),a=Ca(a,e),a=Ra(a,e),o=Ys(o),o=Ca(o,e),o=Ra(o,e),a=La(a),o=La(o),e.isWebGL2&&e.isRawShaderMaterial!==!0&&(E="#version 300 es\n",p=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+p,u=["precision mediump sampler2DArray;","#define varying in",e.glslVersion===jr?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===jr?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+u);const x=E+p+a,A=E+u+o,b=Aa(i,i.VERTEX_SHADER,x),w=Aa(i,i.FRAGMENT_SHADER,A);i.attachShader(v,b),i.attachShader(v,w),e.index0AttributeName!==void 0?i.bindAttribLocation(v,0,e.index0AttributeName):e.morphTargets===!0&&i.bindAttribLocation(v,0,"position"),i.linkProgram(v);function L(H){if(s.debug.checkShaderErrors){const X=i.getProgramInfoLog(v).trim(),J=i.getShaderInfoLog(b).trim(),R=i.getShaderInfoLog(w).trim();let B=!0,$=!0;if(i.getProgramParameter(v,i.LINK_STATUS)===!1)if(B=!1,typeof s.debug.onShaderError=="function")s.debug.onShaderError(i,v,b,w);else{const G=wa(i,b,"vertex"),nt=wa(i,w,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(v,i.VALIDATE_STATUS)+"\n\nProgram Info Log: "+X+"\n"+G+"\n"+nt)}else X!==""?console.warn("THREE.WebGLProgram: Program Info Log:",X):(J===""||R==="")&&($=!1);$&&(H.diagnostics={runnable:B,programLog:X,vertexShader:{log:J,prefix:p},fragmentShader:{log:R,prefix:u}})}i.deleteShader(b),i.deleteShader(w),k=new ki(i,v),y=mf(i,v)}let k;this.getUniforms=function(){return k===void 0&&L(this),k};let y;this.getAttributes=function(){return y===void 0&&L(this),y};let T=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return T===!1&&(T=i.getProgramParameter(v,of)),T},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(v),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=lf++,this.cacheKey=t,this.usedTimes=1,this.program=v,this.vertexShader=b,this.fragmentShader=w,this}let wf=0;class Cf{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return a.has(i)===!1&&(a.add(i),i.usedTimes++),a.has(r)===!1&&(a.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new Rf(t),e.set(t,n)),n}}class Rf{constructor(t){this.id=wf++,this.code=t,this.usedTimes=0}}function Lf(s,t,e,n,i,r,a){const o=new er,l=new Cf,c=[],d=i.isWebGL2,h=i.logarithmicDepthBuffer,f=i.vertexTextures;let m=i.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function v(y){return y===0?"uv":"uv".concat(y)}function p(y,T,H,X,J){const R=X.fog,B=J.geometry,$=y.isMeshStandardMaterial?X.environment:null,G=(y.isMeshStandardMaterial?e:t).get(y.envMap||$),nt=G&&G.mapping===Yi?G.image.height:null,W=g[y.type];y.precision!==null&&(m=i.getMaxPrecision(y.precision),m!==y.precision&&console.warn("THREE.WebGLProgram.getParameters:",y.precision,"not supported, using",m,"instead."));const Y=B.morphAttributes.position||B.morphAttributes.normal||B.morphAttributes.color,Q=Y!==void 0?Y.length:0;let ut=0;B.morphAttributes.position!==void 0&&(ut=1),B.morphAttributes.normal!==void 0&&(ut=2),B.morphAttributes.color!==void 0&&(ut=3);let V,q,at,pt;if(W){const ge=ze[W];V=ge.vertexShader,q=ge.fragmentShader}else V=y.vertexShader,q=y.fragmentShader,l.update(y),at=l.getVertexShaderID(y),pt=l.getFragmentShaderID(y);const mt=s.getRenderTarget(),Lt=J.isInstancedMesh===!0,Tt=J.isBatchedMesh===!0,bt=!!y.map,It=!!y.matcap,D=!!G,me=!!y.aoMap,gt=!!y.lightMap,Bt=!!y.bumpMap,yt=!!y.normalMap,jt=!!y.displacementMap,Ut=!!y.emissiveMap,Ct=!!y.metalnessMap,Gt=!!y.roughnessMap,ae=y.anisotropy>0,oe=y.clearcoat>0,S=y.iridescence>0,_=y.sheen>0,U=y.transmission>0,tt=ae&&!!y.anisotropyMap,j=oe&&!!y.clearcoatMap,et=oe&&!!y.clearcoatNormalMap,ht=oe&&!!y.clearcoatRoughnessMap,st=S&&!!y.iridescenceMap,ot=S&&!!y.iridescenceThicknessMap,Mt=_&&!!y.sheenColorMap,Ht=_&&!!y.sheenRoughnessMap,Z=!!y.specularMap,Wt=!!y.specularColorMap,At=!!y.specularIntensityMap,St=U&&!!y.transmissionMap,vt=U&&!!y.thicknessMap,dt=!!y.gradientMap,Vt=!!y.alphaMap,C=y.alphaTest>0,lt=!!y.alphaHash,K=!!y.extensions,z=!!B.attributes.uv1,it=!!B.attributes.uv2,xt=!!B.attributes.uv3;let zt=ln;return y.toneMapped&&(mt===null||mt.isXRRenderTarget===!0)&&(zt=s.toneMapping),{isWebGL2:d,shaderID:W,shaderType:y.type,shaderName:y.name,vertexShader:V,fragmentShader:q,defines:y.defines,customVertexShaderID:at,customFragmentShaderID:pt,isRawShaderMaterial:y.isRawShaderMaterial===!0,glslVersion:y.glslVersion,precision:m,batching:Tt,instancing:Lt,instancingColor:Lt&&J.instanceColor!==null,supportsVertexTextures:f,outputColorSpace:mt===null?s.outputColorSpace:mt.isXRRenderTarget===!0?mt.texture.colorSpace:Je,map:bt,matcap:It,envMap:D,envMapMode:D&&G.mapping,envMapCubeUVHeight:nt,aoMap:me,lightMap:gt,bumpMap:Bt,normalMap:yt,displacementMap:f&&jt,emissiveMap:Ut,normalMapObjectSpace:yt&&y.normalMapType===Vl,normalMapTangentSpace:yt&&y.normalMapType===eo,metalnessMap:Ct,roughnessMap:Gt,anisotropy:ae,anisotropyMap:tt,clearcoat:oe,clearcoatMap:j,clearcoatNormalMap:et,clearcoatRoughnessMap:ht,iridescence:S,iridescenceMap:st,iridescenceThicknessMap:ot,sheen:_,sheenColorMap:Mt,sheenRoughnessMap:Ht,specularMap:Z,specularColorMap:Wt,specularIntensityMap:At,transmission:U,transmissionMap:St,thicknessMap:vt,gradientMap:dt,opaque:y.transparent===!1&&y.blending===Gn,alphaMap:Vt,alphaTest:C,alphaHash:lt,combine:y.combine,mapUv:bt&&v(y.map.channel),aoMapUv:me&&v(y.aoMap.channel),lightMapUv:gt&&v(y.lightMap.channel),bumpMapUv:Bt&&v(y.bumpMap.channel),normalMapUv:yt&&v(y.normalMap.channel),displacementMapUv:jt&&v(y.displacementMap.channel),emissiveMapUv:Ut&&v(y.emissiveMap.channel),metalnessMapUv:Ct&&v(y.metalnessMap.channel),roughnessMapUv:Gt&&v(y.roughnessMap.channel),anisotropyMapUv:tt&&v(y.anisotropyMap.channel),clearcoatMapUv:j&&v(y.clearcoatMap.channel),clearcoatNormalMapUv:et&&v(y.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ht&&v(y.clearcoatRoughnessMap.channel),iridescenceMapUv:st&&v(y.iridescenceMap.channel),iridescenceThicknessMapUv:ot&&v(y.iridescenceThicknessMap.channel),sheenColorMapUv:Mt&&v(y.sheenColorMap.channel),sheenRoughnessMapUv:Ht&&v(y.sheenRoughnessMap.channel),specularMapUv:Z&&v(y.specularMap.channel),specularColorMapUv:Wt&&v(y.specularColorMap.channel),specularIntensityMapUv:At&&v(y.specularIntensityMap.channel),transmissionMapUv:St&&v(y.transmissionMap.channel),thicknessMapUv:vt&&v(y.thicknessMap.channel),alphaMapUv:Vt&&v(y.alphaMap.channel),vertexTangents:!!B.attributes.tangent&&(yt||ae),vertexColors:y.vertexColors,vertexAlphas:y.vertexColors===!0&&!!B.attributes.color&&B.attributes.color.itemSize===4,vertexUv1s:z,vertexUv2s:it,vertexUv3s:xt,pointsUvs:J.isPoints===!0&&!!B.attributes.uv&&(bt||Vt),fog:!!R,useFog:y.fog===!0,fogExp2:R&&R.isFogExp2,flatShading:y.flatShading===!0,sizeAttenuation:y.sizeAttenuation===!0,logarithmicDepthBuffer:h,skinning:J.isSkinnedMesh===!0,morphTargets:B.morphAttributes.position!==void 0,morphNormals:B.morphAttributes.normal!==void 0,morphColors:B.morphAttributes.color!==void 0,morphTargetsCount:Q,morphTextureStride:ut,numDirLights:T.directional.length,numPointLights:T.point.length,numSpotLights:T.spot.length,numSpotLightMaps:T.spotLightMap.length,numRectAreaLights:T.rectArea.length,numHemiLights:T.hemi.length,numDirLightShadows:T.directionalShadowMap.length,numPointLightShadows:T.pointShadowMap.length,numSpotLightShadows:T.spotShadowMap.length,numSpotLightShadowsWithMaps:T.numSpotLightShadowsWithMaps,numLightProbes:T.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:y.dithering,shadowMapEnabled:s.shadowMap.enabled&&H.length>0,shadowMapType:s.shadowMap.type,toneMapping:zt,useLegacyLights:s._useLegacyLights,decodeVideoTexture:bt&&y.map.isVideoTexture===!0&&Xt.getTransfer(y.map.colorSpace)===qt,premultipliedAlpha:y.premultipliedAlpha,doubleSided:y.side===je,flipSided:y.side===Se,useDepthPacking:y.depthPacking>=0,depthPacking:y.depthPacking||0,index0AttributeName:y.index0AttributeName,extensionDerivatives:K&&y.extensions.derivatives===!0,extensionFragDepth:K&&y.extensions.fragDepth===!0,extensionDrawBuffers:K&&y.extensions.drawBuffers===!0,extensionShaderTextureLOD:K&&y.extensions.shaderTextureLOD===!0,rendererExtensionFragDepth:d||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:d||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:d||n.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:y.customProgramCacheKey()}}function u(y){const T=[];if(y.shaderID?T.push(y.shaderID):(T.push(y.customVertexShaderID),T.push(y.customFragmentShaderID)),y.defines!==void 0)for(const H in y.defines)T.push(H),T.push(y.defines[H]);return y.isRawShaderMaterial===!1&&(E(T,y),x(T,y),T.push(s.outputColorSpace)),T.push(y.customProgramCacheKey),T.join()}function E(y,T){y.push(T.precision),y.push(T.outputColorSpace),y.push(T.envMapMode),y.push(T.envMapCubeUVHeight),y.push(T.mapUv),y.push(T.alphaMapUv),y.push(T.lightMapUv),y.push(T.aoMapUv),y.push(T.bumpMapUv),y.push(T.normalMapUv),y.push(T.displacementMapUv),y.push(T.emissiveMapUv),y.push(T.metalnessMapUv),y.push(T.roughnessMapUv),y.push(T.anisotropyMapUv),y.push(T.clearcoatMapUv),y.push(T.clearcoatNormalMapUv),y.push(T.clearcoatRoughnessMapUv),y.push(T.iridescenceMapUv),y.push(T.iridescenceThicknessMapUv),y.push(T.sheenColorMapUv),y.push(T.sheenRoughnessMapUv),y.push(T.specularMapUv),y.push(T.specularColorMapUv),y.push(T.specularIntensityMapUv),y.push(T.transmissionMapUv),y.push(T.thicknessMapUv),y.push(T.combine),y.push(T.fogExp2),y.push(T.sizeAttenuation),y.push(T.morphTargetsCount),y.push(T.morphAttributeCount),y.push(T.numDirLights),y.push(T.numPointLights),y.push(T.numSpotLights),y.push(T.numSpotLightMaps),y.push(T.numHemiLights),y.push(T.numRectAreaLights),y.push(T.numDirLightShadows),y.push(T.numPointLightShadows),y.push(T.numSpotLightShadows),y.push(T.numSpotLightShadowsWithMaps),y.push(T.numLightProbes),y.push(T.shadowMapType),y.push(T.toneMapping),y.push(T.numClippingPlanes),y.push(T.numClipIntersection),y.push(T.depthPacking)}function x(y,T){o.disableAll(),T.isWebGL2&&o.enable(0),T.supportsVertexTextures&&o.enable(1),T.instancing&&o.enable(2),T.instancingColor&&o.enable(3),T.matcap&&o.enable(4),T.envMap&&o.enable(5),T.normalMapObjectSpace&&o.enable(6),T.normalMapTangentSpace&&o.enable(7),T.clearcoat&&o.enable(8),T.iridescence&&o.enable(9),T.alphaTest&&o.enable(10),T.vertexColors&&o.enable(11),T.vertexAlphas&&o.enable(12),T.vertexUv1s&&o.enable(13),T.vertexUv2s&&o.enable(14),T.vertexUv3s&&o.enable(15),T.vertexTangents&&o.enable(16),T.anisotropy&&o.enable(17),T.alphaHash&&o.enable(18),T.batching&&o.enable(19),y.push(o.mask),o.disableAll(),T.fog&&o.enable(0),T.useFog&&o.enable(1),T.flatShading&&o.enable(2),T.logarithmicDepthBuffer&&o.enable(3),T.skinning&&o.enable(4),T.morphTargets&&o.enable(5),T.morphNormals&&o.enable(6),T.morphColors&&o.enable(7),T.premultipliedAlpha&&o.enable(8),T.shadowMapEnabled&&o.enable(9),T.useLegacyLights&&o.enable(10),T.doubleSided&&o.enable(11),T.flipSided&&o.enable(12),T.useDepthPacking&&o.enable(13),T.dithering&&o.enable(14),T.transmission&&o.enable(15),T.sheen&&o.enable(16),T.opaque&&o.enable(17),T.pointsUvs&&o.enable(18),T.decodeVideoTexture&&o.enable(19),y.push(o.mask)}function A(y){const T=g[y.type];let H;if(T){const X=ze[T];H=hc.clone(X.uniforms)}else H=y.uniforms;return H}function b(y,T){let H;for(let X=0,J=c.length;X<J;X++){const R=c[X];if(R.cacheKey===T){H=R,++H.usedTimes;break}}return H===void 0&&(H=new Af(s,T,y,r),c.push(H)),H}function w(y){if(--y.usedTimes===0){const T=c.indexOf(y);c[T]=c[c.length-1],c.pop(),y.destroy()}}function L(y){l.remove(y)}function k(){l.dispose()}return{getParameters:p,getProgramCacheKey:u,getUniforms:A,acquireProgram:b,releaseProgram:w,releaseShaderCache:L,programs:c,dispose:k}}function Pf(){let s=new WeakMap;function t(r){let a=s.get(r);return a===void 0&&(a={},s.set(r,a)),a}function e(r){s.delete(r)}function n(r,a,o){s.get(r)[a]=o}function i(){s=new WeakMap}return{get:t,remove:e,update:n,dispose:i}}function If(s,t){return s.groupOrder!==t.groupOrder?s.groupOrder-t.groupOrder:s.renderOrder!==t.renderOrder?s.renderOrder-t.renderOrder:s.material.id!==t.material.id?s.material.id-t.material.id:s.z!==t.z?s.z-t.z:s.id-t.id}function Ia(s,t){return s.groupOrder!==t.groupOrder?s.groupOrder-t.groupOrder:s.renderOrder!==t.renderOrder?s.renderOrder-t.renderOrder:s.z!==t.z?t.z-s.z:s.id-t.id}function Da(){const s=[];let t=0;const e=[],n=[],i=[];function r(){t=0,e.length=0,n.length=0,i.length=0}function a(h,f,m,g,v,p){let u=s[t];return u===void 0?(u={id:h.id,object:h,geometry:f,material:m,groupOrder:g,renderOrder:h.renderOrder,z:v,group:p},s[t]=u):(u.id=h.id,u.object=h,u.geometry=f,u.material=m,u.groupOrder=g,u.renderOrder=h.renderOrder,u.z=v,u.group=p),t++,u}function o(h,f,m,g,v,p){const u=a(h,f,m,g,v,p);m.transmission>0?n.push(u):m.transparent===!0?i.push(u):e.push(u)}function l(h,f,m,g,v,p){const u=a(h,f,m,g,v,p);m.transmission>0?n.unshift(u):m.transparent===!0?i.unshift(u):e.unshift(u)}function c(h,f){e.length>1&&e.sort(h||If),n.length>1&&n.sort(f||Ia),i.length>1&&i.sort(f||Ia)}function d(){for(let h=t,f=s.length;h<f;h++){const m=s[h];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:e,transmissive:n,transparent:i,init:r,push:o,unshift:l,finish:d,sort:c}}function Df(){let s=new WeakMap;function t(n,i){const r=s.get(n);let a;return r===void 0?(a=new Da,s.set(n,[a])):i>=r.length?(a=new Da,r.push(a)):a=r[i],a}function e(){s=new WeakMap}return{get:t,dispose:e}}function Uf(){const s={};return{get:function(t){if(s[t.id]!==void 0)return s[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new P,color:new Ot};break;case"SpotLight":e={position:new P,direction:new P,color:new Ot,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new P,color:new Ot,distance:0,decay:0};break;case"HemisphereLight":e={direction:new P,skyColor:new Ot,groundColor:new Ot};break;case"RectAreaLight":e={color:new Ot,position:new P,halfWidth:new P,halfHeight:new P};break}return s[t.id]=e,e}}}function Nf(){const s={};return{get:function(t){if(s[t.id]!==void 0)return s[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new kt};break;case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new kt};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new kt,shadowCameraNear:1,shadowCameraFar:1e3};break}return s[t.id]=e,e}}}let Ff=0;function Of(s,t){return(t.castShadow?2:0)-(s.castShadow?2:0)+(t.map?1:0)-(s.map?1:0)}function Bf(s,t){const e=new Uf,n=Nf(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let d=0;d<9;d++)i.probe.push(new P);const r=new P,a=new Qt,o=new Qt;function l(d,h){let f=0,m=0,g=0;for(let X=0;X<9;X++)i.probe[X].set(0,0,0);let v=0,p=0,u=0,E=0,x=0,A=0,b=0,w=0,L=0,k=0,y=0;d.sort(Of);const T=h===!0?Math.PI:1;for(let X=0,J=d.length;X<J;X++){const R=d[X],B=R.color,$=R.intensity,G=R.distance,nt=R.shadow&&R.shadow.map?R.shadow.map.texture:null;if(R.isAmbientLight)f+=B.r*$*T,m+=B.g*$*T,g+=B.b*$*T;else if(R.isLightProbe){for(let W=0;W<9;W++)i.probe[W].addScaledVector(R.sh.coefficients[W],$);y++}else if(R.isDirectionalLight){const W=e.get(R);if(W.color.copy(R.color).multiplyScalar(R.intensity*T),R.castShadow){const Y=R.shadow,Q=n.get(R);Q.shadowBias=Y.bias,Q.shadowNormalBias=Y.normalBias,Q.shadowRadius=Y.radius,Q.shadowMapSize=Y.mapSize,i.directionalShadow[v]=Q,i.directionalShadowMap[v]=nt,i.directionalShadowMatrix[v]=R.shadow.matrix,A++}i.directional[v]=W,v++}else if(R.isSpotLight){const W=e.get(R);W.position.setFromMatrixPosition(R.matrixWorld),W.color.copy(B).multiplyScalar($*T),W.distance=G,W.coneCos=Math.cos(R.angle),W.penumbraCos=Math.cos(R.angle*(1-R.penumbra)),W.decay=R.decay,i.spot[u]=W;const Y=R.shadow;if(R.map&&(i.spotLightMap[L]=R.map,L++,Y.updateMatrices(R),R.castShadow&&k++),i.spotLightMatrix[u]=Y.matrix,R.castShadow){const Q=n.get(R);Q.shadowBias=Y.bias,Q.shadowNormalBias=Y.normalBias,Q.shadowRadius=Y.radius,Q.shadowMapSize=Y.mapSize,i.spotShadow[u]=Q,i.spotShadowMap[u]=nt,w++}u++}else if(R.isRectAreaLight){const W=e.get(R);W.color.copy(B).multiplyScalar($),W.halfWidth.set(R.width*.5,0,0),W.halfHeight.set(0,R.height*.5,0),i.rectArea[E]=W,E++}else if(R.isPointLight){const W=e.get(R);if(W.color.copy(R.color).multiplyScalar(R.intensity*T),W.distance=R.distance,W.decay=R.decay,R.castShadow){const Y=R.shadow,Q=n.get(R);Q.shadowBias=Y.bias,Q.shadowNormalBias=Y.normalBias,Q.shadowRadius=Y.radius,Q.shadowMapSize=Y.mapSize,Q.shadowCameraNear=Y.camera.near,Q.shadowCameraFar=Y.camera.far,i.pointShadow[p]=Q,i.pointShadowMap[p]=nt,i.pointShadowMatrix[p]=R.shadow.matrix,b++}i.point[p]=W,p++}else if(R.isHemisphereLight){const W=e.get(R);W.skyColor.copy(R.color).multiplyScalar($*T),W.groundColor.copy(R.groundColor).multiplyScalar($*T),i.hemi[x]=W,x++}}E>0&&(t.isWebGL2||s.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=rt.LTC_FLOAT_1,i.rectAreaLTC2=rt.LTC_FLOAT_2):s.has("OES_texture_half_float_linear")===!0?(i.rectAreaLTC1=rt.LTC_HALF_1,i.rectAreaLTC2=rt.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),i.ambient[0]=f,i.ambient[1]=m,i.ambient[2]=g;const H=i.hash;(H.directionalLength!==v||H.pointLength!==p||H.spotLength!==u||H.rectAreaLength!==E||H.hemiLength!==x||H.numDirectionalShadows!==A||H.numPointShadows!==b||H.numSpotShadows!==w||H.numSpotMaps!==L||H.numLightProbes!==y)&&(i.directional.length=v,i.spot.length=u,i.rectArea.length=E,i.point.length=p,i.hemi.length=x,i.directionalShadow.length=A,i.directionalShadowMap.length=A,i.pointShadow.length=b,i.pointShadowMap.length=b,i.spotShadow.length=w,i.spotShadowMap.length=w,i.directionalShadowMatrix.length=A,i.pointShadowMatrix.length=b,i.spotLightMatrix.length=w+L-k,i.spotLightMap.length=L,i.numSpotLightShadowsWithMaps=k,i.numLightProbes=y,H.directionalLength=v,H.pointLength=p,H.spotLength=u,H.rectAreaLength=E,H.hemiLength=x,H.numDirectionalShadows=A,H.numPointShadows=b,H.numSpotShadows=w,H.numSpotMaps=L,H.numLightProbes=y,i.version=Ff++)}function c(d,h){let f=0,m=0,g=0,v=0,p=0;const u=h.matrixWorldInverse;for(let E=0,x=d.length;E<x;E++){const A=d[E];if(A.isDirectionalLight){const b=i.directional[f];b.direction.setFromMatrixPosition(A.matrixWorld),r.setFromMatrixPosition(A.target.matrixWorld),b.direction.sub(r),b.direction.transformDirection(u),f++}else if(A.isSpotLight){const b=i.spot[g];b.position.setFromMatrixPosition(A.matrixWorld),b.position.applyMatrix4(u),b.direction.setFromMatrixPosition(A.matrixWorld),r.setFromMatrixPosition(A.target.matrixWorld),b.direction.sub(r),b.direction.transformDirection(u),g++}else if(A.isRectAreaLight){const b=i.rectArea[v];b.position.setFromMatrixPosition(A.matrixWorld),b.position.applyMatrix4(u),o.identity(),a.copy(A.matrixWorld),a.premultiply(u),o.extractRotation(a),b.halfWidth.set(A.width*.5,0,0),b.halfHeight.set(0,A.height*.5,0),b.halfWidth.applyMatrix4(o),b.halfHeight.applyMatrix4(o),v++}else if(A.isPointLight){const b=i.point[m];b.position.setFromMatrixPosition(A.matrixWorld),b.position.applyMatrix4(u),m++}else if(A.isHemisphereLight){const b=i.hemi[p];b.direction.setFromMatrixPosition(A.matrixWorld),b.direction.transformDirection(u),p++}}}return{setup:l,setupView:c,state:i}}function Ua(s,t){const e=new Bf(s,t),n=[],i=[];function r(){n.length=0,i.length=0}function a(h){n.push(h)}function o(h){i.push(h)}function l(h){e.setup(n,h)}function c(h){e.setupView(n,h)}return{init:r,state:{lightsArray:n,shadowsArray:i,lights:e},setupLights:l,setupLightsView:c,pushLight:a,pushShadow:o}}function Vf(s,t){let e=new WeakMap;function n(r,a=0){const o=e.get(r);let l;return o===void 0?(l=new Ua(s,t),e.set(r,[l])):a>=o.length?(l=new Ua(s,t),o.push(l)):l=o[a],l}function i(){e=new WeakMap}return{get:n,dispose:i}}class zf extends Zn{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Ol,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class kf extends Zn{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const Hf="void main() {\n	gl_Position = vec4( position, 1.0 );\n}",Gf="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function Wf(s,t,e){let n=new nr;const i=new kt,r=new kt,a=new Yt,o=new zf({depthPacking:Bl}),l=new kf,c={},d=e.maxTextureSize,h={[dn]:Se,[Se]:dn,[je]:je},f=new Tn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new kt},radius:{value:4}},vertexShader:Hf,fragmentShader:Gf}),m=f.clone();m.defines.HORIZONTAL_PASS=1;const g=new Be;g.setAttribute("position",new ke(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new Ze(g,f),p=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Wa;let u=this.type;this.render=function(b,w,L){if(p.enabled===!1||p.autoUpdate===!1&&p.needsUpdate===!1||b.length===0)return;const k=s.getRenderTarget(),y=s.getActiveCubeFace(),T=s.getActiveMipmapLevel(),H=s.state;H.setBlending(on),H.buffers.color.setClear(1,1,1,1),H.buffers.depth.setTest(!0),H.setScissorTest(!1);const X=u!==Ye&&this.type===Ye,J=u===Ye&&this.type!==Ye;for(let R=0,B=b.length;R<B;R++){const $=b[R],G=$.shadow;if(G===void 0){console.warn("THREE.WebGLShadowMap:",$,"has no shadow.");continue}if(G.autoUpdate===!1&&G.needsUpdate===!1)continue;i.copy(G.mapSize);const nt=G.getFrameExtents();if(i.multiply(nt),r.copy(G.mapSize),(i.x>d||i.y>d)&&(i.x>d&&(r.x=Math.floor(d/nt.x),i.x=r.x*nt.x,G.mapSize.x=r.x),i.y>d&&(r.y=Math.floor(d/nt.y),i.y=r.y*nt.y,G.mapSize.y=r.y)),G.map===null||X===!0||J===!0){const Y=this.type!==Ye?{minFilter:xe,magFilter:xe}:{};G.map!==null&&G.map.dispose(),G.map=new bn(i.x,i.y,Y),G.map.texture.name=$.name+".shadowMap",G.camera.updateProjectionMatrix()}s.setRenderTarget(G.map),s.clear();const W=G.getViewportCount();for(let Y=0;Y<W;Y++){const Q=G.getViewport(Y);a.set(r.x*Q.x,r.y*Q.y,r.x*Q.z,r.y*Q.w),H.viewport(a),G.updateMatrices($,Y),n=G.getFrustum(),A(w,L,G.camera,$,this.type)}G.isPointLightShadow!==!0&&this.type===Ye&&E(G,L),G.needsUpdate=!1}u=this.type,p.needsUpdate=!1,s.setRenderTarget(k,y,T)};function E(b,w){const L=t.update(v);f.defines.VSM_SAMPLES!==b.blurSamples&&(f.defines.VSM_SAMPLES=b.blurSamples,m.defines.VSM_SAMPLES=b.blurSamples,f.needsUpdate=!0,m.needsUpdate=!0),b.mapPass===null&&(b.mapPass=new bn(i.x,i.y)),f.uniforms.shadow_pass.value=b.map.texture,f.uniforms.resolution.value=b.mapSize,f.uniforms.radius.value=b.radius,s.setRenderTarget(b.mapPass),s.clear(),s.renderBufferDirect(w,null,L,f,v,null),m.uniforms.shadow_pass.value=b.mapPass.texture,m.uniforms.resolution.value=b.mapSize,m.uniforms.radius.value=b.radius,s.setRenderTarget(b.map),s.clear(),s.renderBufferDirect(w,null,L,m,v,null)}function x(b,w,L,k){let y=null;const T=L.isPointLight===!0?b.customDistanceMaterial:b.customDepthMaterial;if(T!==void 0)y=T;else if(y=L.isPointLight===!0?l:o,s.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const H=y.uuid,X=w.uuid;let J=c[H];J===void 0&&(J={},c[H]=J);let R=J[X];R===void 0&&(R=y.clone(),J[X]=R),y=R}if(y.visible=w.visible,y.wireframe=w.wireframe,k===Ye?y.side=w.shadowSide!==null?w.shadowSide:w.side:y.side=w.shadowSide!==null?w.shadowSide:h[w.side],y.alphaMap=w.alphaMap,y.alphaTest=w.alphaTest,y.map=w.map,y.clipShadows=w.clipShadows,y.clippingPlanes=w.clippingPlanes,y.clipIntersection=w.clipIntersection,y.displacementMap=w.displacementMap,y.displacementScale=w.displacementScale,y.displacementBias=w.displacementBias,y.wireframeLinewidth=w.wireframeLinewidth,y.linewidth=w.linewidth,L.isPointLight===!0&&y.isMeshDistanceMaterial===!0){const H=s.properties.get(y);H.light=L}return y}function A(b,w,L,k,y){if(b.visible===!1)return;if(b.layers.test(w.layers)&&(b.isMesh||b.isLine||b.isPoints)&&(b.castShadow||b.receiveShadow&&y===Ye)&&(!b.frustumCulled||n.intersectsObject(b))){b.modelViewMatrix.multiplyMatrices(L.matrixWorldInverse,b.matrixWorld);const X=t.update(b),J=b.material;if(Array.isArray(J)){const R=X.groups;for(let B=0,$=R.length;B<$;B++){const G=R[B],nt=J[G.materialIndex];if(nt&&nt.visible){const W=x(b,nt,k,y);b.onBeforeShadow(s,b,w,L,X,W,G),s.renderBufferDirect(L,null,X,W,b,G),b.onAfterShadow(s,b,w,L,X,W,G)}}}else if(J.visible){const R=x(b,J,k,y);b.onBeforeShadow(s,b,w,L,X,R,null),s.renderBufferDirect(L,null,X,R,b,null),b.onAfterShadow(s,b,w,L,X,R,null)}}const H=b.children;for(let X=0,J=H.length;X<J;X++)A(H[X],w,L,k,y)}}function Xf(s,t,e){const n=e.isWebGL2;function i(){let C=!1;const lt=new Yt;let K=null;const z=new Yt(0,0,0,0);return{setMask:function(it){K!==it&&!C&&(s.colorMask(it,it,it,it),K=it)},setLocked:function(it){C=it},setClear:function(it,xt,zt,ie,ge){ge===!0&&(it*=ie,xt*=ie,zt*=ie),lt.set(it,xt,zt,ie),z.equals(lt)===!1&&(s.clearColor(it,xt,zt,ie),z.copy(lt))},reset:function(){C=!1,K=null,z.set(-1,0,0,0)}}}function r(){let C=!1,lt=null,K=null,z=null;return{setTest:function(it){it?Tt(s.DEPTH_TEST):bt(s.DEPTH_TEST)},setMask:function(it){lt!==it&&!C&&(s.depthMask(it),lt=it)},setFunc:function(it){if(K!==it){switch(it){case pl:s.depthFunc(s.NEVER);break;case ml:s.depthFunc(s.ALWAYS);break;case gl:s.depthFunc(s.LESS);break;case Hi:s.depthFunc(s.LEQUAL);break;case vl:s.depthFunc(s.EQUAL);break;case _l:s.depthFunc(s.GEQUAL);break;case xl:s.depthFunc(s.GREATER);break;case yl:s.depthFunc(s.NOTEQUAL);break;default:s.depthFunc(s.LEQUAL)}K=it}},setLocked:function(it){C=it},setClear:function(it){z!==it&&(s.clearDepth(it),z=it)},reset:function(){C=!1,lt=null,K=null,z=null}}}function a(){let C=!1,lt=null,K=null,z=null,it=null,xt=null,zt=null,ie=null,ge=null;return{setTest:function($t){C||($t?Tt(s.STENCIL_TEST):bt(s.STENCIL_TEST))},setMask:function($t){lt!==$t&&!C&&(s.stencilMask($t),lt=$t)},setFunc:function($t,ve,Ve){(K!==$t||z!==ve||it!==Ve)&&(s.stencilFunc($t,ve,Ve),K=$t,z=ve,it=Ve)},setOp:function($t,ve,Ve){(xt!==$t||zt!==ve||ie!==Ve)&&(s.stencilOp($t,ve,Ve),xt=$t,zt=ve,ie=Ve)},setLocked:function($t){C=$t},setClear:function($t){ge!==$t&&(s.clearStencil($t),ge=$t)},reset:function(){C=!1,lt=null,K=null,z=null,it=null,xt=null,zt=null,ie=null,ge=null}}}const o=new i,l=new r,c=new a,d=new WeakMap,h=new WeakMap;let f={},m={},g=new WeakMap,v=[],p=null,u=!1,E=null,x=null,A=null,b=null,w=null,L=null,k=null,y=new Ot(0,0,0),T=0,H=!1,X=null,J=null,R=null,B=null,$=null;const G=s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let nt=!1,W=0;const Y=s.getParameter(s.VERSION);Y.indexOf("WebGL")!==-1?(W=parseFloat(/^WebGL (\d)/.exec(Y)[1]),nt=W>=1):Y.indexOf("OpenGL ES")!==-1&&(W=parseFloat(/^OpenGL ES (\d)/.exec(Y)[1]),nt=W>=2);let Q=null,ut={};const V=s.getParameter(s.SCISSOR_BOX),q=s.getParameter(s.VIEWPORT),at=new Yt().fromArray(V),pt=new Yt().fromArray(q);function mt(C,lt,K,z){const it=new Uint8Array(4),xt=s.createTexture();s.bindTexture(C,xt),s.texParameteri(C,s.TEXTURE_MIN_FILTER,s.NEAREST),s.texParameteri(C,s.TEXTURE_MAG_FILTER,s.NEAREST);for(let zt=0;zt<K;zt++)n&&(C===s.TEXTURE_3D||C===s.TEXTURE_2D_ARRAY)?s.texImage3D(lt,0,s.RGBA,1,1,z,0,s.RGBA,s.UNSIGNED_BYTE,it):s.texImage2D(lt+zt,0,s.RGBA,1,1,0,s.RGBA,s.UNSIGNED_BYTE,it);return xt}const Lt={};Lt[s.TEXTURE_2D]=mt(s.TEXTURE_2D,s.TEXTURE_2D,1),Lt[s.TEXTURE_CUBE_MAP]=mt(s.TEXTURE_CUBE_MAP,s.TEXTURE_CUBE_MAP_POSITIVE_X,6),n&&(Lt[s.TEXTURE_2D_ARRAY]=mt(s.TEXTURE_2D_ARRAY,s.TEXTURE_2D_ARRAY,1,1),Lt[s.TEXTURE_3D]=mt(s.TEXTURE_3D,s.TEXTURE_3D,1,1)),o.setClear(0,0,0,1),l.setClear(1),c.setClear(0),Tt(s.DEPTH_TEST),l.setFunc(Hi),Ut(!1),Ct(mr),Tt(s.CULL_FACE),yt(on);function Tt(C){f[C]!==!0&&(s.enable(C),f[C]=!0)}function bt(C){f[C]!==!1&&(s.disable(C),f[C]=!1)}function It(C,lt){return m[C]!==lt?(s.bindFramebuffer(C,lt),m[C]=lt,n&&(C===s.DRAW_FRAMEBUFFER&&(m[s.FRAMEBUFFER]=lt),C===s.FRAMEBUFFER&&(m[s.DRAW_FRAMEBUFFER]=lt)),!0):!1}function D(C,lt){let K=v,z=!1;if(C)if(K=g.get(lt),K===void 0&&(K=[],g.set(lt,K)),C.isWebGLMultipleRenderTargets){const it=C.texture;if(K.length!==it.length||K[0]!==s.COLOR_ATTACHMENT0){for(let xt=0,zt=it.length;xt<zt;xt++)K[xt]=s.COLOR_ATTACHMENT0+xt;K.length=it.length,z=!0}}else K[0]!==s.COLOR_ATTACHMENT0&&(K[0]=s.COLOR_ATTACHMENT0,z=!0);else K[0]!==s.BACK&&(K[0]=s.BACK,z=!0);z&&(e.isWebGL2?s.drawBuffers(K):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(K))}function me(C){return p!==C?(s.useProgram(C),p=C,!0):!1}const gt={[xn]:s.FUNC_ADD,[Qo]:s.FUNC_SUBTRACT,[tl]:s.FUNC_REVERSE_SUBTRACT};if(n)gt[xr]=s.MIN,gt[yr]=s.MAX;else{const C=t.get("EXT_blend_minmax");C!==null&&(gt[xr]=C.MIN_EXT,gt[yr]=C.MAX_EXT)}const Bt={[el]:s.ZERO,[nl]:s.ONE,[il]:s.SRC_COLOR,[Vs]:s.SRC_ALPHA,[cl]:s.SRC_ALPHA_SATURATE,[ol]:s.DST_COLOR,[rl]:s.DST_ALPHA,[sl]:s.ONE_MINUS_SRC_COLOR,[zs]:s.ONE_MINUS_SRC_ALPHA,[ll]:s.ONE_MINUS_DST_COLOR,[al]:s.ONE_MINUS_DST_ALPHA,[dl]:s.CONSTANT_COLOR,[ul]:s.ONE_MINUS_CONSTANT_COLOR,[hl]:s.CONSTANT_ALPHA,[fl]:s.ONE_MINUS_CONSTANT_ALPHA};function yt(C,lt,K,z,it,xt,zt,ie,ge,$t){if(C===on){u===!0&&(bt(s.BLEND),u=!1);return}if(u===!1&&(Tt(s.BLEND),u=!0),C!==Jo){if(C!==E||$t!==H){if((x!==xn||w!==xn)&&(s.blendEquation(s.FUNC_ADD),x=xn,w=xn),$t)switch(C){case Gn:s.blendFuncSeparate(s.ONE,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE_MINUS_SRC_ALPHA);break;case gr:s.blendFunc(s.ONE,s.ONE);break;case vr:s.blendFuncSeparate(s.ZERO,s.ONE_MINUS_SRC_COLOR,s.ZERO,s.ONE);break;case _r:s.blendFuncSeparate(s.ZERO,s.SRC_COLOR,s.ZERO,s.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}else switch(C){case Gn:s.blendFuncSeparate(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE_MINUS_SRC_ALPHA);break;case gr:s.blendFunc(s.SRC_ALPHA,s.ONE);break;case vr:s.blendFuncSeparate(s.ZERO,s.ONE_MINUS_SRC_COLOR,s.ZERO,s.ONE);break;case _r:s.blendFunc(s.ZERO,s.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}A=null,b=null,L=null,k=null,y.set(0,0,0),T=0,E=C,H=$t}return}it=it||lt,xt=xt||K,zt=zt||z,(lt!==x||it!==w)&&(s.blendEquationSeparate(gt[lt],gt[it]),x=lt,w=it),(K!==A||z!==b||xt!==L||zt!==k)&&(s.blendFuncSeparate(Bt[K],Bt[z],Bt[xt],Bt[zt]),A=K,b=z,L=xt,k=zt),(ie.equals(y)===!1||ge!==T)&&(s.blendColor(ie.r,ie.g,ie.b,ge),y.copy(ie),T=ge),E=C,H=!1}function jt(C,lt){C.side===je?bt(s.CULL_FACE):Tt(s.CULL_FACE);let K=C.side===Se;lt&&(K=!K),Ut(K),C.blending===Gn&&C.transparent===!1?yt(on):yt(C.blending,C.blendEquation,C.blendSrc,C.blendDst,C.blendEquationAlpha,C.blendSrcAlpha,C.blendDstAlpha,C.blendColor,C.blendAlpha,C.premultipliedAlpha),l.setFunc(C.depthFunc),l.setTest(C.depthTest),l.setMask(C.depthWrite),o.setMask(C.colorWrite);const z=C.stencilWrite;c.setTest(z),z&&(c.setMask(C.stencilWriteMask),c.setFunc(C.stencilFunc,C.stencilRef,C.stencilFuncMask),c.setOp(C.stencilFail,C.stencilZFail,C.stencilZPass)),ae(C.polygonOffset,C.polygonOffsetFactor,C.polygonOffsetUnits),C.alphaToCoverage===!0?Tt(s.SAMPLE_ALPHA_TO_COVERAGE):bt(s.SAMPLE_ALPHA_TO_COVERAGE)}function Ut(C){X!==C&&(C?s.frontFace(s.CW):s.frontFace(s.CCW),X=C)}function Ct(C){C!==Ko?(Tt(s.CULL_FACE),C!==J&&(C===mr?s.cullFace(s.BACK):C===Zo?s.cullFace(s.FRONT):s.cullFace(s.FRONT_AND_BACK))):bt(s.CULL_FACE),J=C}function Gt(C){C!==R&&(nt&&s.lineWidth(C),R=C)}function ae(C,lt,K){C?(Tt(s.POLYGON_OFFSET_FILL),(B!==lt||$!==K)&&(s.polygonOffset(lt,K),B=lt,$=K)):bt(s.POLYGON_OFFSET_FILL)}function oe(C){C?Tt(s.SCISSOR_TEST):bt(s.SCISSOR_TEST)}function S(C){C===void 0&&(C=s.TEXTURE0+G-1),Q!==C&&(s.activeTexture(C),Q=C)}function _(C,lt,K){K===void 0&&(Q===null?K=s.TEXTURE0+G-1:K=Q);let z=ut[K];z===void 0&&(z={type:void 0,texture:void 0},ut[K]=z),(z.type!==C||z.texture!==lt)&&(Q!==K&&(s.activeTexture(K),Q=K),s.bindTexture(C,lt||Lt[C]),z.type=C,z.texture=lt)}function U(){const C=ut[Q];C!==void 0&&C.type!==void 0&&(s.bindTexture(C.type,null),C.type=void 0,C.texture=void 0)}function tt(){try{s.compressedTexImage2D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function j(){try{s.compressedTexImage3D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function et(){try{s.texSubImage2D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function ht(){try{s.texSubImage3D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function st(){try{s.compressedTexSubImage2D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function ot(){try{s.compressedTexSubImage3D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function Mt(){try{s.texStorage2D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function Ht(){try{s.texStorage3D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function Z(){try{s.texImage2D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function Wt(){try{s.texImage3D.apply(s,arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function At(C){at.equals(C)===!1&&(s.scissor(C.x,C.y,C.z,C.w),at.copy(C))}function St(C){pt.equals(C)===!1&&(s.viewport(C.x,C.y,C.z,C.w),pt.copy(C))}function vt(C,lt){let K=h.get(lt);K===void 0&&(K=new WeakMap,h.set(lt,K));let z=K.get(C);z===void 0&&(z=s.getUniformBlockIndex(lt,C.name),K.set(C,z))}function dt(C,lt){const z=h.get(lt).get(C);d.get(lt)!==z&&(s.uniformBlockBinding(lt,z,C.__bindingPointIndex),d.set(lt,z))}function Vt(){s.disable(s.BLEND),s.disable(s.CULL_FACE),s.disable(s.DEPTH_TEST),s.disable(s.POLYGON_OFFSET_FILL),s.disable(s.SCISSOR_TEST),s.disable(s.STENCIL_TEST),s.disable(s.SAMPLE_ALPHA_TO_COVERAGE),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.ONE,s.ZERO),s.blendFuncSeparate(s.ONE,s.ZERO,s.ONE,s.ZERO),s.blendColor(0,0,0,0),s.colorMask(!0,!0,!0,!0),s.clearColor(0,0,0,0),s.depthMask(!0),s.depthFunc(s.LESS),s.clearDepth(1),s.stencilMask(4294967295),s.stencilFunc(s.ALWAYS,0,4294967295),s.stencilOp(s.KEEP,s.KEEP,s.KEEP),s.clearStencil(0),s.cullFace(s.BACK),s.frontFace(s.CCW),s.polygonOffset(0,0),s.activeTexture(s.TEXTURE0),s.bindFramebuffer(s.FRAMEBUFFER,null),n===!0&&(s.bindFramebuffer(s.DRAW_FRAMEBUFFER,null),s.bindFramebuffer(s.READ_FRAMEBUFFER,null)),s.useProgram(null),s.lineWidth(1),s.scissor(0,0,s.canvas.width,s.canvas.height),s.viewport(0,0,s.canvas.width,s.canvas.height),f={},Q=null,ut={},m={},g=new WeakMap,v=[],p=null,u=!1,E=null,x=null,A=null,b=null,w=null,L=null,k=null,y=new Ot(0,0,0),T=0,H=!1,X=null,J=null,R=null,B=null,$=null,at.set(0,0,s.canvas.width,s.canvas.height),pt.set(0,0,s.canvas.width,s.canvas.height),o.reset(),l.reset(),c.reset()}return{buffers:{color:o,depth:l,stencil:c},enable:Tt,disable:bt,bindFramebuffer:It,drawBuffers:D,useProgram:me,setBlending:yt,setMaterial:jt,setFlipSided:Ut,setCullFace:Ct,setLineWidth:Gt,setPolygonOffset:ae,setScissorTest:oe,activeTexture:S,bindTexture:_,unbindTexture:U,compressedTexImage2D:tt,compressedTexImage3D:j,texImage2D:Z,texImage3D:Wt,updateUBOMapping:vt,uniformBlockBinding:dt,texStorage2D:Mt,texStorage3D:Ht,texSubImage2D:et,texSubImage3D:ht,compressedTexSubImage2D:st,compressedTexSubImage3D:ot,scissor:At,viewport:St,reset:Vt}}function $f(s,t,e,n,i,r,a){const o=i.isWebGL2,l=i.maxTextures,c=i.maxCubemapSize,d=i.maxTextureSize,h=i.maxSamples,f=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,m=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),g=new WeakMap;let v;const p=new WeakMap;let u=!1;try{u=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(S){}function E(S,_){return u?new OffscreenCanvas(S,_):qi("canvas")}function x(S,_,U,tt){let j=1;if((S.width>tt||S.height>tt)&&(j=tt/Math.max(S.width,S.height)),j<1||_===!0)if(typeof HTMLImageElement<"u"&&S instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&S instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&S instanceof ImageBitmap){const et=_?qs:Math.floor,ht=et(j*S.width),st=et(j*S.height);v===void 0&&(v=E(ht,st));const ot=U?E(ht,st):v;return ot.width=ht,ot.height=st,ot.getContext("2d").drawImage(S,0,0,ht,st),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+S.width+"x"+S.height+") to ("+ht+"x"+st+")."),ot}else return"data"in S&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+S.width+"x"+S.height+")."),S;return S}function A(S){return Kr(S.width)&&Kr(S.height)}function b(S){return o?!1:S.wrapS!==Fe||S.wrapT!==Fe||S.minFilter!==xe&&S.minFilter!==Le}function w(S,_){return S.generateMipmaps&&_&&S.minFilter!==xe&&S.minFilter!==Le}function L(S){s.generateMipmap(S)}function k(S,_,U,tt,j=!1){if(o===!1)return _;if(S!==null){if(s[S]!==void 0)return s[S];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+S+"'")}let et=_;if(_===s.RED&&(U===s.FLOAT&&(et=s.R32F),U===s.HALF_FLOAT&&(et=s.R16F),U===s.UNSIGNED_BYTE&&(et=s.R8)),_===s.RED_INTEGER&&(U===s.UNSIGNED_BYTE&&(et=s.R8UI),U===s.UNSIGNED_SHORT&&(et=s.R16UI),U===s.UNSIGNED_INT&&(et=s.R32UI),U===s.BYTE&&(et=s.R8I),U===s.SHORT&&(et=s.R16I),U===s.INT&&(et=s.R32I)),_===s.RG&&(U===s.FLOAT&&(et=s.RG32F),U===s.HALF_FLOAT&&(et=s.RG16F),U===s.UNSIGNED_BYTE&&(et=s.RG8)),_===s.RGBA){const ht=j?Gi:Xt.getTransfer(tt);U===s.FLOAT&&(et=s.RGBA32F),U===s.HALF_FLOAT&&(et=s.RGBA16F),U===s.UNSIGNED_BYTE&&(et=ht===qt?s.SRGB8_ALPHA8:s.RGBA8),U===s.UNSIGNED_SHORT_4_4_4_4&&(et=s.RGBA4),U===s.UNSIGNED_SHORT_5_5_5_1&&(et=s.RGB5_A1)}return(et===s.R16F||et===s.R32F||et===s.RG16F||et===s.RG32F||et===s.RGBA16F||et===s.RGBA32F)&&t.get("EXT_color_buffer_float"),et}function y(S,_,U){return w(S,U)===!0||S.isFramebufferTexture&&S.minFilter!==xe&&S.minFilter!==Le?Math.log2(Math.max(_.width,_.height))+1:S.mipmaps!==void 0&&S.mipmaps.length>0?S.mipmaps.length:S.isCompressedTexture&&Array.isArray(S.image)?_.mipmaps.length:1}function T(S){return S===xe||S===Mr||S===is?s.NEAREST:s.LINEAR}function H(S){const _=S.target;_.removeEventListener("dispose",H),J(_),_.isVideoTexture&&g.delete(_)}function X(S){const _=S.target;_.removeEventListener("dispose",X),B(_)}function J(S){const _=n.get(S);if(_.__webglInit===void 0)return;const U=S.source,tt=p.get(U);if(tt){const j=tt[_.__cacheKey];j.usedTimes--,j.usedTimes===0&&R(S),Object.keys(tt).length===0&&p.delete(U)}n.remove(S)}function R(S){const _=n.get(S);s.deleteTexture(_.__webglTexture);const U=S.source,tt=p.get(U);delete tt[_.__cacheKey],a.memory.textures--}function B(S){const _=S.texture,U=n.get(S),tt=n.get(_);if(tt.__webglTexture!==void 0&&(s.deleteTexture(tt.__webglTexture),a.memory.textures--),S.depthTexture&&S.depthTexture.dispose(),S.isWebGLCubeRenderTarget)for(let j=0;j<6;j++){if(Array.isArray(U.__webglFramebuffer[j]))for(let et=0;et<U.__webglFramebuffer[j].length;et++)s.deleteFramebuffer(U.__webglFramebuffer[j][et]);else s.deleteFramebuffer(U.__webglFramebuffer[j]);U.__webglDepthbuffer&&s.deleteRenderbuffer(U.__webglDepthbuffer[j])}else{if(Array.isArray(U.__webglFramebuffer))for(let j=0;j<U.__webglFramebuffer.length;j++)s.deleteFramebuffer(U.__webglFramebuffer[j]);else s.deleteFramebuffer(U.__webglFramebuffer);if(U.__webglDepthbuffer&&s.deleteRenderbuffer(U.__webglDepthbuffer),U.__webglMultisampledFramebuffer&&s.deleteFramebuffer(U.__webglMultisampledFramebuffer),U.__webglColorRenderbuffer)for(let j=0;j<U.__webglColorRenderbuffer.length;j++)U.__webglColorRenderbuffer[j]&&s.deleteRenderbuffer(U.__webglColorRenderbuffer[j]);U.__webglDepthRenderbuffer&&s.deleteRenderbuffer(U.__webglDepthRenderbuffer)}if(S.isWebGLMultipleRenderTargets)for(let j=0,et=_.length;j<et;j++){const ht=n.get(_[j]);ht.__webglTexture&&(s.deleteTexture(ht.__webglTexture),a.memory.textures--),n.remove(_[j])}n.remove(_),n.remove(S)}let $=0;function G(){$=0}function nt(){const S=$;return S>=l&&console.warn("THREE.WebGLTextures: Trying to use "+S+" texture units while this GPU supports only "+l),$+=1,S}function W(S){const _=[];return _.push(S.wrapS),_.push(S.wrapT),_.push(S.wrapR||0),_.push(S.magFilter),_.push(S.minFilter),_.push(S.anisotropy),_.push(S.internalFormat),_.push(S.format),_.push(S.type),_.push(S.generateMipmaps),_.push(S.premultiplyAlpha),_.push(S.flipY),_.push(S.unpackAlignment),_.push(S.colorSpace),_.join()}function Y(S,_){const U=n.get(S);if(S.isVideoTexture&&ae(S),S.isRenderTargetTexture===!1&&S.version>0&&U.__version!==S.version){const tt=S.image;if(tt===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(tt.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Tt(U,S,_);return}}e.bindTexture(s.TEXTURE_2D,U.__webglTexture,s.TEXTURE0+_)}function Q(S,_){const U=n.get(S);if(S.version>0&&U.__version!==S.version){Tt(U,S,_);return}e.bindTexture(s.TEXTURE_2D_ARRAY,U.__webglTexture,s.TEXTURE0+_)}function ut(S,_){const U=n.get(S);if(S.version>0&&U.__version!==S.version){Tt(U,S,_);return}e.bindTexture(s.TEXTURE_3D,U.__webglTexture,s.TEXTURE0+_)}function V(S,_){const U=n.get(S);if(S.version>0&&U.__version!==S.version){bt(U,S,_);return}e.bindTexture(s.TEXTURE_CUBE_MAP,U.__webglTexture,s.TEXTURE0+_)}const q={[Gs]:s.REPEAT,[Fe]:s.CLAMP_TO_EDGE,[Ws]:s.MIRRORED_REPEAT},at={[xe]:s.NEAREST,[Mr]:s.NEAREST_MIPMAP_NEAREST,[is]:s.NEAREST_MIPMAP_LINEAR,[Le]:s.LINEAR,[Cl]:s.LINEAR_MIPMAP_NEAREST,[ci]:s.LINEAR_MIPMAP_LINEAR},pt={[zl]:s.NEVER,[$l]:s.ALWAYS,[kl]:s.LESS,[no]:s.LEQUAL,[Hl]:s.EQUAL,[Xl]:s.GEQUAL,[Gl]:s.GREATER,[Wl]:s.NOTEQUAL};function mt(S,_,U){if(U?(s.texParameteri(S,s.TEXTURE_WRAP_S,q[_.wrapS]),s.texParameteri(S,s.TEXTURE_WRAP_T,q[_.wrapT]),(S===s.TEXTURE_3D||S===s.TEXTURE_2D_ARRAY)&&s.texParameteri(S,s.TEXTURE_WRAP_R,q[_.wrapR]),s.texParameteri(S,s.TEXTURE_MAG_FILTER,at[_.magFilter]),s.texParameteri(S,s.TEXTURE_MIN_FILTER,at[_.minFilter])):(s.texParameteri(S,s.TEXTURE_WRAP_S,s.CLAMP_TO_EDGE),s.texParameteri(S,s.TEXTURE_WRAP_T,s.CLAMP_TO_EDGE),(S===s.TEXTURE_3D||S===s.TEXTURE_2D_ARRAY)&&s.texParameteri(S,s.TEXTURE_WRAP_R,s.CLAMP_TO_EDGE),(_.wrapS!==Fe||_.wrapT!==Fe)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),s.texParameteri(S,s.TEXTURE_MAG_FILTER,T(_.magFilter)),s.texParameteri(S,s.TEXTURE_MIN_FILTER,T(_.minFilter)),_.minFilter!==xe&&_.minFilter!==Le&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),_.compareFunction&&(s.texParameteri(S,s.TEXTURE_COMPARE_MODE,s.COMPARE_REF_TO_TEXTURE),s.texParameteri(S,s.TEXTURE_COMPARE_FUNC,pt[_.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){const tt=t.get("EXT_texture_filter_anisotropic");if(_.magFilter===xe||_.minFilter!==is&&_.minFilter!==ci||_.type===an&&t.has("OES_texture_float_linear")===!1||o===!1&&_.type===di&&t.has("OES_texture_half_float_linear")===!1)return;(_.anisotropy>1||n.get(_).__currentAnisotropy)&&(s.texParameterf(S,tt.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(_.anisotropy,i.getMaxAnisotropy())),n.get(_).__currentAnisotropy=_.anisotropy)}}function Lt(S,_){let U=!1;S.__webglInit===void 0&&(S.__webglInit=!0,_.addEventListener("dispose",H));const tt=_.source;let j=p.get(tt);j===void 0&&(j={},p.set(tt,j));const et=W(_);if(et!==S.__cacheKey){j[et]===void 0&&(j[et]={texture:s.createTexture(),usedTimes:0},a.memory.textures++,U=!0),j[et].usedTimes++;const ht=j[S.__cacheKey];ht!==void 0&&(j[S.__cacheKey].usedTimes--,ht.usedTimes===0&&R(_)),S.__cacheKey=et,S.__webglTexture=j[et].texture}return U}function Tt(S,_,U){let tt=s.TEXTURE_2D;(_.isDataArrayTexture||_.isCompressedArrayTexture)&&(tt=s.TEXTURE_2D_ARRAY),_.isData3DTexture&&(tt=s.TEXTURE_3D);const j=Lt(S,_),et=_.source;e.bindTexture(tt,S.__webglTexture,s.TEXTURE0+U);const ht=n.get(et);if(et.version!==ht.__version||j===!0){e.activeTexture(s.TEXTURE0+U);const st=Xt.getPrimaries(Xt.workingColorSpace),ot=_.colorSpace===Pe?null:Xt.getPrimaries(_.colorSpace),Mt=_.colorSpace===Pe||st===ot?s.NONE:s.BROWSER_DEFAULT_WEBGL;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,_.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,_.unpackAlignment),s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL,Mt);const Ht=b(_)&&A(_.image)===!1;let Z=x(_.image,Ht,!1,d);Z=oe(_,Z);const Wt=A(Z)||o,At=r.convert(_.format,_.colorSpace);let St=r.convert(_.type),vt=k(_.internalFormat,At,St,_.colorSpace,_.isVideoTexture);mt(tt,_,Wt);let dt;const Vt=_.mipmaps,C=o&&_.isVideoTexture!==!0&&vt!==Qa,lt=ht.__version===void 0||j===!0,K=y(_,Z,Wt);if(_.isDepthTexture)vt=s.DEPTH_COMPONENT,o?_.type===an?vt=s.DEPTH_COMPONENT32F:_.type===rn?vt=s.DEPTH_COMPONENT24:_.type===Mn?vt=s.DEPTH24_STENCIL8:vt=s.DEPTH_COMPONENT16:_.type===an&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),_.format===Sn&&vt===s.DEPTH_COMPONENT&&_.type!==Js&&_.type!==rn&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),_.type=rn,St=r.convert(_.type)),_.format===qn&&vt===s.DEPTH_COMPONENT&&(vt=s.DEPTH_STENCIL,_.type!==Mn&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),_.type=Mn,St=r.convert(_.type))),lt&&(C?e.texStorage2D(s.TEXTURE_2D,1,vt,Z.width,Z.height):e.texImage2D(s.TEXTURE_2D,0,vt,Z.width,Z.height,0,At,St,null));else if(_.isDataTexture)if(Vt.length>0&&Wt){C&&lt&&e.texStorage2D(s.TEXTURE_2D,K,vt,Vt[0].width,Vt[0].height);for(let z=0,it=Vt.length;z<it;z++)dt=Vt[z],C?e.texSubImage2D(s.TEXTURE_2D,z,0,0,dt.width,dt.height,At,St,dt.data):e.texImage2D(s.TEXTURE_2D,z,vt,dt.width,dt.height,0,At,St,dt.data);_.generateMipmaps=!1}else C?(lt&&e.texStorage2D(s.TEXTURE_2D,K,vt,Z.width,Z.height),e.texSubImage2D(s.TEXTURE_2D,0,0,0,Z.width,Z.height,At,St,Z.data)):e.texImage2D(s.TEXTURE_2D,0,vt,Z.width,Z.height,0,At,St,Z.data);else if(_.isCompressedTexture)if(_.isCompressedArrayTexture){C&&lt&&e.texStorage3D(s.TEXTURE_2D_ARRAY,K,vt,Vt[0].width,Vt[0].height,Z.depth);for(let z=0,it=Vt.length;z<it;z++)dt=Vt[z],_.format!==Oe?At!==null?C?e.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,z,0,0,0,dt.width,dt.height,Z.depth,At,dt.data,0,0):e.compressedTexImage3D(s.TEXTURE_2D_ARRAY,z,vt,dt.width,dt.height,Z.depth,0,dt.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C?e.texSubImage3D(s.TEXTURE_2D_ARRAY,z,0,0,0,dt.width,dt.height,Z.depth,At,St,dt.data):e.texImage3D(s.TEXTURE_2D_ARRAY,z,vt,dt.width,dt.height,Z.depth,0,At,St,dt.data)}else{C&&lt&&e.texStorage2D(s.TEXTURE_2D,K,vt,Vt[0].width,Vt[0].height);for(let z=0,it=Vt.length;z<it;z++)dt=Vt[z],_.format!==Oe?At!==null?C?e.compressedTexSubImage2D(s.TEXTURE_2D,z,0,0,dt.width,dt.height,At,dt.data):e.compressedTexImage2D(s.TEXTURE_2D,z,vt,dt.width,dt.height,0,dt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C?e.texSubImage2D(s.TEXTURE_2D,z,0,0,dt.width,dt.height,At,St,dt.data):e.texImage2D(s.TEXTURE_2D,z,vt,dt.width,dt.height,0,At,St,dt.data)}else if(_.isDataArrayTexture)C?(lt&&e.texStorage3D(s.TEXTURE_2D_ARRAY,K,vt,Z.width,Z.height,Z.depth),e.texSubImage3D(s.TEXTURE_2D_ARRAY,0,0,0,0,Z.width,Z.height,Z.depth,At,St,Z.data)):e.texImage3D(s.TEXTURE_2D_ARRAY,0,vt,Z.width,Z.height,Z.depth,0,At,St,Z.data);else if(_.isData3DTexture)C?(lt&&e.texStorage3D(s.TEXTURE_3D,K,vt,Z.width,Z.height,Z.depth),e.texSubImage3D(s.TEXTURE_3D,0,0,0,0,Z.width,Z.height,Z.depth,At,St,Z.data)):e.texImage3D(s.TEXTURE_3D,0,vt,Z.width,Z.height,Z.depth,0,At,St,Z.data);else if(_.isFramebufferTexture){if(lt)if(C)e.texStorage2D(s.TEXTURE_2D,K,vt,Z.width,Z.height);else{let z=Z.width,it=Z.height;for(let xt=0;xt<K;xt++)e.texImage2D(s.TEXTURE_2D,xt,vt,z,it,0,At,St,null),z>>=1,it>>=1}}else if(Vt.length>0&&Wt){C&&lt&&e.texStorage2D(s.TEXTURE_2D,K,vt,Vt[0].width,Vt[0].height);for(let z=0,it=Vt.length;z<it;z++)dt=Vt[z],C?e.texSubImage2D(s.TEXTURE_2D,z,0,0,At,St,dt):e.texImage2D(s.TEXTURE_2D,z,vt,At,St,dt);_.generateMipmaps=!1}else C?(lt&&e.texStorage2D(s.TEXTURE_2D,K,vt,Z.width,Z.height),e.texSubImage2D(s.TEXTURE_2D,0,0,0,At,St,Z)):e.texImage2D(s.TEXTURE_2D,0,vt,At,St,Z);w(_,Wt)&&L(tt),ht.__version=et.version,_.onUpdate&&_.onUpdate(_)}S.__version=_.version}function bt(S,_,U){if(_.image.length!==6)return;const tt=Lt(S,_),j=_.source;e.bindTexture(s.TEXTURE_CUBE_MAP,S.__webglTexture,s.TEXTURE0+U);const et=n.get(j);if(j.version!==et.__version||tt===!0){e.activeTexture(s.TEXTURE0+U);const ht=Xt.getPrimaries(Xt.workingColorSpace),st=_.colorSpace===Pe?null:Xt.getPrimaries(_.colorSpace),ot=_.colorSpace===Pe||ht===st?s.NONE:s.BROWSER_DEFAULT_WEBGL;s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,_.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,_.unpackAlignment),s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL,ot);const Mt=_.isCompressedTexture||_.image[0].isCompressedTexture,Ht=_.image[0]&&_.image[0].isDataTexture,Z=[];for(let z=0;z<6;z++)!Mt&&!Ht?Z[z]=x(_.image[z],!1,!0,c):Z[z]=Ht?_.image[z].image:_.image[z],Z[z]=oe(_,Z[z]);const Wt=Z[0],At=A(Wt)||o,St=r.convert(_.format,_.colorSpace),vt=r.convert(_.type),dt=k(_.internalFormat,St,vt,_.colorSpace),Vt=o&&_.isVideoTexture!==!0,C=et.__version===void 0||tt===!0;let lt=y(_,Wt,At);mt(s.TEXTURE_CUBE_MAP,_,At);let K;if(Mt){Vt&&C&&e.texStorage2D(s.TEXTURE_CUBE_MAP,lt,dt,Wt.width,Wt.height);for(let z=0;z<6;z++){K=Z[z].mipmaps;for(let it=0;it<K.length;it++){const xt=K[it];_.format!==Oe?St!==null?Vt?e.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it,0,0,xt.width,xt.height,St,xt.data):e.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it,dt,xt.width,xt.height,0,xt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Vt?e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it,0,0,xt.width,xt.height,St,vt,xt.data):e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it,dt,xt.width,xt.height,0,St,vt,xt.data)}}}else{K=_.mipmaps,Vt&&C&&(K.length>0&&lt++,e.texStorage2D(s.TEXTURE_CUBE_MAP,lt,dt,Z[0].width,Z[0].height));for(let z=0;z<6;z++)if(Ht){Vt?e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,0,0,0,Z[z].width,Z[z].height,St,vt,Z[z].data):e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,0,dt,Z[z].width,Z[z].height,0,St,vt,Z[z].data);for(let it=0;it<K.length;it++){const zt=K[it].image[z].image;Vt?e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it+1,0,0,zt.width,zt.height,St,vt,zt.data):e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it+1,dt,zt.width,zt.height,0,St,vt,zt.data)}}else{Vt?e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,0,0,0,St,vt,Z[z]):e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,0,dt,St,vt,Z[z]);for(let it=0;it<K.length;it++){const xt=K[it];Vt?e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it+1,0,0,St,vt,xt.image[z]):e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+z,it+1,dt,St,vt,xt.image[z])}}}w(_,At)&&L(s.TEXTURE_CUBE_MAP),et.__version=j.version,_.onUpdate&&_.onUpdate(_)}S.__version=_.version}function It(S,_,U,tt,j,et){const ht=r.convert(U.format,U.colorSpace),st=r.convert(U.type),ot=k(U.internalFormat,ht,st,U.colorSpace);if(!n.get(_).__hasExternalTextures){const Ht=Math.max(1,_.width>>et),Z=Math.max(1,_.height>>et);j===s.TEXTURE_3D||j===s.TEXTURE_2D_ARRAY?e.texImage3D(j,et,ot,Ht,Z,_.depth,0,ht,st,null):e.texImage2D(j,et,ot,Ht,Z,0,ht,st,null)}e.bindFramebuffer(s.FRAMEBUFFER,S),Gt(_)?f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,tt,j,n.get(U).__webglTexture,0,Ct(_)):(j===s.TEXTURE_2D||j>=s.TEXTURE_CUBE_MAP_POSITIVE_X&&j<=s.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&s.framebufferTexture2D(s.FRAMEBUFFER,tt,j,n.get(U).__webglTexture,et),e.bindFramebuffer(s.FRAMEBUFFER,null)}function D(S,_,U){if(s.bindRenderbuffer(s.RENDERBUFFER,S),_.depthBuffer&&!_.stencilBuffer){let tt=o===!0?s.DEPTH_COMPONENT24:s.DEPTH_COMPONENT16;if(U||Gt(_)){const j=_.depthTexture;j&&j.isDepthTexture&&(j.type===an?tt=s.DEPTH_COMPONENT32F:j.type===rn&&(tt=s.DEPTH_COMPONENT24));const et=Ct(_);Gt(_)?f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER,et,tt,_.width,_.height):s.renderbufferStorageMultisample(s.RENDERBUFFER,et,tt,_.width,_.height)}else s.renderbufferStorage(s.RENDERBUFFER,tt,_.width,_.height);s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.RENDERBUFFER,S)}else if(_.depthBuffer&&_.stencilBuffer){const tt=Ct(_);U&&Gt(_)===!1?s.renderbufferStorageMultisample(s.RENDERBUFFER,tt,s.DEPTH24_STENCIL8,_.width,_.height):Gt(_)?f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER,tt,s.DEPTH24_STENCIL8,_.width,_.height):s.renderbufferStorage(s.RENDERBUFFER,s.DEPTH_STENCIL,_.width,_.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.RENDERBUFFER,S)}else{const tt=_.isWebGLMultipleRenderTargets===!0?_.texture:[_.texture];for(let j=0;j<tt.length;j++){const et=tt[j],ht=r.convert(et.format,et.colorSpace),st=r.convert(et.type),ot=k(et.internalFormat,ht,st,et.colorSpace),Mt=Ct(_);U&&Gt(_)===!1?s.renderbufferStorageMultisample(s.RENDERBUFFER,Mt,ot,_.width,_.height):Gt(_)?f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER,Mt,ot,_.width,_.height):s.renderbufferStorage(s.RENDERBUFFER,ot,_.width,_.height)}}s.bindRenderbuffer(s.RENDERBUFFER,null)}function me(S,_){if(_&&_.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(s.FRAMEBUFFER,S),!(_.depthTexture&&_.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!n.get(_.depthTexture).__webglTexture||_.depthTexture.image.width!==_.width||_.depthTexture.image.height!==_.height)&&(_.depthTexture.image.width=_.width,_.depthTexture.image.height=_.height,_.depthTexture.needsUpdate=!0),Y(_.depthTexture,0);const tt=n.get(_.depthTexture).__webglTexture,j=Ct(_);if(_.depthTexture.format===Sn)Gt(_)?f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.TEXTURE_2D,tt,0,j):s.framebufferTexture2D(s.FRAMEBUFFER,s.DEPTH_ATTACHMENT,s.TEXTURE_2D,tt,0);else if(_.depthTexture.format===qn)Gt(_)?f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.TEXTURE_2D,tt,0,j):s.framebufferTexture2D(s.FRAMEBUFFER,s.DEPTH_STENCIL_ATTACHMENT,s.TEXTURE_2D,tt,0);else throw new Error("Unknown depthTexture format")}function gt(S){const _=n.get(S),U=S.isWebGLCubeRenderTarget===!0;if(S.depthTexture&&!_.__autoAllocateDepthBuffer){if(U)throw new Error("target.depthTexture not supported in Cube render targets");me(_.__webglFramebuffer,S)}else if(U){_.__webglDepthbuffer=[];for(let tt=0;tt<6;tt++)e.bindFramebuffer(s.FRAMEBUFFER,_.__webglFramebuffer[tt]),_.__webglDepthbuffer[tt]=s.createRenderbuffer(),D(_.__webglDepthbuffer[tt],S,!1)}else e.bindFramebuffer(s.FRAMEBUFFER,_.__webglFramebuffer),_.__webglDepthbuffer=s.createRenderbuffer(),D(_.__webglDepthbuffer,S,!1);e.bindFramebuffer(s.FRAMEBUFFER,null)}function Bt(S,_,U){const tt=n.get(S);_!==void 0&&It(tt.__webglFramebuffer,S,S.texture,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,0),U!==void 0&&gt(S)}function yt(S){const _=S.texture,U=n.get(S),tt=n.get(_);S.addEventListener("dispose",X),S.isWebGLMultipleRenderTargets!==!0&&(tt.__webglTexture===void 0&&(tt.__webglTexture=s.createTexture()),tt.__version=_.version,a.memory.textures++);const j=S.isWebGLCubeRenderTarget===!0,et=S.isWebGLMultipleRenderTargets===!0,ht=A(S)||o;if(j){U.__webglFramebuffer=[];for(let st=0;st<6;st++)if(o&&_.mipmaps&&_.mipmaps.length>0){U.__webglFramebuffer[st]=[];for(let ot=0;ot<_.mipmaps.length;ot++)U.__webglFramebuffer[st][ot]=s.createFramebuffer()}else U.__webglFramebuffer[st]=s.createFramebuffer()}else{if(o&&_.mipmaps&&_.mipmaps.length>0){U.__webglFramebuffer=[];for(let st=0;st<_.mipmaps.length;st++)U.__webglFramebuffer[st]=s.createFramebuffer()}else U.__webglFramebuffer=s.createFramebuffer();if(et)if(i.drawBuffers){const st=S.texture;for(let ot=0,Mt=st.length;ot<Mt;ot++){const Ht=n.get(st[ot]);Ht.__webglTexture===void 0&&(Ht.__webglTexture=s.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&S.samples>0&&Gt(S)===!1){const st=et?_:[_];U.__webglMultisampledFramebuffer=s.createFramebuffer(),U.__webglColorRenderbuffer=[],e.bindFramebuffer(s.FRAMEBUFFER,U.__webglMultisampledFramebuffer);for(let ot=0;ot<st.length;ot++){const Mt=st[ot];U.__webglColorRenderbuffer[ot]=s.createRenderbuffer(),s.bindRenderbuffer(s.RENDERBUFFER,U.__webglColorRenderbuffer[ot]);const Ht=r.convert(Mt.format,Mt.colorSpace),Z=r.convert(Mt.type),Wt=k(Mt.internalFormat,Ht,Z,Mt.colorSpace,S.isXRRenderTarget===!0),At=Ct(S);s.renderbufferStorageMultisample(s.RENDERBUFFER,At,Wt,S.width,S.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+ot,s.RENDERBUFFER,U.__webglColorRenderbuffer[ot])}s.bindRenderbuffer(s.RENDERBUFFER,null),S.depthBuffer&&(U.__webglDepthRenderbuffer=s.createRenderbuffer(),D(U.__webglDepthRenderbuffer,S,!0)),e.bindFramebuffer(s.FRAMEBUFFER,null)}}if(j){e.bindTexture(s.TEXTURE_CUBE_MAP,tt.__webglTexture),mt(s.TEXTURE_CUBE_MAP,_,ht);for(let st=0;st<6;st++)if(o&&_.mipmaps&&_.mipmaps.length>0)for(let ot=0;ot<_.mipmaps.length;ot++)It(U.__webglFramebuffer[st][ot],S,_,s.COLOR_ATTACHMENT0,s.TEXTURE_CUBE_MAP_POSITIVE_X+st,ot);else It(U.__webglFramebuffer[st],S,_,s.COLOR_ATTACHMENT0,s.TEXTURE_CUBE_MAP_POSITIVE_X+st,0);w(_,ht)&&L(s.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(et){const st=S.texture;for(let ot=0,Mt=st.length;ot<Mt;ot++){const Ht=st[ot],Z=n.get(Ht);e.bindTexture(s.TEXTURE_2D,Z.__webglTexture),mt(s.TEXTURE_2D,Ht,ht),It(U.__webglFramebuffer,S,Ht,s.COLOR_ATTACHMENT0+ot,s.TEXTURE_2D,0),w(Ht,ht)&&L(s.TEXTURE_2D)}e.unbindTexture()}else{let st=s.TEXTURE_2D;if((S.isWebGL3DRenderTarget||S.isWebGLArrayRenderTarget)&&(o?st=S.isWebGL3DRenderTarget?s.TEXTURE_3D:s.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),e.bindTexture(st,tt.__webglTexture),mt(st,_,ht),o&&_.mipmaps&&_.mipmaps.length>0)for(let ot=0;ot<_.mipmaps.length;ot++)It(U.__webglFramebuffer[ot],S,_,s.COLOR_ATTACHMENT0,st,ot);else It(U.__webglFramebuffer,S,_,s.COLOR_ATTACHMENT0,st,0);w(_,ht)&&L(st),e.unbindTexture()}S.depthBuffer&&gt(S)}function jt(S){const _=A(S)||o,U=S.isWebGLMultipleRenderTargets===!0?S.texture:[S.texture];for(let tt=0,j=U.length;tt<j;tt++){const et=U[tt];if(w(et,_)){const ht=S.isWebGLCubeRenderTarget?s.TEXTURE_CUBE_MAP:s.TEXTURE_2D,st=n.get(et).__webglTexture;e.bindTexture(ht,st),L(ht),e.unbindTexture()}}}function Ut(S){if(o&&S.samples>0&&Gt(S)===!1){const _=S.isWebGLMultipleRenderTargets?S.texture:[S.texture],U=S.width,tt=S.height;let j=s.COLOR_BUFFER_BIT;const et=[],ht=S.stencilBuffer?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT,st=n.get(S),ot=S.isWebGLMultipleRenderTargets===!0;if(ot)for(let Mt=0;Mt<_.length;Mt++)e.bindFramebuffer(s.FRAMEBUFFER,st.__webglMultisampledFramebuffer),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+Mt,s.RENDERBUFFER,null),e.bindFramebuffer(s.FRAMEBUFFER,st.__webglFramebuffer),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0+Mt,s.TEXTURE_2D,null,0);e.bindFramebuffer(s.READ_FRAMEBUFFER,st.__webglMultisampledFramebuffer),e.bindFramebuffer(s.DRAW_FRAMEBUFFER,st.__webglFramebuffer);for(let Mt=0;Mt<_.length;Mt++){et.push(s.COLOR_ATTACHMENT0+Mt),S.depthBuffer&&et.push(ht);const Ht=st.__ignoreDepthValues!==void 0?st.__ignoreDepthValues:!1;if(Ht===!1&&(S.depthBuffer&&(j|=s.DEPTH_BUFFER_BIT),S.stencilBuffer&&(j|=s.STENCIL_BUFFER_BIT)),ot&&s.framebufferRenderbuffer(s.READ_FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.RENDERBUFFER,st.__webglColorRenderbuffer[Mt]),Ht===!0&&(s.invalidateFramebuffer(s.READ_FRAMEBUFFER,[ht]),s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER,[ht])),ot){const Z=n.get(_[Mt]).__webglTexture;s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_2D,Z,0)}s.blitFramebuffer(0,0,U,tt,0,0,U,tt,j,s.NEAREST),m&&s.invalidateFramebuffer(s.READ_FRAMEBUFFER,et)}if(e.bindFramebuffer(s.READ_FRAMEBUFFER,null),e.bindFramebuffer(s.DRAW_FRAMEBUFFER,null),ot)for(let Mt=0;Mt<_.length;Mt++){e.bindFramebuffer(s.FRAMEBUFFER,st.__webglMultisampledFramebuffer),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+Mt,s.RENDERBUFFER,st.__webglColorRenderbuffer[Mt]);const Ht=n.get(_[Mt]).__webglTexture;e.bindFramebuffer(s.FRAMEBUFFER,st.__webglFramebuffer),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,s.COLOR_ATTACHMENT0+Mt,s.TEXTURE_2D,Ht,0)}e.bindFramebuffer(s.DRAW_FRAMEBUFFER,st.__webglMultisampledFramebuffer)}}function Ct(S){return Math.min(h,S.samples)}function Gt(S){const _=n.get(S);return o&&S.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&_.__useRenderToTexture!==!1}function ae(S){const _=a.render.frame;g.get(S)!==_&&(g.set(S,_),S.update())}function oe(S,_){const U=S.colorSpace,tt=S.format,j=S.type;return S.isCompressedTexture===!0||S.isVideoTexture===!0||S.format===Xs||U!==Je&&U!==Pe&&(Xt.getTransfer(U)===qt?o===!1?t.has("EXT_sRGB")===!0&&tt===Oe?(S.format=Xs,S.minFilter=Le,S.generateMipmaps=!1):_=so.sRGBToLinear(_):(tt!==Oe||j!==cn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",U)),_}this.allocateTextureUnit=nt,this.resetTextureUnits=G,this.setTexture2D=Y,this.setTexture2DArray=Q,this.setTexture3D=ut,this.setTextureCube=V,this.rebindTextures=Bt,this.setupRenderTarget=yt,this.updateRenderTargetMipmap=jt,this.updateMultisampleRenderTarget=Ut,this.setupDepthRenderbuffer=gt,this.setupFrameBufferTexture=It,this.useMultisampledRTT=Gt}function qf(s,t,e){const n=e.isWebGL2;function i(r,a=Pe){let o;const l=Xt.getTransfer(a);if(r===cn)return s.UNSIGNED_BYTE;if(r===Ya)return s.UNSIGNED_SHORT_4_4_4_4;if(r===ja)return s.UNSIGNED_SHORT_5_5_5_1;if(r===Rl)return s.BYTE;if(r===Ll)return s.SHORT;if(r===Js)return s.UNSIGNED_SHORT;if(r===qa)return s.INT;if(r===rn)return s.UNSIGNED_INT;if(r===an)return s.FLOAT;if(r===di)return n?s.HALF_FLOAT:(o=t.get("OES_texture_half_float"),o!==null?o.HALF_FLOAT_OES:null);if(r===Pl)return s.ALPHA;if(r===Oe)return s.RGBA;if(r===Il)return s.LUMINANCE;if(r===Dl)return s.LUMINANCE_ALPHA;if(r===Sn)return s.DEPTH_COMPONENT;if(r===qn)return s.DEPTH_STENCIL;if(r===Xs)return o=t.get("EXT_sRGB"),o!==null?o.SRGB_ALPHA_EXT:null;if(r===Ul)return s.RED;if(r===Ka)return s.RED_INTEGER;if(r===Nl)return s.RG;if(r===Za)return s.RG_INTEGER;if(r===Ja)return s.RGBA_INTEGER;if(r===ss||r===rs||r===as||r===os)if(l===qt)if(o=t.get("WEBGL_compressed_texture_s3tc_srgb"),o!==null){if(r===ss)return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===rs)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===as)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===os)return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(o=t.get("WEBGL_compressed_texture_s3tc"),o!==null){if(r===ss)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===rs)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===as)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===os)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===Sr||r===Er||r===br||r===Tr)if(o=t.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(r===Sr)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===Er)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===br)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===Tr)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===Qa)return o=t.get("WEBGL_compressed_texture_etc1"),o!==null?o.COMPRESSED_RGB_ETC1_WEBGL:null;if(r===Ar||r===wr)if(o=t.get("WEBGL_compressed_texture_etc"),o!==null){if(r===Ar)return l===qt?o.COMPRESSED_SRGB8_ETC2:o.COMPRESSED_RGB8_ETC2;if(r===wr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:o.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(r===Cr||r===Rr||r===Lr||r===Pr||r===Ir||r===Dr||r===Ur||r===Nr||r===Fr||r===Or||r===Br||r===Vr||r===zr||r===kr)if(o=t.get("WEBGL_compressed_texture_astc"),o!==null){if(r===Cr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:o.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===Rr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:o.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===Lr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:o.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===Pr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:o.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===Ir)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:o.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===Dr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:o.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===Ur)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:o.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===Nr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:o.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===Fr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:o.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===Or)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:o.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===Br)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:o.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===Vr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:o.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===zr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:o.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===kr)return l===qt?o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:o.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(r===ls||r===Hr||r===Gr)if(o=t.get("EXT_texture_compression_bptc"),o!==null){if(r===ls)return l===qt?o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:o.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(r===Hr)return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(r===Gr)return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(r===Fl||r===Wr||r===Xr||r===$r)if(o=t.get("EXT_texture_compression_rgtc"),o!==null){if(r===ls)return o.COMPRESSED_RED_RGTC1_EXT;if(r===Wr)return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(r===Xr)return o.COMPRESSED_RED_GREEN_RGTC2_EXT;if(r===$r)return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return r===Mn?n?s.UNSIGNED_INT_24_8:(o=t.get("WEBGL_depth_texture"),o!==null?o.UNSIGNED_INT_24_8_WEBGL:null):s[r]!==void 0?s[r]:null}return{convert:i}}class Yf extends Ae{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class Vi extends ce{constructor(){super(),this.isGroup=!0,this.type="Group"}}const jf={type:"move"};class Ds{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Vi,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Vi,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new P,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new P),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Vi,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new P,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new P),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,a=null;const o=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){a=!0;for(const v of t.hand.values()){const p=e.getJointPose(v,n),u=this._getHandJoint(c,v);p!==null&&(u.matrix.fromArray(p.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.matrixWorldNeedsUpdate=!0,u.jointRadius=p.radius),u.visible=p!==null}const d=c.joints["index-finger-tip"],h=c.joints["thumb-tip"],f=d.position.distanceTo(h.position),m=.02,g=.005;c.inputState.pinching&&f>m+g?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&f<=m-g&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),r!==null&&(l.matrix.fromArray(r.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,r.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(r.linearVelocity)):l.hasLinearVelocity=!1,r.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(r.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(i=e.getPose(t.targetRaySpace,n),i===null&&r!==null&&(i=r),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,i.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(i.linearVelocity)):o.hasLinearVelocity=!1,i.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(i.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(jf)))}return o!==null&&(o.visible=i!==null),l!==null&&(l.visible=r!==null),c!==null&&(c.visible=a!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new Vi;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class Kf extends jn{constructor(t,e){super();const n=this;let i=null,r=1,a=null,o="local-floor",l=1,c=null,d=null,h=null,f=null,m=null,g=null;const v=e.getContextAttributes();let p=null,u=null;const E=[],x=[],A=new kt;let b=null;const w=new Ae;w.layers.enable(1),w.viewport=new Yt;const L=new Ae;L.layers.enable(2),L.viewport=new Yt;const k=[w,L],y=new Yf;y.layers.enable(1),y.layers.enable(2);let T=null,H=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(V){let q=E[V];return q===void 0&&(q=new Ds,E[V]=q),q.getTargetRaySpace()},this.getControllerGrip=function(V){let q=E[V];return q===void 0&&(q=new Ds,E[V]=q),q.getGripSpace()},this.getHand=function(V){let q=E[V];return q===void 0&&(q=new Ds,E[V]=q),q.getHandSpace()};function X(V){const q=x.indexOf(V.inputSource);if(q===-1)return;const at=E[q];at!==void 0&&(at.update(V.inputSource,V.frame,c||a),at.dispatchEvent({type:V.type,data:V.inputSource}))}function J(){i.removeEventListener("select",X),i.removeEventListener("selectstart",X),i.removeEventListener("selectend",X),i.removeEventListener("squeeze",X),i.removeEventListener("squeezestart",X),i.removeEventListener("squeezeend",X),i.removeEventListener("end",J),i.removeEventListener("inputsourceschange",R);for(let V=0;V<E.length;V++){const q=x[V];q!==null&&(x[V]=null,E[V].disconnect(q))}T=null,H=null,t.setRenderTarget(p),m=null,f=null,h=null,i=null,u=null,ut.stop(),n.isPresenting=!1,t.setPixelRatio(b),t.setSize(A.width,A.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(V){r=V,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(V){o=V,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||a},this.setReferenceSpace=function(V){c=V},this.getBaseLayer=function(){return f!==null?f:m},this.getBinding=function(){return h},this.getFrame=function(){return g},this.getSession=function(){return i},this.setSession=async function(V){if(i=V,i!==null){if(p=t.getRenderTarget(),i.addEventListener("select",X),i.addEventListener("selectstart",X),i.addEventListener("selectend",X),i.addEventListener("squeeze",X),i.addEventListener("squeezestart",X),i.addEventListener("squeezeend",X),i.addEventListener("end",J),i.addEventListener("inputsourceschange",R),v.xrCompatible!==!0&&await e.makeXRCompatible(),b=t.getPixelRatio(),t.getSize(A),i.renderState.layers===void 0||t.capabilities.isWebGL2===!1){const q={antialias:i.renderState.layers===void 0?v.antialias:!0,alpha:!0,depth:v.depth,stencil:v.stencil,framebufferScaleFactor:r};m=new XRWebGLLayer(i,e,q),i.updateRenderState({baseLayer:m}),t.setPixelRatio(1),t.setSize(m.framebufferWidth,m.framebufferHeight,!1),u=new bn(m.framebufferWidth,m.framebufferHeight,{format:Oe,type:cn,colorSpace:t.outputColorSpace,stencilBuffer:v.stencil})}else{let q=null,at=null,pt=null;v.depth&&(pt=v.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,q=v.stencil?qn:Sn,at=v.stencil?Mn:rn);const mt={colorFormat:e.RGBA8,depthFormat:pt,scaleFactor:r};h=new XRWebGLBinding(i,e),f=h.createProjectionLayer(mt),i.updateRenderState({layers:[f]}),t.setPixelRatio(1),t.setSize(f.textureWidth,f.textureHeight,!1),u=new bn(f.textureWidth,f.textureHeight,{format:Oe,type:cn,depthTexture:new vo(f.textureWidth,f.textureHeight,at,void 0,void 0,void 0,void 0,void 0,void 0,q),stencilBuffer:v.stencil,colorSpace:t.outputColorSpace,samples:v.antialias?4:0});const Lt=t.properties.get(u);Lt.__ignoreDepthValues=f.ignoreDepthValues}u.isXRRenderTarget=!0,this.setFoveation(l),c=null,a=await i.requestReferenceSpace(o),ut.setContext(i),ut.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode};function R(V){for(let q=0;q<V.removed.length;q++){const at=V.removed[q],pt=x.indexOf(at);pt>=0&&(x[pt]=null,E[pt].disconnect(at))}for(let q=0;q<V.added.length;q++){const at=V.added[q];let pt=x.indexOf(at);if(pt===-1){for(let Lt=0;Lt<E.length;Lt++)if(Lt>=x.length){x.push(at),pt=Lt;break}else if(x[Lt]===null){x[Lt]=at,pt=Lt;break}if(pt===-1)break}const mt=E[pt];mt&&mt.connect(at)}}const B=new P,$=new P;function G(V,q,at){B.setFromMatrixPosition(q.matrixWorld),$.setFromMatrixPosition(at.matrixWorld);const pt=B.distanceTo($),mt=q.projectionMatrix.elements,Lt=at.projectionMatrix.elements,Tt=mt[14]/(mt[10]-1),bt=mt[14]/(mt[10]+1),It=(mt[9]+1)/mt[5],D=(mt[9]-1)/mt[5],me=(mt[8]-1)/mt[0],gt=(Lt[8]+1)/Lt[0],Bt=Tt*me,yt=Tt*gt,jt=pt/(-me+gt),Ut=jt*-me;q.matrixWorld.decompose(V.position,V.quaternion,V.scale),V.translateX(Ut),V.translateZ(jt),V.matrixWorld.compose(V.position,V.quaternion,V.scale),V.matrixWorldInverse.copy(V.matrixWorld).invert();const Ct=Tt+jt,Gt=bt+jt,ae=Bt-Ut,oe=yt+(pt-Ut),S=It*bt/Gt*Ct,_=D*bt/Gt*Ct;V.projectionMatrix.makePerspective(ae,oe,S,_,Ct,Gt),V.projectionMatrixInverse.copy(V.projectionMatrix).invert()}function nt(V,q){q===null?V.matrixWorld.copy(V.matrix):V.matrixWorld.multiplyMatrices(q.matrixWorld,V.matrix),V.matrixWorldInverse.copy(V.matrixWorld).invert()}this.updateCamera=function(V){if(i===null)return;y.near=L.near=w.near=V.near,y.far=L.far=w.far=V.far,(T!==y.near||H!==y.far)&&(i.updateRenderState({depthNear:y.near,depthFar:y.far}),T=y.near,H=y.far);const q=V.parent,at=y.cameras;nt(y,q);for(let pt=0;pt<at.length;pt++)nt(at[pt],q);at.length===2?G(y,w,L):y.projectionMatrix.copy(w.projectionMatrix),W(V,y,q)};function W(V,q,at){at===null?V.matrix.copy(q.matrixWorld):(V.matrix.copy(at.matrixWorld),V.matrix.invert(),V.matrix.multiply(q.matrixWorld)),V.matrix.decompose(V.position,V.quaternion,V.scale),V.updateMatrixWorld(!0),V.projectionMatrix.copy(q.projectionMatrix),V.projectionMatrixInverse.copy(q.projectionMatrixInverse),V.isPerspectiveCamera&&(V.fov=$s*2*Math.atan(1/V.projectionMatrix.elements[5]),V.zoom=1)}this.getCamera=function(){return y},this.getFoveation=function(){if(!(f===null&&m===null))return l},this.setFoveation=function(V){l=V,f!==null&&(f.fixedFoveation=V),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=V)};let Y=null;function Q(V,q){if(d=q.getViewerPose(c||a),g=q,d!==null){const at=d.views;m!==null&&(t.setRenderTargetFramebuffer(u,m.framebuffer),t.setRenderTarget(u));let pt=!1;at.length!==y.cameras.length&&(y.cameras.length=0,pt=!0);for(let mt=0;mt<at.length;mt++){const Lt=at[mt];let Tt=null;if(m!==null)Tt=m.getViewport(Lt);else{const It=h.getViewSubImage(f,Lt);Tt=It.viewport,mt===0&&(t.setRenderTargetTextures(u,It.colorTexture,f.ignoreDepthValues?void 0:It.depthStencilTexture),t.setRenderTarget(u))}let bt=k[mt];bt===void 0&&(bt=new Ae,bt.layers.enable(mt),bt.viewport=new Yt,k[mt]=bt),bt.matrix.fromArray(Lt.transform.matrix),bt.matrix.decompose(bt.position,bt.quaternion,bt.scale),bt.projectionMatrix.fromArray(Lt.projectionMatrix),bt.projectionMatrixInverse.copy(bt.projectionMatrix).invert(),bt.viewport.set(Tt.x,Tt.y,Tt.width,Tt.height),mt===0&&(y.matrix.copy(bt.matrix),y.matrix.decompose(y.position,y.quaternion,y.scale)),pt===!0&&y.cameras.push(bt)}}for(let at=0;at<E.length;at++){const pt=x[at],mt=E[at];pt!==null&&mt!==void 0&&mt.update(pt,q,c||a)}Y&&Y(V,q),q.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:q}),g=null}const ut=new mo;ut.setAnimationLoop(Q),this.setAnimationLoop=function(V){Y=V},this.dispose=function(){}}}function Zf(s,t){function e(p,u){p.matrixAutoUpdate===!0&&p.updateMatrix(),u.value.copy(p.matrix)}function n(p,u){u.color.getRGB(p.fogColor.value,ho(s)),u.isFog?(p.fogNear.value=u.near,p.fogFar.value=u.far):u.isFogExp2&&(p.fogDensity.value=u.density)}function i(p,u,E,x,A){u.isMeshBasicMaterial||u.isMeshLambertMaterial?r(p,u):u.isMeshToonMaterial?(r(p,u),h(p,u)):u.isMeshPhongMaterial?(r(p,u),d(p,u)):u.isMeshStandardMaterial?(r(p,u),f(p,u),u.isMeshPhysicalMaterial&&m(p,u,A)):u.isMeshMatcapMaterial?(r(p,u),g(p,u)):u.isMeshDepthMaterial?r(p,u):u.isMeshDistanceMaterial?(r(p,u),v(p,u)):u.isMeshNormalMaterial?r(p,u):u.isLineBasicMaterial?(a(p,u),u.isLineDashedMaterial&&o(p,u)):u.isPointsMaterial?l(p,u,E,x):u.isSpriteMaterial?c(p,u):u.isShadowMaterial?(p.color.value.copy(u.color),p.opacity.value=u.opacity):u.isShaderMaterial&&(u.uniformsNeedUpdate=!1)}function r(p,u){p.opacity.value=u.opacity,u.color&&p.diffuse.value.copy(u.color),u.emissive&&p.emissive.value.copy(u.emissive).multiplyScalar(u.emissiveIntensity),u.map&&(p.map.value=u.map,e(u.map,p.mapTransform)),u.alphaMap&&(p.alphaMap.value=u.alphaMap,e(u.alphaMap,p.alphaMapTransform)),u.bumpMap&&(p.bumpMap.value=u.bumpMap,e(u.bumpMap,p.bumpMapTransform),p.bumpScale.value=u.bumpScale,u.side===Se&&(p.bumpScale.value*=-1)),u.normalMap&&(p.normalMap.value=u.normalMap,e(u.normalMap,p.normalMapTransform),p.normalScale.value.copy(u.normalScale),u.side===Se&&p.normalScale.value.negate()),u.displacementMap&&(p.displacementMap.value=u.displacementMap,e(u.displacementMap,p.displacementMapTransform),p.displacementScale.value=u.displacementScale,p.displacementBias.value=u.displacementBias),u.emissiveMap&&(p.emissiveMap.value=u.emissiveMap,e(u.emissiveMap,p.emissiveMapTransform)),u.specularMap&&(p.specularMap.value=u.specularMap,e(u.specularMap,p.specularMapTransform)),u.alphaTest>0&&(p.alphaTest.value=u.alphaTest);const E=t.get(u).envMap;if(E&&(p.envMap.value=E,p.flipEnvMap.value=E.isCubeTexture&&E.isRenderTargetTexture===!1?-1:1,p.reflectivity.value=u.reflectivity,p.ior.value=u.ior,p.refractionRatio.value=u.refractionRatio),u.lightMap){p.lightMap.value=u.lightMap;const x=s._useLegacyLights===!0?Math.PI:1;p.lightMapIntensity.value=u.lightMapIntensity*x,e(u.lightMap,p.lightMapTransform)}u.aoMap&&(p.aoMap.value=u.aoMap,p.aoMapIntensity.value=u.aoMapIntensity,e(u.aoMap,p.aoMapTransform))}function a(p,u){p.diffuse.value.copy(u.color),p.opacity.value=u.opacity,u.map&&(p.map.value=u.map,e(u.map,p.mapTransform))}function o(p,u){p.dashSize.value=u.dashSize,p.totalSize.value=u.dashSize+u.gapSize,p.scale.value=u.scale}function l(p,u,E,x){p.diffuse.value.copy(u.color),p.opacity.value=u.opacity,p.size.value=u.size*E,p.scale.value=x*.5,u.map&&(p.map.value=u.map,e(u.map,p.uvTransform)),u.alphaMap&&(p.alphaMap.value=u.alphaMap,e(u.alphaMap,p.alphaMapTransform)),u.alphaTest>0&&(p.alphaTest.value=u.alphaTest)}function c(p,u){p.diffuse.value.copy(u.color),p.opacity.value=u.opacity,p.rotation.value=u.rotation,u.map&&(p.map.value=u.map,e(u.map,p.mapTransform)),u.alphaMap&&(p.alphaMap.value=u.alphaMap,e(u.alphaMap,p.alphaMapTransform)),u.alphaTest>0&&(p.alphaTest.value=u.alphaTest)}function d(p,u){p.specular.value.copy(u.specular),p.shininess.value=Math.max(u.shininess,1e-4)}function h(p,u){u.gradientMap&&(p.gradientMap.value=u.gradientMap)}function f(p,u){p.metalness.value=u.metalness,u.metalnessMap&&(p.metalnessMap.value=u.metalnessMap,e(u.metalnessMap,p.metalnessMapTransform)),p.roughness.value=u.roughness,u.roughnessMap&&(p.roughnessMap.value=u.roughnessMap,e(u.roughnessMap,p.roughnessMapTransform)),t.get(u).envMap&&(p.envMapIntensity.value=u.envMapIntensity)}function m(p,u,E){p.ior.value=u.ior,u.sheen>0&&(p.sheenColor.value.copy(u.sheenColor).multiplyScalar(u.sheen),p.sheenRoughness.value=u.sheenRoughness,u.sheenColorMap&&(p.sheenColorMap.value=u.sheenColorMap,e(u.sheenColorMap,p.sheenColorMapTransform)),u.sheenRoughnessMap&&(p.sheenRoughnessMap.value=u.sheenRoughnessMap,e(u.sheenRoughnessMap,p.sheenRoughnessMapTransform))),u.clearcoat>0&&(p.clearcoat.value=u.clearcoat,p.clearcoatRoughness.value=u.clearcoatRoughness,u.clearcoatMap&&(p.clearcoatMap.value=u.clearcoatMap,e(u.clearcoatMap,p.clearcoatMapTransform)),u.clearcoatRoughnessMap&&(p.clearcoatRoughnessMap.value=u.clearcoatRoughnessMap,e(u.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)),u.clearcoatNormalMap&&(p.clearcoatNormalMap.value=u.clearcoatNormalMap,e(u.clearcoatNormalMap,p.clearcoatNormalMapTransform),p.clearcoatNormalScale.value.copy(u.clearcoatNormalScale),u.side===Se&&p.clearcoatNormalScale.value.negate())),u.iridescence>0&&(p.iridescence.value=u.iridescence,p.iridescenceIOR.value=u.iridescenceIOR,p.iridescenceThicknessMinimum.value=u.iridescenceThicknessRange[0],p.iridescenceThicknessMaximum.value=u.iridescenceThicknessRange[1],u.iridescenceMap&&(p.iridescenceMap.value=u.iridescenceMap,e(u.iridescenceMap,p.iridescenceMapTransform)),u.iridescenceThicknessMap&&(p.iridescenceThicknessMap.value=u.iridescenceThicknessMap,e(u.iridescenceThicknessMap,p.iridescenceThicknessMapTransform))),u.transmission>0&&(p.transmission.value=u.transmission,p.transmissionSamplerMap.value=E.texture,p.transmissionSamplerSize.value.set(E.width,E.height),u.transmissionMap&&(p.transmissionMap.value=u.transmissionMap,e(u.transmissionMap,p.transmissionMapTransform)),p.thickness.value=u.thickness,u.thicknessMap&&(p.thicknessMap.value=u.thicknessMap,e(u.thicknessMap,p.thicknessMapTransform)),p.attenuationDistance.value=u.attenuationDistance,p.attenuationColor.value.copy(u.attenuationColor)),u.anisotropy>0&&(p.anisotropyVector.value.set(u.anisotropy*Math.cos(u.anisotropyRotation),u.anisotropy*Math.sin(u.anisotropyRotation)),u.anisotropyMap&&(p.anisotropyMap.value=u.anisotropyMap,e(u.anisotropyMap,p.anisotropyMapTransform))),p.specularIntensity.value=u.specularIntensity,p.specularColor.value.copy(u.specularColor),u.specularColorMap&&(p.specularColorMap.value=u.specularColorMap,e(u.specularColorMap,p.specularColorMapTransform)),u.specularIntensityMap&&(p.specularIntensityMap.value=u.specularIntensityMap,e(u.specularIntensityMap,p.specularIntensityMapTransform))}function g(p,u){u.matcap&&(p.matcap.value=u.matcap)}function v(p,u){const E=t.get(u).light;p.referencePosition.value.setFromMatrixPosition(E.matrixWorld),p.nearDistance.value=E.shadow.camera.near,p.farDistance.value=E.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function Jf(s,t,e,n){let i={},r={},a=[];const o=e.isWebGL2?s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(E,x){const A=x.program;n.uniformBlockBinding(E,A)}function c(E,x){let A=i[E.id];A===void 0&&(g(E),A=d(E),i[E.id]=A,E.addEventListener("dispose",p));const b=x.program;n.updateUBOMapping(E,b);const w=t.render.frame;r[E.id]!==w&&(f(E),r[E.id]=w)}function d(E){const x=h();E.__bindingPointIndex=x;const A=s.createBuffer(),b=E.__size,w=E.usage;return s.bindBuffer(s.UNIFORM_BUFFER,A),s.bufferData(s.UNIFORM_BUFFER,b,w),s.bindBuffer(s.UNIFORM_BUFFER,null),s.bindBufferBase(s.UNIFORM_BUFFER,x,A),A}function h(){for(let E=0;E<o;E++)if(a.indexOf(E)===-1)return a.push(E),E;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function f(E){const x=i[E.id],A=E.uniforms,b=E.__cache;s.bindBuffer(s.UNIFORM_BUFFER,x);for(let w=0,L=A.length;w<L;w++){const k=A[w];if(m(k,w,b)===!0){const y=k.__offset,T=Array.isArray(k.value)?k.value:[k.value];let H=0;for(let X=0;X<T.length;X++){const J=T[X],R=v(J);typeof J=="number"?(k.__data[0]=J,s.bufferSubData(s.UNIFORM_BUFFER,y+H,k.__data)):J.isMatrix3?(k.__data[0]=J.elements[0],k.__data[1]=J.elements[1],k.__data[2]=J.elements[2],k.__data[3]=J.elements[0],k.__data[4]=J.elements[3],k.__data[5]=J.elements[4],k.__data[6]=J.elements[5],k.__data[7]=J.elements[0],k.__data[8]=J.elements[6],k.__data[9]=J.elements[7],k.__data[10]=J.elements[8],k.__data[11]=J.elements[0]):(J.toArray(k.__data,H),H+=R.storage/Float32Array.BYTES_PER_ELEMENT)}s.bufferSubData(s.UNIFORM_BUFFER,y,k.__data)}}s.bindBuffer(s.UNIFORM_BUFFER,null)}function m(E,x,A){const b=E.value;if(A[x]===void 0){if(typeof b=="number")A[x]=b;else{const w=Array.isArray(b)?b:[b],L=[];for(let k=0;k<w.length;k++)L.push(w[k].clone());A[x]=L}return!0}else if(typeof b=="number"){if(A[x]!==b)return A[x]=b,!0}else{const w=Array.isArray(A[x])?A[x]:[A[x]],L=Array.isArray(b)?b:[b];for(let k=0;k<w.length;k++){const y=w[k];if(y.equals(L[k])===!1)return y.copy(L[k]),!0}}return!1}function g(E){const x=E.uniforms;let A=0;const b=16;let w=0;for(let L=0,k=x.length;L<k;L++){const y=x[L],T={boundary:0,storage:0},H=Array.isArray(y.value)?y.value:[y.value];for(let X=0,J=H.length;X<J;X++){const R=H[X],B=v(R);T.boundary+=B.boundary,T.storage+=B.storage}if(y.__data=new Float32Array(T.storage/Float32Array.BYTES_PER_ELEMENT),y.__offset=A,L>0){w=A%b;const X=b-w;w!==0&&X-T.boundary<0&&(A+=b-w,y.__offset=A)}A+=T.storage}return w=A%b,w>0&&(A+=b-w),E.__size=A,E.__cache={},this}function v(E){const x={boundary:0,storage:0};return typeof E=="number"?(x.boundary=4,x.storage=4):E.isVector2?(x.boundary=8,x.storage=8):E.isVector3||E.isColor?(x.boundary=16,x.storage=12):E.isVector4?(x.boundary=16,x.storage=16):E.isMatrix3?(x.boundary=48,x.storage=48):E.isMatrix4?(x.boundary=64,x.storage=64):E.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",E),x}function p(E){const x=E.target;x.removeEventListener("dispose",p);const A=a.indexOf(x.__bindingPointIndex);a.splice(A,1),s.deleteBuffer(i[x.id]),delete i[x.id],delete r[x.id]}function u(){for(const E in i)s.deleteBuffer(i[E]);a=[],i={},r={}}return{bind:l,update:c,dispose:u}}class Eo{constructor(t={}){const{canvas:e=Yl(),context:n=null,depth:i=!0,stencil:r=!0,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:d="default",failIfMajorPerformanceCaveat:h=!1}=t;this.isWebGLRenderer=!0;let f;n!==null?f=n.getContextAttributes().alpha:f=a;const m=new Uint32Array(4),g=new Int32Array(4);let v=null,p=null;const u=[],E=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=le,this._useLegacyLights=!1,this.toneMapping=ln,this.toneMappingExposure=1;const x=this;let A=!1,b=0,w=0,L=null,k=-1,y=null;const T=new Yt,H=new Yt;let X=null;const J=new Ot(0);let R=0,B=e.width,$=e.height,G=1,nt=null,W=null;const Y=new Yt(0,0,B,$),Q=new Yt(0,0,B,$);let ut=!1;const V=new nr;let q=!1,at=!1,pt=null;const mt=new Qt,Lt=new kt,Tt=new P,bt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function It(){return L===null?G:1}let D=n;function me(M,I){for(let F=0;F<M.length;F++){const O=M[F],N=e.getContext(O,I);if(N!==null)return N}return null}try{const M={alpha:!0,depth:i,stencil:r,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:d,failIfMajorPerformanceCaveat:h};if("setAttribute"in e&&e.setAttribute("data-engine","three.js r".concat(Ks)),e.addEventListener("webglcontextlost",Vt,!1),e.addEventListener("webglcontextrestored",C,!1),e.addEventListener("webglcontextcreationerror",lt,!1),D===null){const I=["webgl2","webgl","experimental-webgl"];if(x.isWebGL1Renderer===!0&&I.shift(),D=me(I,M),D===null)throw me(I)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}typeof WebGLRenderingContext<"u"&&D instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),D.getShaderPrecisionFormat===void 0&&(D.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(M){throw console.error("THREE.WebGLRenderer: "+M.message),M}let gt,Bt,yt,jt,Ut,Ct,Gt,ae,oe,S,_,U,tt,j,et,ht,st,ot,Mt,Ht,Z,Wt,At,St;function vt(){gt=new lh(D),Bt=new nh(D,gt,t),gt.init(Bt),Wt=new qf(D,gt,Bt),yt=new Xf(D,gt,Bt),jt=new uh(D),Ut=new Pf,Ct=new $f(D,gt,yt,Ut,Bt,Wt,jt),Gt=new sh(x),ae=new oh(x),oe=new xc(D,Bt),At=new th(D,gt,oe,Bt),S=new ch(D,oe,jt,At),_=new mh(D,S,oe,jt),Mt=new ph(D,Bt,Ct),ht=new ih(Ut),U=new Lf(x,Gt,ae,gt,Bt,At,ht),tt=new Zf(x,Ut),j=new Df,et=new Vf(gt,Bt),ot=new Qu(x,Gt,ae,yt,_,f,l),st=new Wf(x,_,Bt),St=new Jf(D,jt,Bt,yt),Ht=new eh(D,gt,jt,Bt),Z=new dh(D,gt,jt,Bt),jt.programs=U.programs,x.capabilities=Bt,x.extensions=gt,x.properties=Ut,x.renderLists=j,x.shadowMap=st,x.state=yt,x.info=jt}vt();const dt=new Kf(x,D);this.xr=dt,this.getContext=function(){return D},this.getContextAttributes=function(){return D.getContextAttributes()},this.forceContextLoss=function(){const M=gt.get("WEBGL_lose_context");M&&M.loseContext()},this.forceContextRestore=function(){const M=gt.get("WEBGL_lose_context");M&&M.restoreContext()},this.getPixelRatio=function(){return G},this.setPixelRatio=function(M){M!==void 0&&(G=M,this.setSize(B,$,!1))},this.getSize=function(M){return M.set(B,$)},this.setSize=function(M,I,F=!0){if(dt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}B=M,$=I,e.width=Math.floor(M*G),e.height=Math.floor(I*G),F===!0&&(e.style.width=M+"px",e.style.height=I+"px"),this.setViewport(0,0,M,I)},this.getDrawingBufferSize=function(M){return M.set(B*G,$*G).floor()},this.setDrawingBufferSize=function(M,I,F){B=M,$=I,G=F,e.width=Math.floor(M*F),e.height=Math.floor(I*F),this.setViewport(0,0,M,I)},this.getCurrentViewport=function(M){return M.copy(T)},this.getViewport=function(M){return M.copy(Y)},this.setViewport=function(M,I,F,O){M.isVector4?Y.set(M.x,M.y,M.z,M.w):Y.set(M,I,F,O),yt.viewport(T.copy(Y).multiplyScalar(G).floor())},this.getScissor=function(M){return M.copy(Q)},this.setScissor=function(M,I,F,O){M.isVector4?Q.set(M.x,M.y,M.z,M.w):Q.set(M,I,F,O),yt.scissor(H.copy(Q).multiplyScalar(G).floor())},this.getScissorTest=function(){return ut},this.setScissorTest=function(M){yt.setScissorTest(ut=M)},this.setOpaqueSort=function(M){nt=M},this.setTransparentSort=function(M){W=M},this.getClearColor=function(M){return M.copy(ot.getClearColor())},this.setClearColor=function(){ot.setClearColor.apply(ot,arguments)},this.getClearAlpha=function(){return ot.getClearAlpha()},this.setClearAlpha=function(){ot.setClearAlpha.apply(ot,arguments)},this.clear=function(M=!0,I=!0,F=!0){let O=0;if(M){let N=!1;if(L!==null){const ct=L.texture.format;N=ct===Ja||ct===Za||ct===Ka}if(N){const ct=L.texture.type,ft=ct===cn||ct===rn||ct===Js||ct===Mn||ct===Ya||ct===ja,_t=ot.getClearColor(),Et=ot.getClearAlpha(),Dt=_t.r,wt=_t.g,Rt=_t.b;ft?(m[0]=Dt,m[1]=wt,m[2]=Rt,m[3]=Et,D.clearBufferuiv(D.COLOR,0,m)):(g[0]=Dt,g[1]=wt,g[2]=Rt,g[3]=Et,D.clearBufferiv(D.COLOR,0,g))}else O|=D.COLOR_BUFFER_BIT}I&&(O|=D.DEPTH_BUFFER_BIT),F&&(O|=D.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),D.clear(O)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Vt,!1),e.removeEventListener("webglcontextrestored",C,!1),e.removeEventListener("webglcontextcreationerror",lt,!1),j.dispose(),et.dispose(),Ut.dispose(),Gt.dispose(),ae.dispose(),_.dispose(),At.dispose(),St.dispose(),U.dispose(),dt.dispose(),dt.removeEventListener("sessionstart",ge),dt.removeEventListener("sessionend",$t),pt&&(pt.dispose(),pt=null),ve.stop()};function Vt(M){M.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),A=!0}function C(){console.log("THREE.WebGLRenderer: Context Restored."),A=!1;const M=jt.autoReset,I=st.enabled,F=st.autoUpdate,O=st.needsUpdate,N=st.type;vt(),jt.autoReset=M,st.enabled=I,st.autoUpdate=F,st.needsUpdate=O,st.type=N}function lt(M){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",M.statusMessage)}function K(M){const I=M.target;I.removeEventListener("dispose",K),z(I)}function z(M){it(M),Ut.remove(M)}function it(M){const I=Ut.get(M).programs;I!==void 0&&(I.forEach(function(F){U.releaseProgram(F)}),M.isShaderMaterial&&U.releaseShaderCache(M))}this.renderBufferDirect=function(M,I,F,O,N,ct){I===null&&(I=bt);const ft=N.isMesh&&N.matrixWorld.determinant()<0,_t=wo(M,I,F,O,N);yt.setMaterial(O,ft);let Et=F.index,Dt=1;if(O.wireframe===!0){if(Et=S.getWireframeAttribute(F),Et===void 0)return;Dt=2}const wt=F.drawRange,Rt=F.attributes.position;let Jt=wt.start*Dt,Ee=(wt.start+wt.count)*Dt;ct!==null&&(Jt=Math.max(Jt,ct.start*Dt),Ee=Math.min(Ee,(ct.start+ct.count)*Dt)),Et!==null?(Jt=Math.max(Jt,0),Ee=Math.min(Ee,Et.count)):Rt!=null&&(Jt=Math.max(Jt,0),Ee=Math.min(Ee,Rt.count));const se=Ee-Jt;if(se<0||se===1/0)return;At.setup(N,O,_t,F,Et);let He,Kt=Ht;if(Et!==null&&(He=oe.get(Et),Kt=Z,Kt.setIndex(He)),N.isMesh)O.wireframe===!0?(yt.setLineWidth(O.wireframeLinewidth*It()),Kt.setMode(D.LINES)):Kt.setMode(D.TRIANGLES);else if(N.isLine){let Nt=O.linewidth;Nt===void 0&&(Nt=1),yt.setLineWidth(Nt*It()),N.isLineSegments?Kt.setMode(D.LINES):N.isLineLoop?Kt.setMode(D.LINE_LOOP):Kt.setMode(D.LINE_STRIP)}else N.isPoints?Kt.setMode(D.POINTS):N.isSprite&&Kt.setMode(D.TRIANGLES);if(N.isBatchedMesh)Kt.renderMultiDraw(N._multiDrawStarts,N._multiDrawCounts,N._multiDrawCount);else if(N.isInstancedMesh)Kt.renderInstances(Jt,se,N.count);else if(F.isInstancedBufferGeometry){const Nt=F._maxInstanceCount!==void 0?F._maxInstanceCount:1/0,Ji=Math.min(F.instanceCount,Nt);Kt.renderInstances(Jt,se,Ji)}else Kt.render(Jt,se)};function xt(M,I,F){M.transparent===!0&&M.side===je&&M.forceSinglePass===!1?(M.side=Se,M.needsUpdate=!0,gi(M,I,F),M.side=dn,M.needsUpdate=!0,gi(M,I,F),M.side=je):gi(M,I,F)}this.compile=function(M,I,F=null){F===null&&(F=M),p=et.get(F),p.init(),E.push(p),F.traverseVisible(function(N){N.isLight&&N.layers.test(I.layers)&&(p.pushLight(N),N.castShadow&&p.pushShadow(N))}),M!==F&&M.traverseVisible(function(N){N.isLight&&N.layers.test(I.layers)&&(p.pushLight(N),N.castShadow&&p.pushShadow(N))}),p.setupLights(x._useLegacyLights);const O=new Set;return M.traverse(function(N){const ct=N.material;if(ct)if(Array.isArray(ct))for(let ft=0;ft<ct.length;ft++){const _t=ct[ft];xt(_t,F,N),O.add(_t)}else xt(ct,F,N),O.add(ct)}),E.pop(),p=null,O},this.compileAsync=function(M,I,F=null){const O=this.compile(M,I,F);return new Promise(N=>{function ct(){if(O.forEach(function(ft){Ut.get(ft).currentProgram.isReady()&&O.delete(ft)}),O.size===0){N(M);return}setTimeout(ct,10)}gt.get("KHR_parallel_shader_compile")!==null?ct():setTimeout(ct,10)})};let zt=null;function ie(M){zt&&zt(M)}function ge(){ve.stop()}function $t(){ve.start()}const ve=new mo;ve.setAnimationLoop(ie),typeof self<"u"&&ve.setContext(self),this.setAnimationLoop=function(M){zt=M,dt.setAnimationLoop(M),M===null?ve.stop():ve.start()},dt.addEventListener("sessionstart",ge),dt.addEventListener("sessionend",$t),this.render=function(M,I){if(I!==void 0&&I.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(A===!0)return;M.matrixWorldAutoUpdate===!0&&M.updateMatrixWorld(),I.parent===null&&I.matrixWorldAutoUpdate===!0&&I.updateMatrixWorld(),dt.enabled===!0&&dt.isPresenting===!0&&(dt.cameraAutoUpdate===!0&&dt.updateCamera(I),I=dt.getCamera()),M.isScene===!0&&M.onBeforeRender(x,M,I,L),p=et.get(M,E.length),p.init(),E.push(p),mt.multiplyMatrices(I.projectionMatrix,I.matrixWorldInverse),V.setFromProjectionMatrix(mt),at=this.localClippingEnabled,q=ht.init(this.clippingPlanes,at),v=j.get(M,u.length),v.init(),u.push(v),Ve(M,I,0,x.sortObjects),v.finish(),x.sortObjects===!0&&v.sort(nt,W),this.info.render.frame++,q===!0&&ht.beginShadows();const F=p.state.shadowsArray;if(st.render(F,M,I),q===!0&&ht.endShadows(),this.info.autoReset===!0&&this.info.reset(),ot.render(v,M),p.setupLights(x._useLegacyLights),I.isArrayCamera){const O=I.cameras;for(let N=0,ct=O.length;N<ct;N++){const ft=O[N];cr(v,M,ft,ft.viewport)}}else cr(v,M,I);L!==null&&(Ct.updateMultisampleRenderTarget(L),Ct.updateRenderTargetMipmap(L)),M.isScene===!0&&M.onAfterRender(x,M,I),At.resetDefaultState(),k=-1,y=null,E.pop(),E.length>0?p=E[E.length-1]:p=null,u.pop(),u.length>0?v=u[u.length-1]:v=null};function Ve(M,I,F,O){if(M.visible===!1)return;if(M.layers.test(I.layers)){if(M.isGroup)F=M.renderOrder;else if(M.isLOD)M.autoUpdate===!0&&M.update(I);else if(M.isLight)p.pushLight(M),M.castShadow&&p.pushShadow(M);else if(M.isSprite){if(!M.frustumCulled||V.intersectsSprite(M)){O&&Tt.setFromMatrixPosition(M.matrixWorld).applyMatrix4(mt);const ft=_.update(M),_t=M.material;_t.visible&&v.push(M,ft,_t,F,Tt.z,null)}}else if((M.isMesh||M.isLine||M.isPoints)&&(!M.frustumCulled||V.intersectsObject(M))){const ft=_.update(M),_t=M.material;if(O&&(M.boundingSphere!==void 0?(M.boundingSphere===null&&M.computeBoundingSphere(),Tt.copy(M.boundingSphere.center)):(ft.boundingSphere===null&&ft.computeBoundingSphere(),Tt.copy(ft.boundingSphere.center)),Tt.applyMatrix4(M.matrixWorld).applyMatrix4(mt)),Array.isArray(_t)){const Et=ft.groups;for(let Dt=0,wt=Et.length;Dt<wt;Dt++){const Rt=Et[Dt],Jt=_t[Rt.materialIndex];Jt&&Jt.visible&&v.push(M,ft,Jt,F,Tt.z,Rt)}}else _t.visible&&v.push(M,ft,_t,F,Tt.z,null)}}const ct=M.children;for(let ft=0,_t=ct.length;ft<_t;ft++)Ve(ct[ft],I,F,O)}function cr(M,I,F,O){const N=M.opaque,ct=M.transmissive,ft=M.transparent;p.setupLightsView(F),q===!0&&ht.setGlobalState(x.clippingPlanes,F),ct.length>0&&Ao(N,ct,I,F),O&&yt.viewport(T.copy(O)),N.length>0&&mi(N,I,F),ct.length>0&&mi(ct,I,F),ft.length>0&&mi(ft,I,F),yt.buffers.depth.setTest(!0),yt.buffers.depth.setMask(!0),yt.buffers.color.setMask(!0),yt.setPolygonOffset(!1)}function Ao(M,I,F,O){if((F.isScene===!0?F.overrideMaterial:null)!==null)return;const ct=Bt.isWebGL2;pt===null&&(pt=new bn(1,1,{generateMipmaps:!0,type:gt.has("EXT_color_buffer_half_float")?di:cn,minFilter:ci,samples:ct?4:0})),x.getDrawingBufferSize(Lt),ct?pt.setSize(Lt.x,Lt.y):pt.setSize(qs(Lt.x),qs(Lt.y));const ft=x.getRenderTarget();x.setRenderTarget(pt),x.getClearColor(J),R=x.getClearAlpha(),R<1&&x.setClearColor(16777215,.5),x.clear();const _t=x.toneMapping;x.toneMapping=ln,mi(M,F,O),Ct.updateMultisampleRenderTarget(pt),Ct.updateRenderTargetMipmap(pt);let Et=!1;for(let Dt=0,wt=I.length;Dt<wt;Dt++){const Rt=I[Dt],Jt=Rt.object,Ee=Rt.geometry,se=Rt.material,He=Rt.group;if(se.side===je&&Jt.layers.test(O.layers)){const Kt=se.side;se.side=Se,se.needsUpdate=!0,dr(Jt,F,O,Ee,se,He),se.side=Kt,se.needsUpdate=!0,Et=!0}}Et===!0&&(Ct.updateMultisampleRenderTarget(pt),Ct.updateRenderTargetMipmap(pt)),x.setRenderTarget(ft),x.setClearColor(J,R),x.toneMapping=_t}function mi(M,I,F){const O=I.isScene===!0?I.overrideMaterial:null;for(let N=0,ct=M.length;N<ct;N++){const ft=M[N],_t=ft.object,Et=ft.geometry,Dt=O===null?ft.material:O,wt=ft.group;_t.layers.test(F.layers)&&dr(_t,I,F,Et,Dt,wt)}}function dr(M,I,F,O,N,ct){M.onBeforeRender(x,I,F,O,N,ct),M.modelViewMatrix.multiplyMatrices(F.matrixWorldInverse,M.matrixWorld),M.normalMatrix.getNormalMatrix(M.modelViewMatrix),N.onBeforeRender(x,I,F,O,M,ct),N.transparent===!0&&N.side===je&&N.forceSinglePass===!1?(N.side=Se,N.needsUpdate=!0,x.renderBufferDirect(F,I,O,N,M,ct),N.side=dn,N.needsUpdate=!0,x.renderBufferDirect(F,I,O,N,M,ct),N.side=je):x.renderBufferDirect(F,I,O,N,M,ct),M.onAfterRender(x,I,F,O,N,ct)}function gi(M,I,F){I.isScene!==!0&&(I=bt);const O=Ut.get(M),N=p.state.lights,ct=p.state.shadowsArray,ft=N.state.version,_t=U.getParameters(M,N.state,ct,I,F),Et=U.getProgramCacheKey(_t);let Dt=O.programs;O.environment=M.isMeshStandardMaterial?I.environment:null,O.fog=I.fog,O.envMap=(M.isMeshStandardMaterial?ae:Gt).get(M.envMap||O.environment),Dt===void 0&&(M.addEventListener("dispose",K),Dt=new Map,O.programs=Dt);let wt=Dt.get(Et);if(wt!==void 0){if(O.currentProgram===wt&&O.lightsStateVersion===ft)return hr(M,_t),wt}else _t.uniforms=U.getUniforms(M),M.onBuild(F,_t,x),M.onBeforeCompile(_t,x),wt=U.acquireProgram(_t,Et),Dt.set(Et,wt),O.uniforms=_t.uniforms;const Rt=O.uniforms;return(!M.isShaderMaterial&&!M.isRawShaderMaterial||M.clipping===!0)&&(Rt.clippingPlanes=ht.uniform),hr(M,_t),O.needsLights=Ro(M),O.lightsStateVersion=ft,O.needsLights&&(Rt.ambientLightColor.value=N.state.ambient,Rt.lightProbe.value=N.state.probe,Rt.directionalLights.value=N.state.directional,Rt.directionalLightShadows.value=N.state.directionalShadow,Rt.spotLights.value=N.state.spot,Rt.spotLightShadows.value=N.state.spotShadow,Rt.rectAreaLights.value=N.state.rectArea,Rt.ltc_1.value=N.state.rectAreaLTC1,Rt.ltc_2.value=N.state.rectAreaLTC2,Rt.pointLights.value=N.state.point,Rt.pointLightShadows.value=N.state.pointShadow,Rt.hemisphereLights.value=N.state.hemi,Rt.directionalShadowMap.value=N.state.directionalShadowMap,Rt.directionalShadowMatrix.value=N.state.directionalShadowMatrix,Rt.spotShadowMap.value=N.state.spotShadowMap,Rt.spotLightMatrix.value=N.state.spotLightMatrix,Rt.spotLightMap.value=N.state.spotLightMap,Rt.pointShadowMap.value=N.state.pointShadowMap,Rt.pointShadowMatrix.value=N.state.pointShadowMatrix),O.currentProgram=wt,O.uniformsList=null,wt}function ur(M){if(M.uniformsList===null){const I=M.currentProgram.getUniforms();M.uniformsList=ki.seqWithValue(I.seq,M.uniforms)}return M.uniformsList}function hr(M,I){const F=Ut.get(M);F.outputColorSpace=I.outputColorSpace,F.batching=I.batching,F.instancing=I.instancing,F.instancingColor=I.instancingColor,F.skinning=I.skinning,F.morphTargets=I.morphTargets,F.morphNormals=I.morphNormals,F.morphColors=I.morphColors,F.morphTargetsCount=I.morphTargetsCount,F.numClippingPlanes=I.numClippingPlanes,F.numIntersection=I.numClipIntersection,F.vertexAlphas=I.vertexAlphas,F.vertexTangents=I.vertexTangents,F.toneMapping=I.toneMapping}function wo(M,I,F,O,N){I.isScene!==!0&&(I=bt),Ct.resetTextureUnits();const ct=I.fog,ft=O.isMeshStandardMaterial?I.environment:null,_t=L===null?x.outputColorSpace:L.isXRRenderTarget===!0?L.texture.colorSpace:Je,Et=(O.isMeshStandardMaterial?ae:Gt).get(O.envMap||ft),Dt=O.vertexColors===!0&&!!F.attributes.color&&F.attributes.color.itemSize===4,wt=!!F.attributes.tangent&&(!!O.normalMap||O.anisotropy>0),Rt=!!F.morphAttributes.position,Jt=!!F.morphAttributes.normal,Ee=!!F.morphAttributes.color;let se=ln;O.toneMapped&&(L===null||L.isXRRenderTarget===!0)&&(se=x.toneMapping);const He=F.morphAttributes.position||F.morphAttributes.normal||F.morphAttributes.color,Kt=He!==void 0?He.length:0,Nt=Ut.get(O),Ji=p.state.lights;if(q===!0&&(at===!0||M!==y)){const Ce=M===y&&O.id===k;ht.setState(O,M,Ce)}let Zt=!1;O.version===Nt.__version?(Nt.needsLights&&Nt.lightsStateVersion!==Ji.state.version||Nt.outputColorSpace!==_t||N.isBatchedMesh&&Nt.batching===!1||!N.isBatchedMesh&&Nt.batching===!0||N.isInstancedMesh&&Nt.instancing===!1||!N.isInstancedMesh&&Nt.instancing===!0||N.isSkinnedMesh&&Nt.skinning===!1||!N.isSkinnedMesh&&Nt.skinning===!0||N.isInstancedMesh&&Nt.instancingColor===!0&&N.instanceColor===null||N.isInstancedMesh&&Nt.instancingColor===!1&&N.instanceColor!==null||Nt.envMap!==Et||O.fog===!0&&Nt.fog!==ct||Nt.numClippingPlanes!==void 0&&(Nt.numClippingPlanes!==ht.numPlanes||Nt.numIntersection!==ht.numIntersection)||Nt.vertexAlphas!==Dt||Nt.vertexTangents!==wt||Nt.morphTargets!==Rt||Nt.morphNormals!==Jt||Nt.morphColors!==Ee||Nt.toneMapping!==se||Bt.isWebGL2===!0&&Nt.morphTargetsCount!==Kt)&&(Zt=!0):(Zt=!0,Nt.__version=O.version);let un=Nt.currentProgram;Zt===!0&&(un=gi(O,I,N));let fr=!1,Qn=!1,Qi=!1;const de=un.getUniforms(),hn=Nt.uniforms;if(yt.useProgram(un.program)&&(fr=!0,Qn=!0,Qi=!0),O.id!==k&&(k=O.id,Qn=!0),fr||y!==M){de.setValue(D,"projectionMatrix",M.projectionMatrix),de.setValue(D,"viewMatrix",M.matrixWorldInverse);const Ce=de.map.cameraPosition;Ce!==void 0&&Ce.setValue(D,Tt.setFromMatrixPosition(M.matrixWorld)),Bt.logarithmicDepthBuffer&&de.setValue(D,"logDepthBufFC",2/(Math.log(M.far+1)/Math.LN2)),(O.isMeshPhongMaterial||O.isMeshToonMaterial||O.isMeshLambertMaterial||O.isMeshBasicMaterial||O.isMeshStandardMaterial||O.isShaderMaterial)&&de.setValue(D,"isOrthographic",M.isOrthographicCamera===!0),y!==M&&(y=M,Qn=!0,Qi=!0)}if(N.isSkinnedMesh){de.setOptional(D,N,"bindMatrix"),de.setOptional(D,N,"bindMatrixInverse");const Ce=N.skeleton;Ce&&(Bt.floatVertexTextures?(Ce.boneTexture===null&&Ce.computeBoneTexture(),de.setValue(D,"boneTexture",Ce.boneTexture,Ct)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}N.isBatchedMesh&&(de.setOptional(D,N,"batchingTexture"),de.setValue(D,"batchingTexture",N._matricesTexture,Ct));const ts=F.morphAttributes;if((ts.position!==void 0||ts.normal!==void 0||ts.color!==void 0&&Bt.isWebGL2===!0)&&Mt.update(N,F,un),(Qn||Nt.receiveShadow!==N.receiveShadow)&&(Nt.receiveShadow=N.receiveShadow,de.setValue(D,"receiveShadow",N.receiveShadow)),O.isMeshGouraudMaterial&&O.envMap!==null&&(hn.envMap.value=Et,hn.flipEnvMap.value=Et.isCubeTexture&&Et.isRenderTargetTexture===!1?-1:1),Qn&&(de.setValue(D,"toneMappingExposure",x.toneMappingExposure),Nt.needsLights&&Co(hn,Qi),ct&&O.fog===!0&&tt.refreshFogUniforms(hn,ct),tt.refreshMaterialUniforms(hn,O,G,$,pt),ki.upload(D,ur(Nt),hn,Ct)),O.isShaderMaterial&&O.uniformsNeedUpdate===!0&&(ki.upload(D,ur(Nt),hn,Ct),O.uniformsNeedUpdate=!1),O.isSpriteMaterial&&de.setValue(D,"center",N.center),de.setValue(D,"modelViewMatrix",N.modelViewMatrix),de.setValue(D,"normalMatrix",N.normalMatrix),de.setValue(D,"modelMatrix",N.matrixWorld),O.isShaderMaterial||O.isRawShaderMaterial){const Ce=O.uniformsGroups;for(let es=0,Lo=Ce.length;es<Lo;es++)if(Bt.isWebGL2){const pr=Ce[es];St.update(pr,un),St.bind(pr,un)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return un}function Co(M,I){M.ambientLightColor.needsUpdate=I,M.lightProbe.needsUpdate=I,M.directionalLights.needsUpdate=I,M.directionalLightShadows.needsUpdate=I,M.pointLights.needsUpdate=I,M.pointLightShadows.needsUpdate=I,M.spotLights.needsUpdate=I,M.spotLightShadows.needsUpdate=I,M.rectAreaLights.needsUpdate=I,M.hemisphereLights.needsUpdate=I}function Ro(M){return M.isMeshLambertMaterial||M.isMeshToonMaterial||M.isMeshPhongMaterial||M.isMeshStandardMaterial||M.isShadowMaterial||M.isShaderMaterial&&M.lights===!0}this.getActiveCubeFace=function(){return b},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return L},this.setRenderTargetTextures=function(M,I,F){Ut.get(M.texture).__webglTexture=I,Ut.get(M.depthTexture).__webglTexture=F;const O=Ut.get(M);O.__hasExternalTextures=!0,O.__hasExternalTextures&&(O.__autoAllocateDepthBuffer=F===void 0,O.__autoAllocateDepthBuffer||gt.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),O.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(M,I){const F=Ut.get(M);F.__webglFramebuffer=I,F.__useDefaultFramebuffer=I===void 0},this.setRenderTarget=function(M,I=0,F=0){L=M,b=I,w=F;let O=!0,N=null,ct=!1,ft=!1;if(M){const Et=Ut.get(M);Et.__useDefaultFramebuffer!==void 0?(yt.bindFramebuffer(D.FRAMEBUFFER,null),O=!1):Et.__webglFramebuffer===void 0?Ct.setupRenderTarget(M):Et.__hasExternalTextures&&Ct.rebindTextures(M,Ut.get(M.texture).__webglTexture,Ut.get(M.depthTexture).__webglTexture);const Dt=M.texture;(Dt.isData3DTexture||Dt.isDataArrayTexture||Dt.isCompressedArrayTexture)&&(ft=!0);const wt=Ut.get(M).__webglFramebuffer;M.isWebGLCubeRenderTarget?(Array.isArray(wt[I])?N=wt[I][F]:N=wt[I],ct=!0):Bt.isWebGL2&&M.samples>0&&Ct.useMultisampledRTT(M)===!1?N=Ut.get(M).__webglMultisampledFramebuffer:Array.isArray(wt)?N=wt[F]:N=wt,T.copy(M.viewport),H.copy(M.scissor),X=M.scissorTest}else T.copy(Y).multiplyScalar(G).floor(),H.copy(Q).multiplyScalar(G).floor(),X=ut;if(yt.bindFramebuffer(D.FRAMEBUFFER,N)&&Bt.drawBuffers&&O&&yt.drawBuffers(M,N),yt.viewport(T),yt.scissor(H),yt.setScissorTest(X),ct){const Et=Ut.get(M.texture);D.framebufferTexture2D(D.FRAMEBUFFER,D.COLOR_ATTACHMENT0,D.TEXTURE_CUBE_MAP_POSITIVE_X+I,Et.__webglTexture,F)}else if(ft){const Et=Ut.get(M.texture),Dt=I||0;D.framebufferTextureLayer(D.FRAMEBUFFER,D.COLOR_ATTACHMENT0,Et.__webglTexture,F||0,Dt)}k=-1},this.readRenderTargetPixels=function(M,I,F,O,N,ct,ft){if(!(M&&M.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let _t=Ut.get(M).__webglFramebuffer;if(M.isWebGLCubeRenderTarget&&ft!==void 0&&(_t=_t[ft]),_t){yt.bindFramebuffer(D.FRAMEBUFFER,_t);try{const Et=M.texture,Dt=Et.format,wt=Et.type;if(Dt!==Oe&&Wt.convert(Dt)!==D.getParameter(D.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Rt=wt===di&&(gt.has("EXT_color_buffer_half_float")||Bt.isWebGL2&&gt.has("EXT_color_buffer_float"));if(wt!==cn&&Wt.convert(wt)!==D.getParameter(D.IMPLEMENTATION_COLOR_READ_TYPE)&&!(wt===an&&(Bt.isWebGL2||gt.has("OES_texture_float")||gt.has("WEBGL_color_buffer_float")))&&!Rt){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}I>=0&&I<=M.width-O&&F>=0&&F<=M.height-N&&D.readPixels(I,F,O,N,Wt.convert(Dt),Wt.convert(wt),ct)}finally{const Et=L!==null?Ut.get(L).__webglFramebuffer:null;yt.bindFramebuffer(D.FRAMEBUFFER,Et)}}},this.copyFramebufferToTexture=function(M,I,F=0){const O=Math.pow(2,-F),N=Math.floor(I.image.width*O),ct=Math.floor(I.image.height*O);Ct.setTexture2D(I,0),D.copyTexSubImage2D(D.TEXTURE_2D,F,0,0,M.x,M.y,N,ct),yt.unbindTexture()},this.copyTextureToTexture=function(M,I,F,O=0){const N=I.image.width,ct=I.image.height,ft=Wt.convert(F.format),_t=Wt.convert(F.type);Ct.setTexture2D(F,0),D.pixelStorei(D.UNPACK_FLIP_Y_WEBGL,F.flipY),D.pixelStorei(D.UNPACK_PREMULTIPLY_ALPHA_WEBGL,F.premultiplyAlpha),D.pixelStorei(D.UNPACK_ALIGNMENT,F.unpackAlignment),I.isDataTexture?D.texSubImage2D(D.TEXTURE_2D,O,M.x,M.y,N,ct,ft,_t,I.image.data):I.isCompressedTexture?D.compressedTexSubImage2D(D.TEXTURE_2D,O,M.x,M.y,I.mipmaps[0].width,I.mipmaps[0].height,ft,I.mipmaps[0].data):D.texSubImage2D(D.TEXTURE_2D,O,M.x,M.y,ft,_t,I.image),O===0&&F.generateMipmaps&&D.generateMipmap(D.TEXTURE_2D),yt.unbindTexture()},this.copyTextureToTexture3D=function(M,I,F,O,N=0){if(x.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const ct=M.max.x-M.min.x+1,ft=M.max.y-M.min.y+1,_t=M.max.z-M.min.z+1,Et=Wt.convert(O.format),Dt=Wt.convert(O.type);let wt;if(O.isData3DTexture)Ct.setTexture3D(O,0),wt=D.TEXTURE_3D;else if(O.isDataArrayTexture)Ct.setTexture2DArray(O,0),wt=D.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}D.pixelStorei(D.UNPACK_FLIP_Y_WEBGL,O.flipY),D.pixelStorei(D.UNPACK_PREMULTIPLY_ALPHA_WEBGL,O.premultiplyAlpha),D.pixelStorei(D.UNPACK_ALIGNMENT,O.unpackAlignment);const Rt=D.getParameter(D.UNPACK_ROW_LENGTH),Jt=D.getParameter(D.UNPACK_IMAGE_HEIGHT),Ee=D.getParameter(D.UNPACK_SKIP_PIXELS),se=D.getParameter(D.UNPACK_SKIP_ROWS),He=D.getParameter(D.UNPACK_SKIP_IMAGES),Kt=F.isCompressedTexture?F.mipmaps[0]:F.image;D.pixelStorei(D.UNPACK_ROW_LENGTH,Kt.width),D.pixelStorei(D.UNPACK_IMAGE_HEIGHT,Kt.height),D.pixelStorei(D.UNPACK_SKIP_PIXELS,M.min.x),D.pixelStorei(D.UNPACK_SKIP_ROWS,M.min.y),D.pixelStorei(D.UNPACK_SKIP_IMAGES,M.min.z),F.isDataTexture||F.isData3DTexture?D.texSubImage3D(wt,N,I.x,I.y,I.z,ct,ft,_t,Et,Dt,Kt.data):F.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),D.compressedTexSubImage3D(wt,N,I.x,I.y,I.z,ct,ft,_t,Et,Kt.data)):D.texSubImage3D(wt,N,I.x,I.y,I.z,ct,ft,_t,Et,Dt,Kt),D.pixelStorei(D.UNPACK_ROW_LENGTH,Rt),D.pixelStorei(D.UNPACK_IMAGE_HEIGHT,Jt),D.pixelStorei(D.UNPACK_SKIP_PIXELS,Ee),D.pixelStorei(D.UNPACK_SKIP_ROWS,se),D.pixelStorei(D.UNPACK_SKIP_IMAGES,He),N===0&&O.generateMipmaps&&D.generateMipmap(wt),yt.unbindTexture()},this.initTexture=function(M){M.isCubeTexture?Ct.setTextureCube(M,0):M.isData3DTexture?Ct.setTexture3D(M,0):M.isDataArrayTexture||M.isCompressedArrayTexture?Ct.setTexture2DArray(M,0):Ct.setTexture2D(M,0),yt.unbindTexture()},this.resetState=function(){b=0,w=0,L=null,yt.reset(),At.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Ke}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=t===Qs?"display-p3":"srgb",e.unpackColorSpace=Xt.workingColorSpace===ji?"display-p3":"srgb"}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(t){console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!t}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===le?En:to}set outputEncoding(t){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=t===En?le:Je}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(t){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=t}}class Qf extends Eo{}Qf.prototype.isWebGL1Renderer=!0;class rr{constructor(t,e=1,n=1e3){this.isFog=!0,this.name="",this.color=new Ot(t),this.near=e,this.far=n}clone(){return new rr(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class tp extends ce{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e}}class ar extends Zn{constructor(t){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Ot(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}const Na=new P,Fa=new P,Oa=new Qt,Us=new tr,zi=new Ki;class ep extends ce{constructor(t=new Be,e=new ar){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,n=[0];for(let i=1,r=e.count;i<r;i++)Na.fromBufferAttribute(e,i-1),Fa.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=Na.distanceTo(Fa);t.setAttribute("lineDistance",new pe(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),zi.copy(n.boundingSphere),zi.applyMatrix4(i),zi.radius+=r,t.ray.intersectsSphere(zi)===!1)return;Oa.copy(i).invert(),Us.copy(t.ray).applyMatrix4(Oa);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=new P,d=new P,h=new P,f=new P,m=this.isLineSegments?2:1,g=n.index,p=n.attributes.position;if(g!==null){const u=Math.max(0,a.start),E=Math.min(g.count,a.start+a.count);for(let x=u,A=E-1;x<A;x+=m){const b=g.getX(x),w=g.getX(x+1);if(c.fromBufferAttribute(p,b),d.fromBufferAttribute(p,w),Us.distanceSqToSegment(c,d,f,h)>l)continue;f.applyMatrix4(this.matrixWorld);const k=t.ray.origin.distanceTo(f);k<t.near||k>t.far||e.push({distance:k,point:h.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else{const u=Math.max(0,a.start),E=Math.min(p.count,a.start+a.count);for(let x=u,A=E-1;x<A;x+=m){if(c.fromBufferAttribute(p,x),d.fromBufferAttribute(p,x+1),Us.distanceSqToSegment(c,d,f,h)>l)continue;f.applyMatrix4(this.matrixWorld);const w=t.ray.origin.distanceTo(f);w<t.near||w>t.far||e.push({distance:w,point:h.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const i=e[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=i.length;r<a;r++){const o=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}}const Ba=new P,Va=new P;class bo extends ep{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,n=[];for(let i=0,r=e.count;i<r;i+=2)Ba.fromBufferAttribute(e,i),Va.fromBufferAttribute(e,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+Ba.distanceTo(Va);t.setAttribute("lineDistance",new pe(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class or extends Be{constructor(t=1,e=32,n=16,i=0,r=Math.PI*2,a=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(a+o,Math.PI);let c=0;const d=[],h=new P,f=new P,m=[],g=[],v=[],p=[];for(let u=0;u<=n;u++){const E=[],x=u/n;let A=0;u===0&&a===0?A=.5/e:u===n&&l===Math.PI&&(A=-.5/e);for(let b=0;b<=e;b++){const w=b/e;h.x=-t*Math.cos(i+w*r)*Math.sin(a+x*o),h.y=t*Math.cos(a+x*o),h.z=t*Math.sin(i+w*r)*Math.sin(a+x*o),g.push(h.x,h.y,h.z),f.copy(h).normalize(),v.push(f.x,f.y,f.z),p.push(w+A,1-x),E.push(c++)}d.push(E)}for(let u=0;u<n;u++)for(let E=0;E<e;E++){const x=d[u][E+1],A=d[u][E],b=d[u+1][E],w=d[u+1][E+1];(u!==0||a>0)&&m.push(x,A,w),(u!==n-1||l<Math.PI)&&m.push(A,b,w)}this.setIndex(m),this.setAttribute("position",new pe(g,3)),this.setAttribute("normal",new pe(v,3)),this.setAttribute("uv",new pe(p,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new or(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class np extends Zn{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Ot(16777215),this.specular=new Ot(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ot(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=eo,this.normalScale=new kt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Zs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class lr extends ce{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new Ot(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),e}}const Ns=new Qt,za=new P,ka=new P;class To{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new kt(512,512),this.map=null,this.mapPass=null,this.matrix=new Qt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new nr,this._frameExtents=new kt(1,1),this._viewportCount=1,this._viewports=[new Yt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;za.setFromMatrixPosition(t.matrixWorld),e.position.copy(za),ka.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(ka),e.updateMatrixWorld(),Ns.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ns),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Ns)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}const Ha=new Qt,ri=new P,Fs=new P;class ip extends To{constructor(){super(new Ae(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new kt(4,2),this._viewportCount=6,this._viewports=[new Yt(2,1,1,1),new Yt(0,1,1,1),new Yt(3,1,1,1),new Yt(1,1,1,1),new Yt(3,0,1,1),new Yt(1,0,1,1)],this._cubeDirections=[new P(1,0,0),new P(-1,0,0),new P(0,0,1),new P(0,0,-1),new P(0,1,0),new P(0,-1,0)],this._cubeUps=[new P(0,1,0),new P(0,1,0),new P(0,1,0),new P(0,1,0),new P(0,0,1),new P(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),ri.setFromMatrixPosition(t.matrixWorld),n.position.copy(ri),Fs.copy(n.position),Fs.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Fs),n.updateMatrixWorld(),i.makeTranslation(-ri.x,-ri.y,-ri.z),Ha.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ha)}}class sp extends lr{constructor(t,e,n=0,i=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new ip}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class rp extends To{constructor(){super(new go(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class ap extends lr{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(ce.DEFAULT_UP),this.updateMatrix(),this.target=new ce,this.shadow=new rp}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class op extends lr{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class lp{constructor(t,e,n=0,i=1/0){this.ray=new tr(t,e),this.near=n,this.far=i,this.camera=null,this.layers=new er,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!0,n=[]){return js(t,this,n,e),n.sort(Ga),n}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)js(t[i],this,n,e);return n.sort(Ga),n}}function Ga(s,t){return s.distance-t.distance}function js(s,t,e,n){if(s.layers.test(t.layers)&&s.raycast(t,e),n===!0){const i=s.children;for(let r=0,a=i.length;r<a;r++)js(i[r],t,e,!0)}}class cp extends bo{constructor(t=10,e=10,n=4473924,i=8947848){n=new Ot(n),i=new Ot(i);const r=e/2,a=t/e,o=t/2,l=[],c=[];for(let f=0,m=0,g=-o;f<=e;f++,g+=a){l.push(-o,0,g,o,0,g),l.push(g,0,-o,g,0,o);const v=f===r?n:i;v.toArray(c,m),m+=3,v.toArray(c,m),m+=3,v.toArray(c,m),m+=3,v.toArray(c,m),m+=3}const d=new Be;d.setAttribute("position",new pe(l,3)),d.setAttribute("color",new pe(c,3));const h=new ar({vertexColors:!0,toneMapped:!1});super(d,h),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class dp extends bo{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new Be;i.setAttribute("position",new pe(e,3)),i.setAttribute("color",new pe(n,3));const r=new ar({vertexColors:!0,toneMapped:!1});super(i,r),this.type="AxesHelper"}setColors(t,e,n){const i=new Ot,r=this.geometry.attributes.color.array;return i.set(t),i.toArray(r,0),i.toArray(r,3),i.set(e),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Ks}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Ks);class up{constructor(t,e){this.container=t,this.framework=e,this.scene=null,this.camera=null,this.renderer=null,this.controls=null,this.vectorPoints=[],this.clusterGroups=[],this.animationId=null,this.raycaster=new lp,this.mouse=new kt,this.selectedVector=null,this.hoverVector=null,this.settings={pointSize:.05,pointColor:5025616,selectedColor:16733986,hoverColor:2201331,clusterColors:[16739179,5164484,4569041,9883316,16702071,15961e3,11069135,8968368,16757690,12247551],showAxes:!0,showGrid:!0,autoRotate:!1,backgroundColor:1710618},this.init()}init(){this.createScene(),this.createCamera(),this.createRenderer(),this.createControls(),this.createLighting(),this.createAxesAndGrid(),this.setupEventListeners(),this.animate(),this.framework.eventBus.on("vectorsUpdated",this.onVectorsUpdated.bind(this)),this.framework.eventBus.on("analysisCompleted",this.onAnalysisCompleted.bind(this)),this.framework.eventBus.on("vectorSelected",this.onVectorSelected.bind(this))}createScene(){this.scene=new tp,this.scene.background=new Ot(this.settings.backgroundColor),this.scene.fog=new rr(this.settings.backgroundColor,10,50)}createCamera(){const t=this.container.clientWidth/this.container.clientHeight;this.camera=new Ae(75,t,.1,1e3),this.camera.position.set(5,5,5),this.camera.lookAt(0,0,0)}createRenderer(){this.renderer=new Eo({antialias:!0,alpha:!0}),this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=Xa,this.container.appendChild(this.renderer.domElement)}createControls(){this.setupMouseControls()}setupMouseControls(){let t=!1,e={x:0,y:0};this.renderer.domElement.addEventListener("mousedown",i=>{t=!0,e={x:i.clientX,y:i.clientY}}),this.renderer.domElement.addEventListener("mousemove",i=>{if(t){const r={x:i.clientX-e.x,y:i.clientY-e.y},a=new Kn().setFromEuler(new fi(n(r.y*1),n(r.x*1),0,"XYZ"));this.camera.quaternion.multiplyQuaternions(a,this.camera.quaternion),e={x:i.clientX,y:i.clientY}}else this.updateMousePosition(i),this.detectHover()}),this.renderer.domElement.addEventListener("mouseup",()=>{t=!1}),this.renderer.domElement.addEventListener("wheel",i=>{const r=i.deltaY>0?1.1:.9;this.camera.position.multiplyScalar(r)}),this.renderer.domElement.addEventListener("click",i=>{this.updateMousePosition(i),this.handleClick()});function n(i){return i*(Math.PI/180)}}createLighting(){const t=new op(4210752,.6);this.scene.add(t);const e=new ap(16777215,.8);e.position.set(10,10,5),e.castShadow=!0,e.shadow.mapSize.width=2048,e.shadow.mapSize.height=2048,this.scene.add(e);const n=new sp(16777215,.5,100);n.position.set(0,10,0),this.scene.add(n)}createAxesAndGrid(){if(this.settings.showAxes){const t=new dp(5);this.scene.add(t)}if(this.settings.showGrid){const t=new cp(10,10,4473924,2236962);this.scene.add(t)}}setupEventListeners(){window.addEventListener("resize",this.onWindowResize.bind(this))}onWindowResize(){const t=this.container.clientWidth,e=this.container.clientHeight;this.camera.aspect=t/e,this.camera.updateProjectionMatrix(),this.renderer.setSize(t,e)}updateMousePosition(t){const e=this.renderer.domElement.getBoundingClientRect();this.mouse.x=(t.clientX-e.left)/e.width*2-1,this.mouse.y=-((t.clientY-e.top)/e.height)*2+1}detectHover(){this.raycaster.setFromCamera(this.mouse,this.camera);const t=this.raycaster.intersectObjects(this.vectorPoints);this.hoverVector&&(this.hoverVector.material.color.setHex(this.hoverVector.userData.originalColor),this.hoverVector=null),t.length>0?(this.hoverVector=t[0].object,this.hoverVector.userData.isSelected||this.hoverVector.material.color.setHex(this.settings.hoverColor),this.updateTooltip(this.hoverVector.userData.vector)):this.hideTooltip()}handleClick(){this.raycaster.setFromCamera(this.mouse,this.camera);const t=this.raycaster.intersectObjects(this.vectorPoints);this.selectedVector&&(this.selectedVector.material.color.setHex(this.selectedVector.userData.originalColor),this.selectedVector.userData.isSelected=!1),t.length>0&&(this.selectedVector=t[0].object,this.selectedVector.material.color.setHex(this.settings.selectedColor),this.selectedVector.userData.isSelected=!0,this.framework.eventBus.emit("vector3DSelected",{vector:this.selectedVector.userData.vector,index:this.selectedVector.userData.index}))}updateTooltip(t){let e=document.getElementById("vector-tooltip-3d");e||(e=document.createElement("div"),e.id="vector-tooltip-3d",e.style.cssText="\n                position: absolute;\n                background: rgba(0, 0, 0, 0.8);\n                color: white;\n                padding: 8px;\n                border-radius: 4px;\n                font-size: 12px;\n                pointer-events: none;\n                z-index: 1000;\n                max-width: 200px;\n            ",document.body.appendChild(e)),e.innerHTML="\n            <strong>Vector ".concat(t.id,"</strong><br>\n            Components: [").concat(t.components.map(n=>n.toFixed(3)).join(", "),"]<br>\n            Magnitude: ").concat(t.magnitude.toFixed(3),"\n        "),e.style.left=event.clientX+10+"px",e.style.top=event.clientY-10+"px",e.style.display="block"}hideTooltip(){const t=document.getElementById("vector-tooltip-3d");t&&(t.style.display="none")}onVectorsUpdated(t){this.clearVectors(),this.renderVectors(t)}onAnalysisCompleted(t){switch(t.type){case"pca":this.visualizePCA(t);break;case"kmeans":this.visualizeClusters(t);break;case"tsne":this.visualizeTSNE(t);break;case"hierarchical":this.visualizeHierarchical(t);break}}onVectorSelected(t){this.highlightVector(t.index)}clearVectors(){this.vectorPoints.forEach(t=>{this.scene.remove(t),t.geometry.dispose(),t.material.dispose()}),this.vectorPoints=[],this.clearClusters()}clearClusters(){this.clusterGroups.forEach(t=>{this.scene.remove(t)}),this.clusterGroups=[]}renderVectors(t){t.forEach((e,n)=>{const i=new or(this.settings.pointSize,16,16),r=new np({color:this.settings.pointColor,transparent:!0,opacity:.8}),a=new Ze(i,r),o=this.vectorToPosition(e);a.position.set(o.x,o.y,o.z),a.userData={vector:e,index:n,originalColor:this.settings.pointColor,isSelected:!1},a.castShadow=!0,a.receiveShadow=!0,this.scene.add(a),this.vectorPoints.push(a)})}vectorToPosition(t){const e=t.components,n=2;return{x:(e[0]||0)*n,y:(e[1]||0)*n,z:(e[2]||0)*n}}visualizePCA(t){t.data&&t.data.forEach((e,n)=>{n<this.vectorPoints.length&&this.vectorPoints[n].position.set(e[0]*2,e[1]*2,(e[2]||0)*2)})}visualizeClusters(t){if(!t.data||!t.data.assignments)return;const e=this.settings.clusterColors;t.data.assignments.forEach((n,i)=>{if(i<this.vectorPoints.length){const r=e[n%e.length];this.vectorPoints[i].material.color.setHex(r),this.vectorPoints[i].userData.originalColor=r}})}visualizeTSNE(t){t.data&&t.data.forEach((e,n)=>{n<this.vectorPoints.length&&this.vectorPoints[n].position.set(e[0]*2,e[1]*2,(e[2]||0)*2)})}visualizeHierarchical(t){}highlightVector(t){t<this.vectorPoints.length&&(this.selectedVector&&(this.selectedVector.material.color.setHex(this.selectedVector.userData.originalColor),this.selectedVector.userData.isSelected=!1),this.selectedVector=this.vectorPoints[t],this.selectedVector.material.color.setHex(this.settings.selectedColor),this.selectedVector.userData.isSelected=!0,this.focusOnVector(this.selectedVector.position))}focusOnVector(t){const e=t.clone().add(new P(2,2,2)),n=this.camera.position.clone(),i=1e3,r=Date.now(),a=()=>{const o=Date.now()-r,l=Math.min(o/i,1);this.camera.position.lerpVectors(n,e,l),this.camera.lookAt(t),l<1&&requestAnimationFrame(a)};a()}animate(){this.animationId=requestAnimationFrame(this.animate.bind(this)),this.settings.autoRotate&&(this.scene.rotation.y+=.005),this.renderer.render(this.scene,this.camera)}updateSettings(t){Object.assign(this.settings,t),t.backgroundColor!==void 0&&(this.scene.background.setHex(t.backgroundColor),this.scene.fog.color.setHex(t.backgroundColor)),t.pointSize!==void 0&&this.vectorPoints.forEach(e=>{e.scale.setScalar(t.pointSize/this.settings.pointSize)}),t.pointColor!==void 0&&this.vectorPoints.forEach(e=>{e.userData.isSelected||(e.material.color.setHex(t.pointColor),e.userData.originalColor=t.pointColor)})}exportScene(){return{cameraPosition:this.camera.position.toArray(),cameraRotation:this.camera.rotation.toArray(),settings:{...this.settings},vectorCount:this.vectorPoints.length,clusterCount:this.clusterGroups.length}}importScene(t){t.cameraPosition&&this.camera.position.fromArray(t.cameraPosition),t.cameraRotation&&this.camera.rotation.fromArray(t.cameraRotation),t.settings&&this.updateSettings(t.settings)}dispose(){this.animationId&&cancelAnimationFrame(this.animationId),this.clearVectors(),this.clearClusters(),this.renderer&&(this.renderer.dispose(),this.renderer.domElement.parentNode&&this.renderer.domElement.parentNode.removeChild(this.renderer.domElement));const t=document.getElementById("vector-tooltip-3d");t&&t.remove(),window.removeEventListener("resize",this.onWindowResize.bind(this))}}class hp{constructor(t,e){if(this.container=t,this.framework=e,this.d3=window.d3,this.svg=null,this.periodicData=[],this.selectedElement=null,!this.d3){console.error("D3.js is not loaded. PeriodicTableVisualization requires D3.js.");return}this.config={elementWidth:60,elementHeight:60,padding:2,maxColumns:18,fontSize:10,symbolFontSize:14},this.init()}init(){this.createPeriodicTableContainer(),this.setupEventListeners()}createPeriodicTableContainer(){this.container.getBoundingClientRect();const t=200;this.svg=this.d3.select(this.container).append("div").attr("class","periodic-table-container").style("width","100%").style("height","".concat(t,"px")).style("background","rgba(0,0,0,0.1)").style("border-top","2px solid rgba(255,255,255,0.2)").style("padding","10px").style("overflow-x","auto").style("overflow-y","hidden").append("svg").attr("width","100%").attr("height",t-20).attr("class","periodic-table-svg"),this.svg.append("text").attr("x",20).attr("y",20).attr("fill","white").attr("font-size","16px").attr("font-weight","bold").text("🧪 Vector Periodic Table")}setupEventListeners(){this.framework.eventBus.on("stateChanged",()=>{this.updatePeriodicTable()}),this.framework.eventBus.on("vectorSelected",t=>{this.highlightElement(t.vectorId)})}updatePeriodicTable(){if(!this.d3||!this.svg)return;const e=this.framework.getState().vectors;if(!e||e.length===0){this.clearTable();return}this.periodicData=this.vectorsToPeriodicElements(e),this.renderPeriodicTable()}vectorsToPeriodicElements(t){const e=this.framework.getModules().forceCalculator;return t.map((n,i)=>{const r=e.getVectorStatistics(n),a=e.getInformationQuantums(n);return{id:n.id,symbol:this.generateElementSymbol(n,i),name:"Vector ".concat(n.id+1),atomicNumber:n.id+1,atomicMass:Math.round(r.magnitude*100)/100,excitatory:a.excitatory,inhibitory:a.inhibitory,neutral:a.neutral,entropy:Math.round(e.informationEntropy(n)*1e3)/1e3,stability:Math.round(e.nuclearStability(n)*1e3)/1e3,color:this.getElementColor(n,r,a),position:this.calculateElementPosition(n,i,t.length),vector:n}})}generateElementSymbol(t,e){const n=this.framework.getModules().forceCalculator.magnitude(t),i=this.framework.getModules().forceCalculator.informationEntropy(t),r=String.fromCharCode(65+e%26);return n>1.5?r+"h":i>2?r+"e":n<.5?r+"l":r+"m"}getElementColor(t,e,n){return n.excitatory>n.inhibitory&&n.excitatory>n.neutral?"#ff6b6b":n.inhibitory>n.excitatory&&n.inhibitory>n.neutral?"#4ecdc4":n.neutral>n.excitatory&&n.neutral>n.inhibitory?"#95a5a6":"#f39c12"}calculateElementPosition(t,e,n){const i=Math.min(this.config.maxColumns,Math.ceil(Math.sqrt(n*2))),r=Math.floor(e/i),a=e%i;return{row:r,col:a,x:50+a*(this.config.elementWidth+this.config.padding),y:40+r*(this.config.elementHeight+this.config.padding)}}renderPeriodicTable(){if(!this.d3||!this.svg)return;this.svg.selectAll(".periodic-element").remove();const t=this.svg.selectAll(".periodic-element").data(this.periodicData,e=>e.id).enter().append("g").attr("class","periodic-element").attr("transform",e=>"translate(".concat(e.position.x,", ").concat(e.position.y,")")).style("cursor","pointer").on("click",(e,n)=>{this.framework.selectVector(n.id)}).on("mouseenter",(e,n)=>{this.showElementTooltip(e,n)}).on("mouseleave",()=>{this.hideElementTooltip()});t.append("rect").attr("width",this.config.elementWidth).attr("height",this.config.elementHeight).attr("fill",e=>e.color).attr("stroke","rgba(255,255,255,0.3)").attr("stroke-width",1).attr("rx",4).attr("opacity",.8),t.append("text").attr("x",4).attr("y",12).attr("fill","white").attr("font-size",this.config.fontSize).attr("font-weight","bold").text(e=>e.atomicNumber),t.append("text").attr("x",this.config.elementWidth/2).attr("y",this.config.elementHeight/2+2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-size",this.config.symbolFontSize).attr("font-weight","bold").text(e=>e.symbol),t.append("text").attr("x",this.config.elementWidth/2).attr("y",this.config.elementHeight-6).attr("text-anchor","middle").attr("fill","rgba(255,255,255,0.8)").attr("font-size",this.config.fontSize-1).text(e=>e.atomicMass),this.addQuantumIndicators(t)}addQuantumIndicators(t){const e=this.config.elementHeight;t.each(function(n){const i=d3.select(this),r=3,a=4;for(let o=0;o<Math.min(n.excitatory,5);o++)i.append("circle").attr("cx",4+o*a).attr("cy",e-16).attr("r",r).attr("fill","#ff4757").attr("opacity",.7);for(let o=0;o<Math.min(n.inhibitory,5);o++)i.append("circle").attr("cx",4+o*a).attr("cy",e-24).attr("r",r).attr("fill","#3742fa").attr("opacity",.7)})}highlightElement(t){this.svg.selectAll(".periodic-element").classed("selected",!1).select("rect").attr("stroke-width",1).attr("stroke","rgba(255,255,255,0.3)"),this.svg.selectAll(".periodic-element").filter(e=>e.id===t).classed("selected",!0).select("rect").attr("stroke-width",3).attr("stroke","#ffd700")}showElementTooltip(t,e){const n=this.d3.select("body").append("div").attr("class","periodic-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","10px").style("border-radius","6px").style("font-size","12px").style("pointer-events","none").style("z-index","1000").style("box-shadow","0 4px 8px rgba(0,0,0,0.3)").html("\n                <div><strong>".concat(e.name,"</strong></div>\n                <div>Symbol: ").concat(e.symbol,"</div>\n                <div>Atomic Mass: ").concat(e.atomicMass,"</div>\n                <div>Entropy: ").concat(e.entropy,"</div>\n                <div>Stability: ").concat(e.stability,"</div>\n                <div>Excitatory: ").concat(e.excitatory,"</div>\n                <div>Inhibitory: ").concat(e.inhibitory,"</div>\n                <div>Neutral: ").concat(e.neutral,"</div>\n            ")),[i,r]=this.d3.pointer(t,document.body);n.style("left",i+10+"px").style("top",r-10+"px")}hideElementTooltip(){this.d3.selectAll(".periodic-tooltip").remove()}clearTable(){this.svg.selectAll(".periodic-element").remove()}setElementHighlight(t,e=!0){e?this.highlightElement(t):this.svg.selectAll(".periodic-element").classed("selected",!1).select("rect").attr("stroke-width",1).attr("stroke","rgba(255,255,255,0.3)")}getElementData(t){return this.periodicData.find(e=>e.id===t)}exportPeriodicData(){return{elements:this.periodicData,timestamp:new Date().toISOString(),totalElements:this.periodicData.length}}}class fp{constructor(t){this.framework=t,this.d3=window.d3,this.isActive=!1,this.inputVector=null,this.neuronVectors=[],this.connections=[],this.activations=[],this.config={connectionOpacity:.6,activationThreshold:.5,maxConnectionWidth:8,minConnectionWidth:1,activationColors:{high:"#ff6b6b",medium:"#ffa726",low:"#66bb6a",inactive:"#95a5a6"}},this.setupEventListeners()}setupEventListeners(){this.framework.eventBus.on("vectorSelected",t=>{this.isActive&&t.vectorId!==null&&this.setInputVector(t.vectorId)}),this.framework.eventBus.on("stateChanged",()=>{this.isActive&&this.updateNeuralNetwork()})}activate(t=null){var e;if(this.isActive=!0,t!==null)this.setInputVector(t);else{const n=this.framework.getState();n.vectors.length>0&&this.setInputVector(n.vectors[0].id)}this.updateNeuralNetwork(),this.framework.notify("neuralModeActivated",{inputVectorId:(e=this.inputVector)==null?void 0:e.id})}deactivate(){this.isActive=!1,this.inputVector=null,this.neuronVectors=[],this.connections=[],this.activations=[],this.clearNeuralVisualizations(),this.framework.notify("neuralModeDeactivated")}setInputVector(t){const e=this.framework.getState();this.inputVector=e.vectors.find(n=>n.id===t),this.inputVector&&(this.neuronVectors=e.vectors.filter(n=>n.id!==t),this.calculateNeuralNetwork(),this.renderNeuralNetwork())}calculateNeuralNetwork(){if(!this.inputVector||this.neuronVectors.length===0)return;const t=this.framework.getModules().forceCalculator,n=this.framework.getConfig().forceType||"resonance",i=this.neuronVectors.map(a=>{const o=t.calculateSelectedMetric(this.inputVector,a,n),l=Math.abs(t.correlation(this.inputVector,a)),c=t.euclideanDistance(this.inputVector,a),d=l/(1+c);return{neuron:a,metricValue:o,correlation:l,distance:c,synapticStrength:d}}),r=i.map(a=>a.metricValue);this.activations=i.map(a=>{const o=t.activationFunction;let l;return o==="softmax"||o==="softermax"?l=t.applyActivation(a.metricValue,o,r):l=t.applyActivation(a.metricValue,o),{neuronId:a.neuron.id,activation:l,synapticStrength:a.synapticStrength,activationLevel:this.categorizeActivation(l),rawInput:a.metricValue,metricType:n}}),this.connections=this.activations.map(a=>({from:this.inputVector.id,to:a.neuronId,strength:a.synapticStrength,activation:a.activation}))}categorizeActivation(t){switch(this.framework.getModules().forceCalculator.activationFunction){case"tanh":return Math.abs(t)>.7?"high":Math.abs(t)>.3?"medium":Math.abs(t)>.1?"low":"inactive";case"relu":case"leaky_relu":return t>2?"high":t>.5?"medium":t>.1?"low":"inactive";case"softplus":case"swish":return t>1.5?"high":t>.8?"medium":t>.2?"low":"inactive";case"softmax":case"softermax":return t>.4?"high":t>.2?"medium":t>.05?"low":"inactive";case"soft_sigmoid":return t>.7?"high":t>.4?"medium":t>.1?"low":"inactive";case"sigmoid":default:return t>.7?"high":t>.4?"medium":t>.1?"low":"inactive"}}updateNeuralNetwork(){this.isActive&&this.inputVector&&(this.calculateNeuralNetwork(),this.renderNeuralNetwork())}renderNeuralNetwork(){const t=this.framework.modules.vectorRenderer.svg;this.clearNeuralVisualizations(),this.renderNeuralConnections(t),this.renderNeuralActivations(t),this.renderInputHighlight(t),this.renderNeuralInfoPanel()}renderNeuralConnections(t){const e=this.connections.filter(n=>n.strength>.1);t.selectAll(".neural-connection").data(e,n=>"".concat(n.from,"-").concat(n.to)).enter().append("line").attr("class","neural-connection").attr("x1",n=>this.getVectorPosition(n.from).x).attr("y1",n=>this.getVectorPosition(n.from).y).attr("x2",n=>this.getVectorPosition(n.to).x).attr("y2",n=>this.getVectorPosition(n.to).y).attr("stroke","#e74c3c").attr("stroke-width",n=>{const i=this.config.minConnectionWidth+n.strength*(this.config.maxConnectionWidth-this.config.minConnectionWidth);return Math.max(this.config.minConnectionWidth,Math.min(this.config.maxConnectionWidth,i))}).attr("opacity",n=>this.config.connectionOpacity*n.strength)}renderNeuralActivations(t){t.selectAll(".activation-ring").data(this.activations,e=>e.neuronId).enter().append("circle").attr("class","activation-ring").attr("cx",e=>this.getVectorPosition(e.neuronId).x).attr("cy",e=>this.getVectorPosition(e.neuronId).y).attr("r",e=>30+e.activation*20).attr("fill","none").attr("stroke",e=>this.config.activationColors[e.activationLevel]).attr("stroke-width",3).attr("opacity",.7),t.selectAll(".activation-label").data(this.activations,e=>e.neuronId).enter().append("text").attr("class","activation-label").attr("x",e=>this.getVectorPosition(e.neuronId).x+25).attr("y",e=>this.getVectorPosition(e.neuronId).y-25).attr("fill","white").attr("font-size","10px").attr("font-weight","bold").text(e=>"".concat((e.activation*100).toFixed(0),"%"))}renderInputHighlight(t){if(!this.inputVector)return;const e=this.getVectorPosition(this.inputVector.id);t.append("circle").attr("class","neural-input-highlight").attr("cx",e.x).attr("cy",e.y).attr("r",50).attr("fill","none").attr("stroke","#f39c12").attr("stroke-width",4).attr("stroke-dasharray","10,5").attr("opacity",.8),t.append("text").attr("class","neural-input-label").attr("x",e.x).attr("y",e.y-60).attr("text-anchor","middle").attr("fill","#f39c12").attr("font-size","14px").attr("font-weight","bold").text("🧠 INPUT NEURON")}renderNeuralInfoPanel(){let t=this.d3.select(".neural-info-panel");t.empty()&&(t=this.d3.select("body").append("div").attr("class","neural-info-panel").style("position","fixed").style("top","10px").style("right","10px").style("width","250px").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","15px").style("border-radius","8px").style("font-size","12px").style("z-index","1000").style("border","2px solid #f39c12"));const e=this.calculateNetworkStatistics(),n=this.framework.getModules().forceCalculator,i=n.activationFunction,r=n.learningRate,o=this.framework.getConfig().forceType||"resonance",l={resonance:"Resonance Force",cosine:"Cosine Similarity",correlation:"Pearson Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",quantum:"Quantum Entanglement"};t.html('\n            <h4 style="margin: 0 0 10px 0; color: #f39c12;">🧠 Neural Network Mode</h4>\n            <div><strong>Input:</strong> Vector '.concat(this.inputVector.id+1,"</div>\n            <div><strong>Input Metric:</strong> ").concat(l[o],"</div>\n            <div><strong>Activation:</strong> ").concat(i.charAt(0).toUpperCase()+i.slice(1),"</div>\n            <div><strong>Learning Rate:</strong> ").concat(r.toFixed(3),"</div>\n            <div><strong>Neurons:</strong> ").concat(this.neuronVectors.length,"</div>\n            <div><strong>Connections:</strong> ").concat(this.connections.length,"</div>\n            <div><strong>Avg Activation:</strong> ").concat((e.avgActivation*100).toFixed(1),"%</div>\n            <div><strong>Max Activation:</strong> ").concat((e.maxActivation*100).toFixed(1),"%</div>\n            <div><strong>Network Output:</strong> ").concat((e.networkOutput*100).toFixed(1),'%</div>\n            <div style="margin-top: 10px;">\n                <button id="neural-mode-toggle" style="width: 100%; padding: 5px; background: #e74c3c; color: white; border: none; border-radius: 4px; cursor: pointer;">\n                    Deactivate Neural Mode\n                </button>\n            </div>\n        ')),t.select("#neural-mode-toggle").on("click",()=>{this.deactivate()})}calculateNetworkStatistics(){if(this.activations.length===0)return{avgActivation:0,maxActivation:0,networkOutput:0};const t=this.activations.map(o=>o.activation),e=t.reduce((o,l)=>o+l,0)/t.length,n=Math.max(...t),i=this.activations.reduce((o,l)=>o+l.activation*l.synapticStrength,0),r=this.activations.reduce((o,l)=>o+l.synapticStrength,0),a=r>0?i/r:0;return{avgActivation:e,maxActivation:n,networkOutput:a}}getVectorPosition(t){const n=this.framework.getState().vectors.find(i=>i.id===t);return n?{x:n.x,y:n.y}:{x:0,y:0}}clearNeuralVisualizations(){const t=this.framework.modules.vectorRenderer.svg;t.selectAll(".neural-connection").remove(),t.selectAll(".activation-ring").remove(),t.selectAll(".activation-label").remove(),t.selectAll(".neural-input-highlight").remove(),t.selectAll(".neural-input-label").remove(),this.d3.selectAll(".neural-info-panel").remove()}isNeuralModeActive(){return this.isActive}getCurrentInputVector(){return this.inputVector}getNeuronActivations(){return this.activations}getNetworkConnections(){return this.connections}}class pp{constructor(t){this.framework=t,this.state=this.initializeState(),this.elements=new Map,this.components=this.initializeComponents(),this.boundHandlers=this.createBoundHandlers(),this.initializeEventListeners(),this.deferredInitialize()}initializeState(){return{selectedVector:null,currentView:"overview",activeTab:"individual",activeIndividualTab:"components",isInitialized:!1}}initializeComponents(){return{charts:null,statistics:null,clustering:null,relationships:null,patterns:null}}createBoundHandlers(){return{onStateChanged:this.onStateChanged.bind(this)}}initializeEventListeners(){try{const{eventBus:t}=this.framework;t.on("stateChanged",this.boundHandlers.onStateChanged)}catch(t){console.error("Failed to initialize event listeners:",t)}}deferredInitialize(){const t=()=>this.initialize();document.readyState==="loading"?document.addEventListener("DOMContentLoaded",t):requestAnimationFrame(()=>setTimeout(t,100))}async initialize(){if(!this.state.isInitialized)try{this.cacheElements(),this.setupUIEventHandlers(),this.initializeTabSystem(),this.updateInitialState(),this.state.isInitialized=!0,console.log("VectorAnalysisStudio initialized successfully")}catch(t){console.error("Failed to initialize VectorAnalysisStudio:",t)}}cacheElements(){["analysis-content","analysis-overview","analysis-detailed","vector-select","vector-analysis-content","total-vectors","vector-dimensions","avg-magnitude","max-similarity","toggle-analysis-view","compare-vectors","export-analysis","back-to-overview"].forEach(e=>{const n=document.getElementById(e);n&&this.elements.set(e,n)})}setupUIEventHandlers(){[["toggle-analysis-view","click",this.toggleView.bind(this)],["back-to-overview","click",this.showOverview.bind(this)],["compare-vectors","click",this.compareVectors.bind(this)],["export-analysis","click",this.exportAnalysis.bind(this)],["vector-select","change",this.handleVectorSelection.bind(this)]].forEach(([e,n,i])=>{const r=this.elements.get(e);r&&r.addEventListener(n,i)})}initializeTabSystem(){const t=document.querySelectorAll(".tab-btn"),e=document.querySelectorAll(".tab-panel");t.forEach(n=>{n.addEventListener("click",()=>{const i=n.getAttribute("data-tab");this.switchTab(i,t,e)})})}updateInitialState(){this.updateOverviewStats(),this.updateVectorSelector()}onStateChanged(t){this.safeExecute(()=>{const e=t==null?void 0:t.reason;e==="vectorsGenerated"?this.onVectorsUpdated():e==="vectorSelected"?this.onVectorSelected():(e==="inputVectorAdded"||e==="inputVectorRemoved")&&(this.updateOverviewStats(),this.updateVectorSelector())},"state changed")}onVectorsUpdated(){this.updateOverviewStats(),this.updateVectorSelector(),this.updateTabContent()}onVectorSelected(){const t=this.framework.stateManager.getSelectedVector();this.state.selectedVector=t,this.updateVectorSelector(),this.updateIndividualAnalysis(),this.toggleCompareButton(!t)}switchTab(t,e,n){this.safeExecute(()=>{this.updateTabStates(e,n,t),this.state.activeTab=t,this.updateTabContent()},"tab switch")}updateTabStates(t,e,n){t.forEach(a=>a.classList.remove("active")),e.forEach(a=>a.classList.remove("active"));const i=document.querySelector('[data-tab="'.concat(n,'"]')),r=document.getElementById("".concat(n,"-tab"));i&&r&&(i.classList.add("active"),r.classList.add("active"))}updateTabContent(){const{activeTab:t}=this.state,n={individual:()=>this.updateIndividualAnalysis(),relationships:()=>this.updateRelationships(),clusters:()=>this.updateClustering(),statistics:()=>this.updateStatistics()}[t];n&&n()}toggleView(){this.safeExecute(()=>{const t=this.state.currentView==="overview";this.state.currentView=t?"detailed":"overview",this.updateViewDisplay(t)},"view toggle")}updateViewDisplay(t){const e=this.elements.get("analysis-overview"),n=this.elements.get("analysis-detailed"),i=this.elements.get("toggle-analysis-view");e&&n&&i&&(t?(e.style.display="none",n.style.display="block",i.innerHTML='<span class="btn-icon">📊</span><span class="btn-text">Overview</span>'):(e.style.display="block",n.style.display="none",i.innerHTML='<span class="btn-icon">🔍</span><span class="btn-text">Detailed View</span>'))}showOverview(){this.safeExecute(()=>{this.state.currentView="overview",this.updateViewDisplay(!1)},"show overview")}toggleCompareButton(t){const e=this.elements.get("compare-vectors");e&&(e.disabled=t)}updateOverviewStats(){this.safeExecute(()=>{const{forceCalculator:t}=this.getModules(),{vectors:e}=this.getState();if(!t||!e.length){this.clearOverviewStats();return}const n=this.calculateOverviewStats(e,t);this.displayOverviewStats(n)},"overview stats update")}calculateOverviewStats(t,e){var o;const n=t.length,i=((o=t[0])==null?void 0:o.components.length)||0,r=t.reduce((l,c)=>l+e.magnitude(c),0)/t.length;let a=0;for(let l=0;l<t.length;l++)for(let c=l+1;c<t.length;c++){const d=Math.abs(e.cosineSimilarity(t[l],t[c]));a=Math.max(a,d)}return{totalVectors:n,dimensions:i,avgMagnitude:r,maxSimilarity:a}}displayOverviewStats({totalVectors:t,dimensions:e,avgMagnitude:n,maxSimilarity:i}){this.updateElement("total-vectors",t.toString()),this.updateElement("vector-dimensions",e.toString()),this.updateElement("avg-magnitude",n.toFixed(2)),this.updateElement("max-similarity",i.toFixed(2))}clearOverviewStats(){["total-vectors","vector-dimensions","avg-magnitude","max-similarity"].forEach(t=>this.updateElement(t,"0"))}updateVectorSelector(){this.safeExecute(()=>{var i;const t=this.elements.get("vector-select");if(!t)return;const{vectors:e}=this.getState(),n=(i=this.state.selectedVector)==null?void 0:i.id;t.innerHTML='<option value="">Click a vector or select here...</option>',e.forEach(r=>{const a=document.createElement("option");a.value=r.id,a.textContent="Vector ".concat(r.id),a.selected=r.id===n,t.appendChild(a)})},"vector selector update")}updateIndividualAnalysis(){this.safeExecute(()=>{const t=this.elements.get("vector-analysis-content");if(!t)return;if(!this.state.selectedVector){this.showAnalysisPlaceholder(t);return}const{forceCalculator:e}=this.getModules();if(!e){this.showError(t,"Force calculator not available");return}this.renderIndividualAnalysis(t)},"individual analysis update")}renderIndividualAnalysis(t){const e=this.state.selectedVector,{forceCalculator:n}=this.getModules(),i=this.calculateAnalysisData(e,n);t.innerHTML=this.generateAnalysisHTML(e,i),this.setupIndividualAnalysisTabs(),this.populateAnalysisContent(e,n,i)}calculateAnalysisData(t,e){const n=e.getInformationQuantums(t),i=this.calculateVectorStats(t,e),r=this.determineCharge(n),a=e.magnitude(t),o=e.informationEntropy(t),l=this.calculateSparsity(t);return{quantums:n,stats:i,charge:r,magnitude:a,entropy:o,sparsity:l}}determineCharge(t){return t.excitatory>t.inhibitory?"Positive":t.inhibitory>t.excitatory?"Negative":"Neutral"}calculateVectorStats(t,e){const n=t.components,i=n.reduce((a,o)=>a+o,0)/n.length,r=n.reduce((a,o)=>a+Math.pow(o-i,2),0)/n.length;return{mean:i,variance:r,standardDeviation:Math.sqrt(r),magnitude:e.magnitude(t),min:Math.min(...n),max:Math.max(...n)}}calculateSparsity(t){return t.components.filter(i=>Math.abs(i)<.001).length/t.components.length}generateAnalysisHTML(t,e){const{charge:n,magnitude:i,entropy:r,sparsity:a}=e;return'\n            <div class="vector-analysis-card">\n                '.concat(this.generateAnalysisHeader(t,{charge:n,magnitude:i,entropy:r,sparsity:a}),"\n                ").concat(this.generateAnalysisTabs(),"\n            </div>\n        ")}generateAnalysisHeader(t,{charge:e,magnitude:n,entropy:i,sparsity:r}){return'\n            <div class="vector-header-enhanced">\n                <div class="vector-title-section">\n                    <h4>🎯 Vector '.concat(t.id,' Deep Analysis</h4>\n                    <div class="vector-summary">\n                        <span class="summary-item">\n                            <span class="summary-label">Dimensionality:</span>\n                            <span class="summary-value">').concat(t.components.length,'D</span>\n                        </span>\n                        <span class="summary-item">\n                            <span class="summary-label">Magnitude:</span>\n                            <span class="summary-value">').concat(n.toFixed(4),'</span>\n                        </span>\n                        <span class="summary-item">\n                            <span class="summary-label">Entropy:</span>\n                            <span class="summary-value">').concat(i.toFixed(4),'</span>\n                        </span>\n                    </div>\n                </div>\n                <div class="vector-badges-enhanced">\n                    ').concat(this.generateBadge("charge",e,this.getChargeIcon(e)),"\n                    ").concat(this.generateBadge("magnitude",n.toFixed(3),"📏"),"\n                    ").concat(this.generateBadge("sparsity","".concat((r*100).toFixed(1),"% sparse"),"💎"),"\n                </div>\n            </div>\n        ")}generateBadge(t,e,n){return'\n            <span class="vector-badge '.concat(t,'" title="').concat(t,'">\n                <span class="badge-icon">').concat(n,"</span>\n                ").concat(e,"\n            </span>\n        ")}getChargeIcon(t){return{Positive:"⚡",Negative:"🔋",Neutral:"⚖️"}[t]||"⚖️"}generateAnalysisTabs(){return'\n            <div class="analysis-tabs-enhanced">\n                <div class="tab-nav">\n                    <button class="tab-nav-btn active" data-target="components">📊 Components</button>\n                    <button class="tab-nav-btn" data-target="statistics">📈 Statistics</button>\n                    <button class="tab-nav-btn" data-target="relationships">🔗 Relationships</button>\n                    <button class="tab-nav-btn" data-target="clusters">🔍 Clusters</button>\n                    <button class="tab-nav-btn" data-target="patterns">🧩 Patterns</button>\n                    <button class="tab-nav-btn" data-target="information">🧠 Information</button>\n                </div>\n                \n                <div class="tab-content-enhanced">\n                    '.concat(this.generateTabPanes(),"\n                </div>\n            </div>\n        ")}generateTabPanes(){return[{id:"components",content:this.generateComponentsPane()},{id:"statistics",content:this.generateStatisticsPane()},{id:"relationships",content:'<div class="relationships-enhanced" id="relationships-enhanced"></div>'},{id:"clusters",content:'<div class="clusters-enhanced" id="clusters-enhanced"></div>'},{id:"patterns",content:'<div class="patterns-analysis" id="patterns-analysis"></div>'},{id:"information",content:'<div class="information-analysis" id="information-analysis"></div>'}].map((e,n)=>'\n            <div class="tab-pane '.concat(n===0?"active":"",'" id="').concat(e.id,'-pane">\n                ').concat(e.content,"\n            </div>\n        ")).join("")}generateComponentsPane(){return'\n            <div class="components-analysis">\n                <div class="visualization-container">\n                    <div class="chart-header">\n                        <h6>Component Distribution Visualization</h6>\n                        <div class="chart-controls">\n                            <select id="chart-type-select" class="mini-select">\n                                <option value="bar">Bar Chart</option>\n                                <option value="line">Line Chart</option>\n                                <option value="histogram">Histogram</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class="components-chart-enhanced" id="components-chart-individual"></div>\n                </div>\n                \n                <div class="components-insights">\n                    <div class="insight-grid" id="insight-grid"></div>\n                    <div class="component-extremes">\n                        <h6>🎯 Notable Components</h6>\n                        <div class="extremes-list" id="extremes-list"></div>\n                    </div>\n                </div>\n            </div>\n        '}generateStatisticsPane(){return'\n            <div class="statistics-enhanced">\n                <div class="stats-categories" id="stats-categories"></div>\n                <div class="statistical-insights">\n                    <h6>💡 Statistical Insights</h6>\n                    <div class="insights-list" id="statistical-insights"></div>\n                </div>\n            </div>\n        '}setupIndividualAnalysisTabs(){this.safeExecute(()=>{const t=document.querySelectorAll(".tab-nav-btn"),e=document.querySelectorAll(".tab-pane");t.forEach(n=>{n.addEventListener("click",()=>{const i=n.getAttribute("data-target");this.switchIndividualTab(i,t,e)})}),this.setupChartTypeSelector()},"individual analysis tabs setup")}switchIndividualTab(t,e,n){e.forEach(a=>a.classList.remove("active")),n.forEach(a=>a.classList.remove("active"));const i=document.querySelector('[data-target="'.concat(t,'"]')),r=document.getElementById("".concat(t,"-pane"));i&&r&&(i.classList.add("active"),r.classList.add("active"),this.state.activeIndividualTab=t,this.updateIndividualTabContent(t))}updateIndividualTabContent(t){this.safeExecute(()=>{const{selectedVector:e}=this.state;if(!e)return;const{forceCalculator:n}=this.getModules();if(n)switch(t){case"relationships":this.updateIndividualRelationships();break;case"clusters":this.updateClustering();break;case"patterns":this.populatePatternsAnalysis(e);break;case"information":const i=n.getInformationQuantums(e);this.populateInformationAnalysis(e,n,i);break;case"statistics":const r=this.calculateVectorStats(e,n);this.populateStatisticsAnalysis(e,r,n);break;case"components":this.renderChart("components-chart-individual",e.components);break}},"individual tab content update for ".concat(t))}setupChartTypeSelector(){const t=document.getElementById("chart-type-select");t&&t.addEventListener("change",()=>{this.state.selectedVector&&this.renderChart("components-chart-individual",this.state.selectedVector.components)})}populateAnalysisContent(t,e,n){this.safeExecute(()=>{this.populateComponentsAnalysis(t,n.stats),this.populateStatisticsAnalysis(t,n.stats,e),this.populateInformationAnalysis(t,e,n.quantums),this.populatePatternsAnalysis(t),this.renderChart("components-chart-individual",t.components)},"analysis content population")}populateComponentsAnalysis(t,e){const n=document.getElementById("insight-grid"),i=document.getElementById("extremes-list");if(n){const r=this.calculateComponentInsights(t,e);n.innerHTML=this.generateInsightCards(r)}if(i){const r=this.calculateComponentExtremes(t);i.innerHTML=this.generateExtremesHTML(r)}}calculateComponentInsights(t,e){const n=t.components.filter(o=>o>0),i=t.components.filter(o=>o<0),r=e.magnitude||0,a=t.components.filter(o=>Math.abs(o)>r*.3);return[{type:"positive",icon:"⬆️",title:"Positive Components",value:n.length,detail:"Avg: ".concat(n.length>0?(n.reduce((o,l)=>o+l,0)/n.length).toFixed(3):"0.000")},{type:"negative",icon:"⬇️",title:"Negative Components",value:i.length,detail:"Avg: ".concat(i.length>0?(i.reduce((o,l)=>o+l,0)/i.length).toFixed(3):"0.000")},{type:"dominant",icon:"💪",title:"Strong Components",value:a.length,detail:"> 30% of magnitude"}]}generateInsightCards(t){return t.map(e=>'\n            <div class="insight-card '.concat(e.type,'">\n                <div class="insight-header">\n                    <span class="insight-icon">').concat(e.icon,'</span>\n                    <span class="insight-title">').concat(e.title,'</span>\n                </div>\n                <div class="insight-value">').concat(e.value,'</div>\n                <div class="insight-detail">').concat(e.detail,"</div>\n            </div>\n        ")).join("")}calculateComponentExtremes(t){return[...t.components.map((i,r)=>({value:i,index:r}))].sort((i,r)=>Math.abs(r.value)-Math.abs(i.value)).slice(0,3)}generateExtremesHTML(t){return'\n            <div class="extreme-category">\n                <div class="extreme-header">\n                    <span class="extreme-icon">🔝</span>\n                    <span class="extreme-title">Highest Components</span>\n                </div>\n                <div class="extreme-items">\n                    '.concat(t.map(e=>'\n                        <div class="extreme-item">\n                            <span class="extreme-index">dim '.concat(e.index+1,'</span>\n                            <span class="extreme-value ').concat(e.value>=0?"positive":"negative",'">').concat(e.value.toFixed(4),"</span>\n                        </div>\n                    ")).join(""),"\n                </div>\n            </div>\n        ")}populateStatisticsAnalysis(t,e,n){const i=document.getElementById("stats-categories"),r=document.getElementById("statistical-insights");if(i&&(i.innerHTML=this.generateStatsCategories(e)),r){const a=this.generateStatisticalInsights(t,e);r.innerHTML=this.generateInsightsHTML(a)}}generateStatsCategories(t){var e,n,i,r;return'\n            <div class="stats-category">\n                <h6>📊 Basic Statistics</h6>\n                <div class="stats-detailed">\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Mean:</span>\n                        <span class="stat-value">'.concat(((e=t.mean)==null?void 0:e.toFixed(4))||"0.0000",'</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Standard Deviation:</span>\n                        <span class="stat-value">').concat(((n=t.standardDeviation)==null?void 0:n.toFixed(4))||"0.0000",'</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Min Value:</span>\n                        <span class="stat-value">').concat(((i=t.min)==null?void 0:i.toFixed(4))||"0.0000",'</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Max Value:</span>\n                        <span class="stat-value">').concat(((r=t.max)==null?void 0:r.toFixed(4))||"0.0000","</span>\n                    </div>\n                </div>\n            </div>\n        ")}generateStatisticalInsights(t,e){const n=[],i=e.magnitude||0;i>2?n.push({icon:"⚡",text:"High magnitude vector (".concat(i.toFixed(2),") indicates strong signal strength")}):i<.5&&n.push({icon:"🔋",text:"Low magnitude vector (".concat(i.toFixed(2),") indicates weak signal strength")});const r=this.calculateSparsity(t);return r>.7&&n.push({icon:"💎",text:"Highly sparse vector (".concat((r*100).toFixed(1),"% zeros) - efficient representation")}),n}generateInsightsHTML(t){return t.map(e=>'\n            <div class="insight-item">\n                <span class="insight-indicator">'.concat(e.icon,'</span>\n                <span class="insight-text">').concat(e.text,"</span>\n            </div>\n        ")).join("")}populateInformationAnalysis(t,e,n){const i=document.getElementById("information-analysis");if(!i)return;const r=e.informationEntropy(t),a=Math.log2(t.components.length),o=r/a;i.innerHTML='\n            <div class="quantum-analysis">\n                <h6>⚛️ Information Quantum Analysis</h6>\n                <div class="quantum-metrics">\n                    '.concat(this.generateQuantumCard("excitatory",n.excitatory,n),"\n                    ").concat(this.generateQuantumCard("inhibitory",n.inhibitory,n),"\n                    ").concat(this.generateQuantumBalanceCard(n),'\n                </div>\n            </div>\n            \n            <div class="entropy-analysis">\n                <h6>🌊 Entropy & Information Content</h6>\n                <div class="entropy-metrics">\n                    ').concat(this.generateEntropyCard("Shannon Entropy",r,"bits",o),"\n                    ").concat(this.generateEffectiveDimensionalityCard(t),"\n                    ").concat(this.generateInformationDensityCard(r,t.components.length),"\n                </div>\n            </div>\n        ")}generateQuantumCard(t,e,n){const i=n.excitatory+n.inhibitory,r=i>0?(e/i*100).toFixed(1):"0.0",a=t==="excitatory"?"⚡":"🔋";return'\n            <div class="quantum-card '.concat(t,'">\n                <div class="quantum-header">\n                    <span class="quantum-icon">').concat(a,'</span>\n                    <span class="quantum-title">').concat(t.charAt(0).toUpperCase()+t.slice(1),' Quantum</span>\n                </div>\n                <div class="quantum-value">').concat(e.toFixed(4),'</div>\n                <div class="quantum-bar">\n                    <div class="quantum-fill ').concat(t,'" style="width: ').concat(r,'%"></div>\n                </div>\n            </div>\n        ')}generateQuantumBalanceCard(t){const e=t.excitatory-t.inhibitory,n=this.getQuantumInterpretation(t);return'\n            <div class="quantum-card balance">\n                <div class="quantum-header">\n                    <span class="quantum-icon">⚖️</span>\n                    <span class="quantum-title">Quantum Balance</span>\n                </div>\n                <div class="quantum-value">'.concat(e.toFixed(4),'</div>\n                <div class="quantum-interpretation">').concat(n,"</div>\n            </div>\n        ")}getQuantumInterpretation(t){const e=t.excitatory-t.inhibitory;return Math.abs(e)<.1?"Balanced information state":e>0?"Excitatory dominant - activating":"Inhibitory dominant - suppressing"}generateEntropyCard(t,e,n,i){return'\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">📊</span>\n                    <span class="entropy-title">'.concat(t,'</span>\n                </div>\n                <div class="entropy-value">').concat(e.toFixed(4)," ").concat(n,'</div>\n                <div class="entropy-bar">\n                    <div class="entropy-fill" style="width: ').concat((i*100).toFixed(1),'%"></div>\n                </div>\n                <div class="entropy-detail">').concat((i*100).toFixed(1),"% of maximum entropy</div>\n            </div>\n        ")}generateEffectiveDimensionalityCard(t){const e=t.components.filter(i=>Math.abs(i)>.001).length,n=e/t.components.length;return'\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">🎯</span>\n                    <span class="entropy-title">Effective Dimensionality</span>\n                </div>\n                <div class="entropy-value">'.concat((n*100).toFixed(1),'%</div>\n                <div class="entropy-detail">').concat(e," of ").concat(t.components.length," dimensions active</div>\n            </div>\n        ")}generateInformationDensityCard(t,e){const n=t/e;return'\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">💎</span>\n                    <span class="entropy-title">Information Density</span>\n                </div>\n                <div class="entropy-value">'.concat(n.toFixed(4),'</div>\n                <div class="entropy-detail">bits per dimension</div>\n            </div>\n        ')}renderChart(t,e){this.safeExecute(()=>{this.components.charts||(this.components.charts=new mp(this)),this.components.charts.renderChart(t,e)},"chart rendering")}updateRelationships(){this.safeExecute(()=>{this.components.relationships||(this.components.relationships=new xp(this)),this.components.relationships.update()},"relationships update")}updateIndividualRelationships(){this.safeExecute(()=>{const t=document.getElementById("relationships-enhanced");if(!t)return;const{selectedVector:e}=this.state,{vectors:n}=this.getState(),{forceCalculator:i}=this.getModules();if(!e||!n||n.length<2){t.innerHTML="<p>Need at least 2 vectors and a selected vector for relationship analysis.</p>";return}const r=n.filter(o=>o.id!==e.id),a=this.calculateAllMetricsRelationships(e,r,i);t.innerHTML=this.generateIndividualRelationshipHTML(a),this.setupIndividualRelationshipControls(a)},"individual relationships update")}calculateAllMetricsRelationships(t,e,n){return e.map(i=>({vector:i,metrics:{cosine:n.cosineSimilarity(t,i),correlation:n.correlation(t,i),euclidean:n.euclideanDistance(t,i),manhattan:n.manhattanDistance(t,i),resonance:n.resonanceForce(t,i),quantum:n.quantumEntanglement?n.quantumEntanglement(t,i):Math.abs(n.correlation(t,i))}}))}generateIndividualRelationshipHTML(t){return'\n            <div class="individual-relationships">\n                <div class="relationship-header">\n                    <h6>🔗 Vector '.concat(this.state.selectedVector.id,' Relationships</h6>\n                    <div class="metric-selector">\n                        <label for="individual-metric-select">Sort by:</label>\n                        <select id="individual-metric-select" class="mini-select">\n                            <option value="cosine">Cosine Similarity</option>\n                            <option value="correlation">Pearson Correlation</option>\n                            <option value="euclidean">Euclidean Distance (inverted)</option>\n                            <option value="manhattan">Manhattan Distance (inverted)</option>\n                            <option value="resonance">Resonance Force</option>\n                            <option value="quantum">Quantum Entanglement</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class="metrics-overview">\n                    <h6>📊 Metrics Overview</h6>\n                    <div class="metrics-grid" id="metrics-overview-grid">\n                        ').concat(this.generateMetricsOverview(t),'\n                    </div>\n                </div>\n                \n                <div class="relationship-details">\n                    <h6>📋 Detailed Relationships</h6>\n                    <div class="relationships-table" id="individual-relationships-table">\n                        ').concat(this.generateRelationshipsTable(t,"cosine"),"\n                    </div>\n                </div>\n            </div>\n        ")}generateMetricsOverview(t){const e=["cosine","correlation","euclidean","manhattan","resonance","quantum"],n={cosine:"Cosine Similarity",correlation:"Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",resonance:"Resonance Force",quantum:"Quantum Entanglement"},i={cosine:"📐",correlation:"📈",euclidean:"📏",manhattan:"🛣️",resonance:"🌊",quantum:"⚛️"};return e.map(r=>{const a=t.map(d=>Math.abs(d.metrics[r])),o=a.reduce((d,h)=>d+h,0)/a.length,l=Math.max(...a),c=t.find(d=>Math.abs(d.metrics[r])===l);return'\n                <div class="metric-overview-card">\n                    <div class="metric-header">\n                        <span class="metric-icon">'.concat(i[r],'</span>\n                        <span class="metric-name">').concat(n[r],'</span>\n                    </div>\n                    <div class="metric-stats">\n                        <div class="stat-item">\n                            <span class="stat-label">Average:</span>\n                            <span class="stat-value">').concat(o.toFixed(3),'</span>\n                        </div>\n                        <div class="stat-item">\n                            <span class="stat-label">Best Match:</span>\n                            <span class="stat-value">V').concat(c==null?void 0:c.vector.id," (").concat(l.toFixed(3),")</span>\n                        </div>\n                    </div>\n                </div>\n            ")}).join("")}generateRelationshipsTable(t,e){const n=[...t].sort((i,r)=>{const a=e==="euclidean"||e==="manhattan"?-Math.abs(i.metrics[e]):Math.abs(i.metrics[e]);return(e==="euclidean"||e==="manhattan"?-Math.abs(r.metrics[e]):Math.abs(r.metrics[e]))-a});return'\n            <div class="relationships-table-container">\n                <table class="relationships-table">\n                    <thead>\n                        <tr>\n                            <th>Vector</th>\n                            <th>Cosine</th>\n                            <th>Correlation</th>\n                            <th>Euclidean</th>\n                            <th>Manhattan</th>\n                            <th>Resonance</th>\n                            <th>Quantum</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        '.concat(n.map(i=>'\n                            <tr class="relationship-row">\n                                <td class="vector-cell">\n                                    <span class="vector-id">V'.concat(i.vector.id,'</span>\n                                </td>\n                                <td class="metric-cell ').concat(e==="cosine"?"highlighted":"",'">').concat(i.metrics.cosine.toFixed(3),'</td>\n                                <td class="metric-cell ').concat(e==="correlation"?"highlighted":"",'">').concat(i.metrics.correlation.toFixed(3),'</td>\n                                <td class="metric-cell ').concat(e==="euclidean"?"highlighted":"",'">').concat(i.metrics.euclidean.toFixed(3),'</td>\n                                <td class="metric-cell ').concat(e==="manhattan"?"highlighted":"",'">').concat(i.metrics.manhattan.toFixed(3),'</td>\n                                <td class="metric-cell ').concat(e==="resonance"?"highlighted":"",'">').concat(i.metrics.resonance.toFixed(3),'</td>\n                                <td class="metric-cell ').concat(e==="quantum"?"highlighted":"",'">').concat(i.metrics.quantum.toFixed(3),"</td>\n                            </tr>\n                        ")).join(""),"\n                    </tbody>\n                </table>\n            </div>\n        ")}setupIndividualRelationshipControls(t){const e=document.getElementById("individual-metric-select");e&&e.addEventListener("change",n=>{const i=n.target.value,r=document.getElementById("individual-relationships-table");r&&(r.innerHTML=this.generateRelationshipsTable(t,i))})}updateClustering(){console.log("🎯 VectorAnalysisStudio.updateClustering() called"),this.safeExecute(()=>{const t=document.getElementById("clusters-tab"),e=document.getElementById("clusters-enhanced");console.log("Container check:",{mainClusters:!!t,individualClusters:!!e}),t?(console.log("Updating main clusters tab"),this.updateMainClustering(t)):e?(console.log("Updating individual clusters tab"),this.components.clustering||(console.log("Creating new ClusteringAnalyzer instance"),this.components.clustering=new Os(this)),console.log("Calling clustering.update()"),this.components.clustering.update()):console.warn("No clustering container found")},"clustering update")}updateMainClustering(t){const{vectors:e}=this.getState();if(!e||e.length<2){t.innerHTML="<p>Need at least 2 vectors for clustering analysis.</p>";return}const n={studio:this,currentAlgorithm:"kmeans",numClusters:3,generateClusteringHTML(){return'\n                    <div class="clustering-controls">\n                        <div class="control-group">\n                            <label for="main-clustering-algorithm">Algorithm:</label>\n                            <select id="main-clustering-algorithm" class="mini-select">\n                                <option value="kmeans">K-Means</option>\n                                <option value="hierarchical">Hierarchical</option>\n                                <option value="dbscan">DBSCAN</option>\n                            </select>\n                        </div>\n                        <div class="control-group">\n                            <label for="main-num-clusters">Number of Clusters:</label>\n                            <input type="range" id="main-num-clusters" min="2" max="10" value="3">\n                            <span id="main-clusters-value">3</span>\n                        </div>\n                        <button id="main-run-clustering" class="btn-compact">🔄 Run Clustering</button>\n                    </div>\n                    \n                    <div class="clustering-results">\n                        <div class="cluster-summary" id="main-cluster-summary"></div>\n                        <div class="cluster-details" id="main-cluster-details"></div>\n                    </div>\n                '},setupControls(){console.log("🎛️ Setting up main clustering controls..."),setTimeout(()=>{const i=document.getElementById("main-run-clustering");i&&(i.addEventListener("click",()=>{console.log("🔄 Main clustering button clicked!"),this.performClustering()}),console.log("✅ Main clustering button handler registered"))},100)},performClustering(){console.log("🔄 Performing main clustering..."),this.studio.components.clustering||(this.studio.components.clustering=new Os(this.studio));const i=this.studio.getState().vectors,r=this.studio.components.clustering.kMeansClustering(i,this.numClusters);this.renderResults(r)},renderResults(i){const r=document.getElementById("main-cluster-summary"),a=document.getElementById("main-cluster-details");r&&a&&(this.studio.components.clustering||(this.studio.components.clustering=new Os(this.studio)),r.id="cluster-summary",a.id="cluster-details",this.studio.components.clustering.renderClusteringResults(i),r.id="main-cluster-summary",a.id="main-cluster-details")}};t.innerHTML=n.generateClusteringHTML(),n.setupControls(),n.performClustering()}updateStatistics(){this.safeExecute(()=>{this.components.statistics||(this.components.statistics=new yp(this)),this.components.statistics.update()},"statistics update")}showAnalysisPlaceholder(t){t.innerHTML='\n            <div class="analysis-placeholder">\n                <div class="placeholder-icon">🎯</div>\n                <h3>Select a Vector to Begin Analysis</h3>\n                <p>Click on any vector in the visualization or use the dropdown above to start exploring detailed properties and relationships.</p>\n            </div>\n        '}showError(t,e){t.innerHTML='\n            <div class="analysis-error">\n                <div class="error-icon">⚠️</div>\n                <h3>Analysis Error</h3>\n                <p>'.concat(e,"</p>\n            </div>\n        ")}handleVectorSelection(t){this.safeExecute(()=>{const e=parseInt(t.target.value);(e||e===0)&&this.framework.selectVector(e)},"vector selection")}compareVectors(){this.safeExecute(()=>{this.components.comparison||(this.components.comparison=new vp(this)),this.components.comparison.show()},"vector comparison")}exportAnalysis(){this.safeExecute(()=>{this.components.exporter||(this.components.exporter=new _p(this)),this.components.exporter.exportCurrentAnalysis()},"analysis export")}updateElement(t,e){const n=this.elements.get(t)||document.getElementById(t);n&&(n.textContent=e)}getModules(){try{return this.framework.getModules()}catch(t){return console.error("Failed to get modules:",t),{}}}getState(){try{return this.framework.getState()}catch(t){return console.error("Failed to get state:",t),{vectors:[]}}}safeExecute(t,e){try{t()}catch(n){console.error("Error in ".concat(e,":"),n)}}dispose(){try{const{eventBus:t}=this.framework;t.off("stateChanged",this.boundHandlers.onStateChanged),Object.values(this.components).forEach(e=>{e!=null&&e.dispose&&e.dispose()}),this.elements.clear()}catch(t){console.error("Error during disposal:",t)}}populatePatternsAnalysis(t){this.components.patterns||(this.components.patterns=new gp(this)),this.components.patterns.update()}}class mp{constructor(t){this.studio=t,this.chartTypes=["bar","line","histogram","radial"],this.currentChartType="bar"}renderChart(t,e){const n=document.getElementById(t);if(!n||!window.d3)return;n.innerHTML="";const i={top:20,right:20,bottom:40,left:50},r=n.clientWidth-i.left-i.right,a=300-i.top-i.bottom,l=window.d3.select(n).append("svg").attr("width","100%").attr("height","300px").attr("viewBox","0 0 ".concat(n.clientWidth," 300")).append("g").attr("transform","translate(".concat(i.left,",").concat(i.top,")")),c=document.getElementById("chart-type-select");switch((c==null?void 0:c.value)||"bar"){case"line":this.renderLineChart(l,e,r,a);break;case"histogram":this.renderHistogram(l,e,r,a);break;case"radial":this.renderRadialChart(l,e,r,a);break;default:this.renderBarChart(l,e,r,a)}}renderBarChart(t,e,n,i){const r=window.d3.scaleBand().range([0,n]).padding(.1).domain(e.map((o,l)=>l)),a=window.d3.scaleLinear().range([i,0]).domain(window.d3.extent(e));t.selectAll(".bar").data(e).enter().append("rect").attr("class","bar").attr("x",(o,l)=>r(l)).attr("width",r.bandwidth()).attr("y",o=>a(Math.max(0,o))).attr("height",o=>Math.abs(a(o)-a(0))).attr("fill",o=>o>=0?"#4ecdc4":"#f06292").attr("opacity",.8).on("mouseover",(o,l)=>this.showTooltip(o,l)).on("mouseout",()=>this.hideTooltip()),this.addAxes(t,r,a,i,e.length)}renderLineChart(t,e,n,i){const r=window.d3.scaleLinear().range([0,n]).domain([0,e.length-1]),a=window.d3.scaleLinear().range([i,0]).domain(window.d3.extent(e)),o=window.d3.line().x((l,c)=>r(c)).y(l=>a(l)).curve(window.d3.curveMonotoneX);t.append("path").datum(e).attr("fill","none").attr("stroke","#4ecdc4").attr("stroke-width",2).attr("d",o),t.selectAll(".dot").data(e).enter().append("circle").attr("class","dot").attr("cx",(l,c)=>r(c)).attr("cy",l=>a(l)).attr("r",4).attr("fill",l=>l>=0?"#4ecdc4":"#f06292").on("mouseover",(l,c)=>this.showTooltip(l,c)).on("mouseout",()=>this.hideTooltip()),this.addAxes(t,r,a,i,e.length)}renderHistogram(t,e,n,i){const r=window.d3.histogram().domain(window.d3.extent(e)).thresholds(10)(e),a=window.d3.scaleLinear().domain(window.d3.extent(e)).range([0,n]),o=window.d3.scaleLinear().domain([0,window.d3.max(r,l=>l.length)]).range([i,0]);t.selectAll(".bar").data(r).enter().append("rect").attr("class","bar").attr("x",l=>a(l.x0)).attr("width",l=>Math.max(0,a(l.x1)-a(l.x0)-1)).attr("y",l=>o(l.length)).attr("height",l=>i-o(l.length)).attr("fill","#4ecdc4").attr("opacity",.8),t.append("g").attr("transform","translate(0,".concat(i,")")).call(window.d3.axisBottom(a)),t.append("g").call(window.d3.axisLeft(o))}renderRadialChart(t,e,n,i){const r=Math.min(n,i)/2-20,a=n/2,o=i/2,l=window.d3.scaleLinear().domain([0,e.length]).range([0,2*Math.PI]),c=window.d3.scaleLinear().domain(window.d3.extent(e)).range([0,r]);t.append("circle").attr("cx",a).attr("cy",o).attr("r",3).attr("fill","#fff"),e.forEach((d,h)=>{const f=l(h),m=Math.abs(c(d));t.append("line").attr("x1",a).attr("y1",o).attr("x2",a+m*Math.cos(f-Math.PI/2)).attr("y2",o+m*Math.sin(f-Math.PI/2)).attr("stroke",d>=0?"#4ecdc4":"#f06292").attr("stroke-width",2),t.append("circle").attr("cx",a+m*Math.cos(f-Math.PI/2)).attr("cy",o+m*Math.sin(f-Math.PI/2)).attr("r",3).attr("fill",d>=0?"#4ecdc4":"#f06292")})}addAxes(t,e,n,i,r){t.append("g").attr("transform","translate(0,".concat(n(0),")")).call(window.d3.axisBottom(e).tickFormat((a,o)=>o%Math.ceil(r/10)===0?o:"")),t.append("g").call(window.d3.axisLeft(n).ticks(8))}showTooltip(t,e){const n=window.d3.select("body").append("div").attr("class","chart-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","8px").style("border-radius","4px").style("font-size","12px").style("pointer-events","none").style("z-index","1000").text("Value: ".concat(e.toFixed(4))),[i,r]=window.d3.pointer(t,document.body);n.style("left",i+10+"px").style("top",r-10+"px")}hideTooltip(){window.d3.selectAll(".chart-tooltip").remove()}dispose(){}}class gp{constructor(t){this.studio=t}update(){const t=document.getElementById("patterns-analysis");if(!t)return;const{selectedVector:e}=this.studio.state;if(!e){t.innerHTML="<p>No vector selected for pattern analysis.</p>";return}t.innerHTML=this.generatePatternHTML(),this.analyzePatterns(e)}generatePatternHTML(){return'\n            <div class="pattern-detection">\n                <h6>🧩 Pattern Detection</h6>\n                <div class="pattern-results" id="pattern-results"></div>\n            </div>\n            \n            <div class="anomaly-detection">\n                <h6>⚠️ Anomaly Detection</h6>\n                <div class="anomaly-results" id="anomaly-results"></div>\n            </div>\n        '}analyzePatterns(t){const e=this.detectPatterns(t.components),n=this.detectAnomalies(t.components);this.renderPatternResults(e),this.renderAnomalyResults(n)}detectPatterns(t){const e=[],n=this.checkMonotonic(t);n.confidence>.6&&e.push({type:"Monotonic",icon:"📈",description:"".concat(n.direction," trend"),confidence:n.confidence,strength:n.strength});const i=this.checkPeriodic(t);i.confidence>.5&&e.push({type:"Periodic",icon:"🌊",description:"Period: ".concat(i.period),confidence:i.confidence,strength:i.strength});const r=this.checkSymmetry(t);return r.confidence>.7&&e.push({type:"Symmetry",icon:"🪞",description:"".concat(r.type," symmetry"),confidence:r.confidence,strength:r.strength}),e}checkMonotonic(t){let e=0,n=0;for(let c=1;c<t.length;c++)t[c]>t[c-1]?e++:t[c]<t[c-1]&&n++;const i=t.length-1,r=e/i,a=n/i,o=Math.max(r,a),l=r>a?"Increasing":"Decreasing";return{confidence:o,direction:l,strength:o}}checkPeriodic(t){let e=0,n=0;for(let i=2;i<=Math.floor(t.length/3);i++){const r=this.autocorrelation(t,i);r>n&&(n=r,e=i)}return{confidence:n,period:e,strength:n}}autocorrelation(t,e){const n=t.length-e;if(n<=0)return 0;const i=t.reduce((o,l)=>o+l,0)/t.length;let r=0,a=0;for(let o=0;o<n;o++){const l=t[o]-i,c=t[o+e]-i;r+=l*c,a+=l*l}return a>0?Math.abs(r/a):0}checkSymmetry(t){const e=t.length;let n=0;for(let r=0;r<Math.floor(e/2);r++){const a=Math.abs(t[r]-t[e-1-r]),o=(Math.abs(t[r])+Math.abs(t[e-1-r]))/2;n+=o>0?1-a/o:1}const i=n/Math.floor(e/2);return{confidence:Math.max(0,i),type:"Reflection",strength:i}}detectAnomalies(t){const e=t.reduce((o,l)=>o+l,0)/t.length,n=t.reduce((o,l)=>o+Math.pow(l-e,2),0)/t.length,i=Math.sqrt(n),r=2.5,a=[];return t.forEach((o,l)=>{const c=Math.abs((o-e)/i);c>r&&a.push({index:l,value:o,zScore:c,severity:c>3?"High":"Medium"})}),a}renderPatternResults(t){const e=document.getElementById("pattern-results");if(e){if(t.length===0){e.innerHTML="<p>No significant patterns detected.</p>";return}e.innerHTML=t.map(n=>'\n            <div class="pattern-item">\n                <div class="pattern-header">\n                    <span class="pattern-icon">'.concat(n.icon,'</span>\n                    <span class="pattern-type">').concat(n.type,'</span>\n                    <span class="pattern-confidence">').concat((n.confidence*100).toFixed(1),'%</span>\n                </div>\n                <div class="pattern-description">').concat(n.description,'</div>\n                <div class="pattern-strength-bar">\n                    <div class="pattern-strength-fill" style="width: ').concat(n.strength*100,'%"></div>\n                </div>\n            </div>\n        ')).join("")}}renderAnomalyResults(t){const e=document.getElementById("anomaly-results");if(e){if(t.length===0){e.innerHTML="<p>No anomalies detected.</p>";return}e.innerHTML='\n            <div class="anomaly-summary">\n                <span class="anomaly-count">'.concat(t.length,' anomalies detected</span>\n            </div>\n            <div class="anomaly-list">\n                ').concat(t.map(n=>'\n                    <div class="anomaly-item '.concat(n.severity.toLowerCase(),'">\n                        <div class="anomaly-position">Dim ').concat(n.index+1,'</div>\n                        <div class="anomaly-value">').concat(n.value.toFixed(4),'</div>\n                        <div class="anomaly-score">Z: ').concat(n.zScore.toFixed(2),'</div>\n                        <div class="anomaly-severity">').concat(n.severity,"</div>\n                    </div>\n                ")).join(""),"\n            </div>\n        ")}}dispose(){}}class vp{constructor(t){this.studio=t}show(){const{vectors:t}=this.studio.getState();if(!t||t.length<2){alert("Need at least 2 vectors for comparison.");return}this.createComparisonModal(t)}createComparisonModal(t){const e=document.createElement("div");e.className="comparison-modal-overlay",e.innerHTML='\n            <div class="comparison-modal">\n                <div class="comparison-header">\n                    <h3>🔍 Vector Comparison</h3>\n                    <button class="close-comparison">✕</button>\n                </div>\n                <div class="comparison-content">\n                    <div class="vector-selector-grid">\n                        <div class="selector-group">\n                            <label>Vector A:</label>\n                            <select id="vector-a-select">\n                                '.concat(t.map(n=>'<option value="'.concat(n.id,'">Vector ').concat(n.id,"</option>")).join(""),'\n                            </select>\n                        </div>\n                        <div class="selector-group">\n                            <label>Vector B:</label>\n                            <select id="vector-b-select">\n                                ').concat(t.map(n=>'<option value="'.concat(n.id,'">Vector ').concat(n.id,"</option>")).join(""),'\n                            </select>\n                        </div>\n                    </div>\n                    <div class="comparison-results" id="comparison-results"></div>\n                </div>\n            </div>\n        '),document.body.appendChild(e),this.setupComparisonEventHandlers(e,t),this.performComparison(t)}setupComparisonEventHandlers(t,e){const n=t.querySelector(".close-comparison"),i=t.querySelector("#vector-a-select"),r=t.querySelector("#vector-b-select");n.addEventListener("click",()=>{document.body.removeChild(t)}),t.addEventListener("click",a=>{a.target===t&&document.body.removeChild(t)}),i.addEventListener("change",()=>this.performComparison(e)),r.addEventListener("change",()=>this.performComparison(e))}performComparison(t){const e=document.getElementById("vector-a-select"),n=document.getElementById("vector-b-select"),i=document.getElementById("comparison-results");if(!e||!n||!i)return;const r=t.find(l=>l.id===parseInt(e.value)),a=t.find(l=>l.id===parseInt(n.value));if(!r||!a)return;const o=this.calculateComparison(r,a);this.renderComparisonResults(o,i)}calculateComparison(t,e){const{forceCalculator:n}=this.studio.getModules();return{vectorA:t,vectorB:e,cosineSimilarity:n.cosineSimilarity(t,e),euclideanDistance:n.euclideanDistance(t,e),manhattanDistance:n.manhattanDistance(t,e),magnitudeA:n.magnitude(t),magnitudeB:n.magnitude(e),dotProduct:this.dotProduct(t.components,e.components),angleBetween:this.angleBetween(t.components,e.components)}}dotProduct(t,e){return t.reduce((n,i,r)=>n+i*e[r],0)}angleBetween(t,e){const n=this.dotProduct(t,e),i=Math.sqrt(t.reduce((a,o)=>a+o*o,0)),r=Math.sqrt(e.reduce((a,o)=>a+o*o,0));return Math.acos(n/(i*r))*(180/Math.PI)}renderComparisonResults(t,e){e.innerHTML='\n            <div class="comparison-metrics">\n                <div class="metric-card">\n                    <div class="metric-label">Cosine Similarity</div>\n                    <div class="metric-value">'.concat(t.cosineSimilarity.toFixed(4),'</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Euclidean Distance</div>\n                    <div class="metric-value">').concat(t.euclideanDistance.toFixed(4),'</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Manhattan Distance</div>\n                    <div class="metric-value">').concat(t.manhattanDistance.toFixed(4),'</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Angle Between</div>\n                    <div class="metric-value">').concat(t.angleBetween.toFixed(2),'°</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Dot Product</div>\n                    <div class="metric-value">').concat(t.dotProduct.toFixed(4),'</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Magnitude Ratio</div>\n                    <div class="metric-value">').concat((t.magnitudeA/t.magnitudeB).toFixed(4),"</div>\n                </div>\n            </div>\n        ")}dispose(){}}class _p{constructor(t){this.studio=t}exportCurrentAnalysis(){const{vectors:t}=this.studio.getState(),e=this.studio.state.selectedVector;if(!t||t.length===0){alert("No vectors available for export.");return}const n=this.gatherAnalysisData(t,e);this.showExportModal(n)}gatherAnalysisData(t,e){const{forceCalculator:n}=this.studio.getModules(),i={timestamp:new Date().toISOString(),totalVectors:t.length,selectedVector:(e==null?void 0:e.id)||null,globalStats:this.calculateGlobalStats(t,n),vectors:t.map(r=>({id:r.id,components:r.components,magnitude:n.magnitude(r),entropy:n.informationEntropy(r),quantums:n.getInformationQuantums(r)}))};return e&&(i.selectedVectorAnalysis=this.getSelectedVectorAnalysis(e,n)),i}calculateGlobalStats(t,e){var r;const n=t.map(a=>e.magnitude(a)),i=t.map(a=>e.informationEntropy(a));return{avgMagnitude:n.reduce((a,o)=>a+o,0)/n.length,avgEntropy:i.reduce((a,o)=>a+o,0)/i.length,dimensions:((r=t[0])==null?void 0:r.components.length)||0}}getSelectedVectorAnalysis(t,e){return{id:t.id,magnitude:e.magnitude(t),entropy:e.informationEntropy(t),quantums:e.getInformationQuantums(t),statistics:{mean:t.components.reduce((n,i)=>n+i,0)/t.components.length,min:Math.min(...t.components),max:Math.max(...t.components)}}}showExportModal(t){const e=document.createElement("div");e.className="export-modal-overlay",e.innerHTML='\n            <div class="export-modal">\n                <div class="export-header">\n                    <h3>📤 Export Analysis</h3>\n                    <button class="close-export">✕</button>\n                </div>\n                <div class="export-content">\n                    <div class="export-options">\n                        <button class="export-btn" data-format="json">📄 Export as JSON</button>\n                        <button class="export-btn" data-format="csv">📊 Export as CSV</button>\n                        <button class="export-btn" data-format="txt">📝 Export as Text Report</button>\n                    </div>\n                    <div class="export-preview">\n                        <h4>Preview:</h4>\n                        <pre id="export-preview-content">'.concat(JSON.stringify(t,null,2),"</pre>\n                    </div>\n                </div>\n            </div>\n        "),document.body.appendChild(e),this.setupExportEventHandlers(e,t)}setupExportEventHandlers(t,e){const n=t.querySelector(".close-export"),i=t.querySelectorAll(".export-btn");t.querySelector("#export-preview-content"),n.addEventListener("click",()=>{document.body.removeChild(t)}),t.addEventListener("click",r=>{r.target===t&&document.body.removeChild(t)}),i.forEach(r=>{r.addEventListener("click",()=>{const a=r.getAttribute("data-format");this.performExport(e,a),document.body.removeChild(t)})})}performExport(t,e){let n,i,r;switch(e){case"json":n=JSON.stringify(t,null,2),i="vector-analysis-".concat(Date.now(),".json"),r="application/json";break;case"csv":n=this.convertToCSV(t),i="vector-analysis-".concat(Date.now(),".csv"),r="text/csv";break;case"txt":n=this.convertToTextReport(t),i="vector-analysis-".concat(Date.now(),".txt"),r="text/plain";break;default:return}this.downloadFile(n,i,r)}convertToCSV(t){let e="Vector ID,Magnitude,Entropy,Excitatory Quantum,Inhibitory Quantum\n";return t.vectors.forEach(n=>{e+="".concat(n.id,",").concat(n.magnitude,",").concat(n.entropy,",").concat(n.quantums.excitatory,",").concat(n.quantums.inhibitory,"\n")}),e}convertToTextReport(t){let e="Vector Analysis Report\n";return e+="Generated: ".concat(t.timestamp,"\n"),e+="Total Vectors: ".concat(t.totalVectors,"\n"),e+="Dimensions: ".concat(t.globalStats.dimensions,"\n\n"),e+="Global Statistics:\n",e+="Average Magnitude: ".concat(t.globalStats.avgMagnitude.toFixed(4),"\n"),e+="Average Entropy: ".concat(t.globalStats.avgEntropy.toFixed(4),"\n\n"),t.selectedVectorAnalysis&&(e+="Selected Vector Analysis (Vector ".concat(t.selectedVectorAnalysis.id,"):\n"),e+="Magnitude: ".concat(t.selectedVectorAnalysis.magnitude.toFixed(4),"\n"),e+="Entropy: ".concat(t.selectedVectorAnalysis.entropy.toFixed(4),"\n"),e+="Excitatory Quantum: ".concat(t.selectedVectorAnalysis.quantums.excitatory.toFixed(4),"\n"),e+="Inhibitory Quantum: ".concat(t.selectedVectorAnalysis.quantums.inhibitory.toFixed(4),"\n\n")),e+="Detailed Vector Data:\n",t.vectors.forEach(n=>{e+="Vector ".concat(n.id,": Magnitude=").concat(n.magnitude.toFixed(4),", Entropy=").concat(n.entropy.toFixed(4),"\n")}),e}downloadFile(t,e,n){const i=new Blob([t],{type:n}),r=URL.createObjectURL(i),a=document.createElement("a");a.href=r,a.download=e,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(r)}dispose(){}}class xp{constructor(t){this.studio=t,this.metrics=["cosine","correlation","euclidean","manhattan","resonance","quantum"],this.currentMetric="cosine"}update(){const t=document.getElementById("relationships-enhanced");if(!t)return;const{vectors:e}=this.studio.getState();if(!e||e.length<2){t.innerHTML="<p>Need at least 2 vectors for relationship analysis.</p>";return}t.innerHTML=this.generateRelationshipHTML(),this.calculateRelationships(),this.setupRelationshipControls()}generateRelationshipHTML(){return'\n            <div class="relationship-controls">\n                <div class="control-group">\n                    <label for="similarity-metric">Similarity Metric:</label>\n                    <select id="similarity-metric" class="mini-select">\n                        <option value="cosine">Cosine Similarity</option>\n                        <option value="correlation">Pearson Correlation</option>\n                        <option value="euclidean">Euclidean Distance</option>\n                        <option value="manhattan">Manhattan Distance</option>\n                        <option value="resonance">Resonance Force</option>\n                        <option value="quantum">Quantum Entanglement</option>\n                    </select>\n                </div>\n                <div class="control-group">\n                    <label for="similarity-threshold">Threshold:</label>\n                    <input type="range" id="similarity-threshold" min="0" max="1" step="0.01" value="0.5">\n                    <span id="threshold-value">0.5</span>\n                </div>\n            </div>\n            \n            <div class="relationship-visualization">\n                <div class="similarity-matrix" id="similarity-matrix"></div>\n                <div class="relationship-list" id="relationship-list"></div>\n            </div>\n        '}calculateRelationships(){const{vectors:t}=this.studio.getState(),{forceCalculator:e}=this.studio.getModules(),n=[],i=[];for(let r=0;r<t.length;r++){i[r]=[];for(let a=0;a<t.length;a++){let o;switch(this.currentMetric){case"correlation":o=e.correlation(t[r],t[a]);break;case"euclidean":o=1/(1+e.euclideanDistance(t[r],t[a]));break;case"manhattan":o=1/(1+e.manhattanDistance(t[r],t[a]));break;case"resonance":o=e.resonanceForce(t[r],t[a]);break;case"quantum":o=e.quantumEntanglement?e.quantumEntanglement(t[r],t[a]):Math.abs(e.correlation(t[r],t[a]));break;default:o=e.cosineSimilarity(t[r],t[a])}i[r][a]=o,r<a&&n.push({vector1:t[r],vector2:t[a],similarity:Math.abs(o),rawSimilarity:o})}}this.renderSimilarityMatrix(i,t),this.renderRelationshipList(n)}renderSimilarityMatrix(t,e){const n=document.getElementById("similarity-matrix");if(!n)return;if(n.innerHTML="<h6>📊 Similarity Matrix</h6>",!window.d3){n.innerHTML+='<div class="matrix-fallback">D3.js not available. Matrix visualization disabled.</div>';return}const i=Math.min(300,n.clientWidth||300),r=i/e.length,a=window.d3.select(n).append("svg").attr("width",i).attr("height",i),o=window.d3.scaleSequential(window.d3.interpolateRdYlBu).domain([-1,1]);for(let l=0;l<e.length;l++)for(let c=0;c<e.length;c++)a.append("rect").attr("x",c*r).attr("y",l*r).attr("width",r).attr("height",r).attr("fill",o(t[l][c])).attr("stroke","white").attr("stroke-width",1),r>20&&a.append("text").attr("x",c*r+r/2).attr("y",l*r+r/2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",Math.abs(t[l][c])>.5?"white":"black").attr("font-size","10px").text(t[l][c].toFixed(2))}renderRelationshipList(t){var r;const e=document.getElementById("relationship-list");if(!e)return;t.sort((a,o)=>o.similarity-a.similarity);const n=parseFloat(((r=document.getElementById("similarity-threshold"))==null?void 0:r.value)||.5),i=t.filter(a=>a.similarity>=n);e.innerHTML="\n            <h6>🔗 Vector Relationships (".concat(i.length,')</h6>\n            <div class="relationships-list">\n                ').concat(i.map(a=>'\n                    <div class="relationship-item">\n                        <div class="relationship-vectors">\n                            <span class="vector-id">V'.concat(a.vector1.id,'</span>\n                            <span class="relationship-arrow">↔</span>\n                            <span class="vector-id">V').concat(a.vector2.id,'</span>\n                        </div>\n                        <div class="relationship-strength">\n                            <div class="strength-bar">\n                                <div class="strength-fill" style="width: ').concat(a.similarity*100,'%"></div>\n                            </div>\n                            <span class="strength-value">').concat(a.rawSimilarity.toFixed(3),"</span>\n                        </div>\n                    </div>\n                ")).join(""),"\n            </div>\n        ")}setupRelationshipControls(){const t=document.getElementById("similarity-metric"),e=document.getElementById("similarity-threshold"),n=document.getElementById("threshold-value");t&&t.addEventListener("change",i=>{this.currentMetric=i.target.value,this.calculateRelationships()}),e&&n&&e.addEventListener("input",i=>{n.textContent=i.target.value,this.calculateRelationships()})}dispose(){}}class Os{constructor(t){this.studio=t,this.algorithms=["kmeans","hierarchical","dbscan"],this.currentAlgorithm="kmeans",this.numClusters=3}update(){console.log("🔍 ClusteringAnalyzer.update() called");const t=document.getElementById("clusters-enhanced");if(!t){console.warn("clusters-enhanced container not found");return}const{vectors:e}=this.studio.getState();if(console.log("Vectors available for clustering:",(e==null?void 0:e.length)||0),!e||e.length<2){console.log("Not enough vectors for clustering"),t.innerHTML="<p>Need at least 2 vectors for clustering analysis.</p>";return}const n=t.querySelector(".clustering-controls");console.log("Container has controls:",!!n),n?console.log("Controls already exist, skipping setup"):(console.log("Generating clustering HTML and setting up controls..."),t.innerHTML=this.generateClusteringHTML(),this.setupClusteringControls()),console.log("Performing initial clustering..."),this.performClustering()}generateClusteringHTML(){return'\n            <div class="clustering-controls">\n                <div class="control-group">\n                    <label for="clustering-algorithm">Algorithm:</label>\n                    <select id="clustering-algorithm" class="mini-select">\n                        <option value="kmeans">K-Means</option>\n                        <option value="hierarchical">Hierarchical</option>\n                        <option value="dbscan">DBSCAN</option>\n                    </select>\n                </div>\n                <div class="control-group">\n                    <label for="num-clusters">Number of Clusters:</label>\n                    <input type="range" id="num-clusters" min="2" max="10" value="3">\n                    <span id="clusters-value">3</span>\n                </div>\n                <button id="run-clustering" class="btn-compact">🔄 Run Clustering</button>\n            </div>\n            \n            <div class="clustering-results">\n                <div class="cluster-summary" id="cluster-summary"></div>\n                <div class="cluster-details" id="cluster-details"></div>\n            </div>\n        '}performClustering(){console.log("🔄 Starting clustering analysis...");try{const{vectors:t}=this.studio.getState();if(!t||t.length<2){console.warn("Not enough vectors for clustering:",(t==null?void 0:t.length)||0);return}console.log("Clustering",t.length,"vectors into",this.numClusters,"clusters");const e=this.kMeansClustering(t,this.numClusters);console.log("Clustering complete. Results:",e),this.renderClusteringResults(e)}catch(t){console.error("Error during clustering:",t);const e=document.getElementById("clusters-enhanced");e&&(e.innerHTML='<div class="error-message">Clustering failed: '.concat(t.message,"</div>"))}}kMeansClustering(t,e){const n=Array.from({length:e},()=>({centroid:null,vectors:[]}));for(let o=0;o<e;o++){const l=t[Math.floor(Math.random()*t.length)];n[o].centroid=[...l.components]}let i=!0,r=0;const a=100;for(;i&&r<a;)i=!1,n.forEach(o=>o.vectors=[]),t.forEach(o=>{let l=1/0,c=0;n.forEach((d,h)=>{const f=this.euclideanDistance(o.components,d.centroid);f<l&&(l=f,c=h)}),n[c].vectors.push(o)}),n.forEach(o=>{if(o.vectors.length>0){const l=new Array(o.vectors[0].components.length).fill(0);o.vectors.forEach(d=>{d.components.forEach((h,f)=>{l[f]+=h/o.vectors.length})}),this.euclideanDistance(o.centroid,l)>.001&&(i=!0),o.centroid=l}}),r++;return n}euclideanDistance(t,e){return Math.sqrt(t.reduce((n,i,r)=>n+Math.pow(i-e[r],2),0))}renderClusteringResults(t){console.log("📊 Rendering clustering results for",t.length,"clusters");const e=document.getElementById("cluster-summary"),n=document.getElementById("cluster-details");if(console.log("Containers found:",{summary:!!e,details:!!n}),!e||!n){console.error("Missing clustering result containers:",{summary:e,details:n});return}e.innerHTML='\n            <h6>📊 Clustering Summary</h6>\n            <div class="cluster-stats">\n                <div class="stat-item">\n                    <span class="stat-label">Clusters:</span>\n                    <span class="stat-value">'.concat(t.length,'</span>\n                </div>\n                <div class="stat-item">\n                    <span class="stat-label">Algorithm:</span>\n                    <span class="stat-value">').concat(this.currentAlgorithm,'</span>\n                </div>\n                <div class="stat-item">\n                    <span class="stat-label">Vectors:</span>\n                    <span class="stat-value">').concat(t.reduce((r,a)=>r+a.vectors.length,0),"</span>\n                </div>\n            </div>\n        ");const i=["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c"];n.innerHTML='\n            <h6>🎯 Cluster Details</h6>\n            <div class="clusters-list">\n                '.concat(t.map((r,a)=>'\n                    <div class="cluster-item">\n                        <div class="cluster-header">\n                            <div class="cluster-color" style="background-color: '.concat(i[a%i.length],'"></div>\n                            <span class="cluster-title">Cluster ').concat(a+1,'</span>\n                            <span class="cluster-size">').concat(r.vectors.length,' vectors</span>\n                        </div>\n                        <div class="cluster-vectors">\n                            ').concat(r.vectors.map(o=>'<span class="vector-chip">V'.concat(o.id,"</span>")).join(""),'\n                        </div>\n                        <div class="cluster-centroid">\n                            <strong>Centroid:</strong> [').concat(r.centroid.map(o=>o.toFixed(3)).join(", "),"]\n                        </div>\n                    </div>\n                ")).join(""),"\n            </div>\n        ")}setupClusteringControls(){console.log("🎛️ Setting up clustering controls..."),setTimeout(()=>{const t=document.getElementById("clustering-algorithm"),e=document.getElementById("num-clusters"),n=document.getElementById("clusters-value"),i=document.getElementById("run-clustering");console.log("Controls found (after timeout):",{algorithm:!!t,slider:!!e,value:!!n,button:!!i});const r=document.querySelectorAll("#run-clustering");if(console.log("Number of run-clustering buttons found:",r.length),t&&t.addEventListener("change",a=>{console.log("Algorithm changed to:",a.target.value),this.currentAlgorithm=a.target.value}),e&&n&&e.addEventListener("input",a=>{this.numClusters=parseInt(a.target.value),n.textContent=this.numClusters,console.log("Number of clusters changed to:",this.numClusters)}),i)console.log("Attempting to attach click handler..."),i.addEventListener("click",a=>{a.preventDefault(),a.stopPropagation(),console.log("🔄 Run clustering button clicked! (method 1)"),this.performClustering()}),i.onclick=a=>{a.preventDefault(),a.stopPropagation(),console.log("🔄 Run clustering button clicked! (method 2)"),this.performClustering()},i.addEventListener("mousedown",()=>{console.log("🖱️ Run clustering button mousedown detected")}),i.addEventListener("mouseup",()=>{console.log("🖱️ Run clustering button mouseup detected")}),console.log("✅ Run clustering button handler registered"),console.log("Button properties:",{id:i.id,className:i.className,disabled:i.disabled,style:i.style.cssText,offsetParent:i.offsetParent});else{console.error("❌ Run clustering button not found!");const a=document.querySelector(".btn-compact");console.log("Button found by class:",!!a)}},100)}dispose(){}}class yp{constructor(t){this.studio=t}update(){const t=document.getElementById("statistics-tab");if(!t)return;const{vectors:e}=this.studio.getState();if(!e||e.length===0){t.innerHTML="<p>No vectors available for analysis.</p>";return}t.innerHTML=this.generateStatisticsHTML(),this.calculateGlobalStatistics()}generateStatisticsHTML(){return'\n            <div class="global-statistics">\n                <h6>📈 Global Vector Statistics</h6>\n                <div class="stats-grid" id="global-stats-grid"></div>\n            </div>\n            \n            <div class="distribution-analysis">\n                <h6>📊 Distribution Analysis</h6>\n                <div class="distribution-charts" id="distribution-charts"></div>\n            </div>\n            \n            <div class="correlation-analysis">\n                <h6>🔗 Dimension Correlation Analysis</h6>\n                <div class="correlation-heatmap" id="correlation-heatmap"></div>\n            </div>\n        '}calculateGlobalStatistics(){const{vectors:t}=this.studio.getState(),{forceCalculator:e}=this.studio.getModules(),n=this.computeGlobalStats(t,e);this.renderGlobalStats(n),this.renderDistributionAnalysis(t),this.renderCorrelationAnalysis(t)}computeGlobalStats(t,e){const n=t.map(a=>e.magnitude(a)),i=t.map(a=>e.informationEntropy(a)),r=t.flatMap(a=>a.components);return{totalVectors:t.length,avgMagnitude:n.reduce((a,o)=>a+o,0)/n.length,stdMagnitude:this.standardDeviation(n),avgEntropy:i.reduce((a,o)=>a+o,0)/i.length,stdEntropy:this.standardDeviation(i),globalMean:r.reduce((a,o)=>a+o,0)/r.length,globalStd:this.standardDeviation(r),minComponent:Math.min(...r),maxComponent:Math.max(...r),sparsity:r.filter(a=>Math.abs(a)<.001).length/r.length}}standardDeviation(t){const e=t.reduce((i,r)=>i+r,0)/t.length,n=t.reduce((i,r)=>i+Math.pow(r-e,2),0)/t.length;return Math.sqrt(n)}renderGlobalStats(t){const e=document.getElementById("global-stats-grid");e&&(e.innerHTML='\n            <div class="stat-card-global">\n                <div class="stat-icon">📊</div>\n                <div class="stat-content">\n                    <div class="stat-value">'.concat(t.totalVectors,'</div>\n                    <div class="stat-label">Total Vectors</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📏</div>\n                <div class="stat-content">\n                    <div class="stat-value">').concat(t.avgMagnitude.toFixed(3),'</div>\n                    <div class="stat-label">Avg Magnitude</div>\n                    <div class="stat-detail">±').concat(t.stdMagnitude.toFixed(3),'</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">🌊</div>\n                <div class="stat-content">\n                    <div class="stat-value">').concat(t.avgEntropy.toFixed(3),'</div>\n                    <div class="stat-label">Avg Entropy</div>\n                    <div class="stat-detail">±').concat(t.stdEntropy.toFixed(3),'</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">🎯</div>\n                <div class="stat-content">\n                    <div class="stat-value">').concat((t.sparsity*100).toFixed(1),'%</div>\n                    <div class="stat-label">Global Sparsity</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📈</div>\n                <div class="stat-content">\n                    <div class="stat-value">').concat(t.globalMean.toFixed(3),'</div>\n                    <div class="stat-label">Global Mean</div>\n                    <div class="stat-detail">±').concat(t.globalStd.toFixed(3),'</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📉</div>\n                <div class="stat-content">\n                    <div class="stat-value">[').concat(t.minComponent.toFixed(2),", ").concat(t.maxComponent.toFixed(2),']</div>\n                    <div class="stat-label">Value Range</div>\n                </div>\n            </div>\n        '))}renderDistributionAnalysis(t){const e=document.getElementById("distribution-charts");if(!e||!window.d3)return;const n=t.flatMap(f=>f.components);e.innerHTML='<div class="distribution-chart" id="component-distribution"></div>';const i=document.getElementById("component-distribution"),r=i.clientWidth||400,a=200,o={top:20,right:20,bottom:40,left:50},l=window.d3.select(i).append("svg").attr("width",r).attr("height",a),c=window.d3.histogram().domain(window.d3.extent(n)).thresholds(20)(n),d=window.d3.scaleLinear().domain(window.d3.extent(n)).range([o.left,r-o.right]),h=window.d3.scaleLinear().domain([0,window.d3.max(c,f=>f.length)]).range([a-o.bottom,o.top]);l.selectAll(".bar").data(c).enter().append("rect").attr("class","bar").attr("x",f=>d(f.x0)).attr("width",f=>Math.max(0,d(f.x1)-d(f.x0)-1)).attr("y",f=>h(f.length)).attr("height",f=>a-o.bottom-h(f.length)).attr("fill","#4ecdc4").attr("opacity",.8),l.append("g").attr("transform","translate(0,".concat(a-o.bottom,")")).call(window.d3.axisBottom(d)),l.append("g").attr("transform","translate(".concat(o.left,",0)")).call(window.d3.axisLeft(h))}renderCorrelationAnalysis(t){const e=document.getElementById("correlation-heatmap");if(!e||!window.d3||t.length===0)return;const n=t[0].components.length;if(n>20){e.innerHTML="<p>Too many dimensions for correlation heatmap display.</p>";return}const i=this.calculateCorrelationMatrix(t),r=Math.min(400,e.clientWidth),a=r/n;e.innerHTML="";const o=window.d3.select(e).append("svg").attr("width",r).attr("height",r),l=window.d3.scaleSequential(window.d3.interpolateRdBu).domain([-1,1]);for(let c=0;c<n;c++)for(let d=0;d<n;d++)o.append("rect").attr("x",d*a).attr("y",c*a).attr("width",a).attr("height",a).attr("fill",l(i[c][d])).attr("stroke","white").attr("stroke-width",1),a>15&&o.append("text").attr("x",d*a+a/2).attr("y",c*a+a/2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",Math.abs(i[c][d])>.5?"white":"black").attr("font-size","8px").text(i[c][d].toFixed(2))}calculateCorrelationMatrix(t){const e=t[0].components.length,n=[];for(let i=0;i<e;i++){n[i]=[];for(let r=0;r<e;r++){const a=t.map(l=>l.components[i]),o=t.map(l=>l.components[r]);n[i][r]=this.correlation(a,o)}}return n}correlation(t,e){const n=t.length,i=t.reduce((c,d)=>c+d,0)/n,r=e.reduce((c,d)=>c+d,0)/n;let a=0,o=0,l=0;for(let c=0;c<n;c++){const d=t[c]-i,h=e[c]-r;a+=d*h,o+=d*d,l+=h*h}return a/Math.sqrt(o*l)}dispose(){}}class Mp{constructor(){if(typeof window.d3>"u")throw new Error("D3.js is not loaded. Please ensure D3 is available globally before initializing VectorAtomicFramework.");this.eventBus=new Xo,this.configManager=new $o,this.stateManager=new Wo(this);const t=this.configManager.getConfig();this.svg=window.d3.select("#main-viz").attr("width",t.width).attr("height",t.height).attr("viewBox","0 0 ".concat(t.width," ").concat(t.height)),this.modules={forceCalculator:new zo,vectorRenderer:new Bo(this.svg,this),uiController:new ko(this),fileHandler:new Ho(this),animationEngine:new Go(this.svg,this),keyboardShortcuts:new qo(this),vectorOperations:ai,analysisEngine:new jo(this),threeJSVisualization:null,periodicTableVisualization:null,neuralNetworkMode:new fp(this),vectorAnalysisStudio:null},this.modules.fileHandler.ui=this.modules.uiController,this.modules.vectorAnalysisStudio=new pp(this),this.initialize()}initialize(){this.eventBus.on("stateChanged",t=>{const e=t&&t.fullRender;this.render(e)}),this.eventBus.on("configChanged",()=>{this.render(!0),this.modules.uiController.updateControls()}),this.modules.uiController.setupControls(),this.stateManager.generateVectors(),this.modules.animationEngine.start(),this.modules.keyboardShortcuts.initialize()}render(t=!1){this.modules.vectorRenderer.render(t),this.modules.uiController.updateVectorDetails()}updateConfig(t,e){this.configManager.updateConfig(t,e),(t==="dimensions"||t==="numVectors")&&this.stateManager.generateVectors(),this.eventBus.emit("configChanged")}renderMath(t=document.body){if(typeof window.renderMathInElement=="function")try{window.renderMathInElement(t,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,trust:!0})}catch(e){console.warn("KaTeX rendering failed:",e)}}selectVector(t){this.stateManager.selectVector(t)}addInputVector(){this.modules.uiController.showAddVectorModal()}getState(){return this.stateManager.state}getConfig(){return this.configManager.getConfig()}getModules(){return this.modules}notify(t,e){this.eventBus.emit(t,e)}initialize3DVisualization(t){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.dispose(),this.modules.threeJSVisualization=new up(t,this),this.eventBus.on("vectorsUpdated",()=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onVectorsUpdated(this.stateManager.getVectors())}),this.eventBus.on("analysisCompleted",n=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onAnalysisCompleted(n)}),this.eventBus.on("vectorSelected",n=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onVectorSelected(n)});const e=this.stateManager.getVectors();return e.length>0&&this.modules.threeJSVisualization.onVectorsUpdated(e),this.modules.threeJSVisualization}dispose3DVisualization(){this.modules.threeJSVisualization&&(this.modules.threeJSVisualization.dispose(),this.modules.threeJSVisualization=null)}update3DSettings(t){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.updateSettings(t)}export3DScene(){return this.modules.threeJSVisualization?this.modules.threeJSVisualization.exportScene():null}import3DScene(t){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.importScene(t)}initializePeriodicTable(t){return this.modules.periodicTableVisualization&&(this.modules.periodicTableVisualization=null),this.modules.periodicTableVisualization=new hp(t,this),this.modules.periodicTableVisualization}activateNeuralNetworkMode(t=null){this.modules.neuralNetworkMode.activate(t)}deactivateNeuralNetworkMode(){this.modules.neuralNetworkMode.deactivate()}isNeuralModeActive(){return this.modules.neuralNetworkMode.isNeuralModeActive()}setActivationFunction(t){this.modules.forceCalculator.activationFunction=t,this.isNeuralModeActive()&&this.modules.neuralNetworkMode.updateNeuralNetwork(),this.notify("activationFunctionChanged",{function:t})}getActivationFunction(){return this.modules.forceCalculator.activationFunction}setLearningRate(t){this.modules.forceCalculator.learningRate=t,this.isNeuralModeActive()&&this.modules.neuralNetworkMode.updateNeuralNetwork(),this.notify("learningRateChanged",{rate:t})}getLearningRate(){return this.modules.forceCalculator.learningRate}getAvailableActivationFunctions(){return["sigmoid","tanh","relu","leaky_relu","softplus","swish","softmax","softermax","soft_sigmoid"]}setForceType(t){this.updateConfig("forceType",t)}getAvailableForceTypes(){return["resonance","cosine","correlation","euclidean","manhattan","quantum"]}getEnhancedVectorAnalysis(t){const e=this.stateManager.state.vectors.find(i=>i.id===t);if(!e)return null;const n=this.stateManager.state.vectors;return this.modules.forceCalculator.getEnhancedVectorStatistics(e,n)}exportEnhancedData(){const t=this.getState(),e=this.getConfig();return{vectors:t.vectors,inputVector:t.inputVector,selectedVectorId:t.selectedVectorId,config:e,periodicTableData:this.modules.periodicTableVisualization?this.modules.periodicTableVisualization.exportPeriodicData():null,neuralNetworkData:this.modules.neuralNetworkMode.isNeuralModeActive()?this.modules.neuralNetworkMode.exportNeuralNetworkData():null,timestamp:new Date().toISOString(),version:"2.0.0"}}}window.d3=Po;function Sp(){try{return window.katex=Bs,window.renderMathInElement=ns,ns(document.body,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,trust:!0,macros:{"\\vec":"\\mathbf{#1}","\\norm":"\\left\\|#1\\right\\|","\\cos":"\\text{cos}","\\sin":"\\text{sin}","\\dot":"\\cdot"}}),window.renderMath=function(s=document.body){try{ns(s,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,macros:{"\\vec":"\\mathbf{#1}","\\norm":"\\left\\|#1\\right\\|","\\cos":"\\text{cos}","\\sin":"\\text{sin}","\\dot":"\\cdot"}})}catch(t){console.warn("Math rendering error:",t)}},console.log("KaTeX initialized successfully with npm package"),!0}catch(s){return console.error("KaTeX initialization failed:",s),!1}}document.addEventListener("DOMContentLoaded",function(){const s=Sp();try{const t=new Mp;window.VectoVerse=t,console.log("VectoVerse initialized successfully!");const e=document.querySelector(".visualization-container");e&&(t.initializePeriodicTable(e),console.log("Periodic table initialized")),Ep(t),s&&setTimeout(()=>window.renderMath(),100),document.querySelectorAll(".sidebar-panel.collapsible > h3").forEach(n=>{n.addEventListener("click",()=>{n.parentElement.classList.toggle("collapsed")})})}catch(t){console.error("Failed to initialize VectoVerse:",t);const e=document.querySelector(".container");e&&(e.innerHTML='\n                <div style="text-align: center; padding: 50px; color: #ff4757;">\n                    <h2>⚠️ Error Loading VectoVerse</h2>\n                    <p>Please refresh the page and try again.</p>\n                    <p style="font-size: 0.8em; opacity: 0.7;">Error: '.concat(t.message,'</p>\n                    <button onclick="location.reload()" style="\n                        margin-top: 20px; \n                        padding: 10px 20px; \n                        background: #667eea; \n                        color: white; \n                        border: none; \n                        border-radius: 8px; \n                        cursor: pointer;\n                    ">Reload Page</button>\n                </div>\n            '))}});function Ep(s){const t=document.getElementById("toggle-neural-mode");t&&t.addEventListener("click",()=>{if(s.isNeuralModeActive())s.deactivateNeuralNetworkMode(),t.setAttribute("data-state","off"),t.querySelector(".btn-state").textContent="OFF",t.classList.remove("active");else{const o=s.getState().selectedVectorId;s.activateNeuralNetworkMode(o),t.setAttribute("data-state","on"),t.querySelector(".btn-state").textContent="ON",t.classList.add("active")}});const e=document.getElementById("force-type");e&&e.addEventListener("change",a=>{s.setForceType(a.target.value),console.log("Force type changed to: ".concat(a.target.value)),s.isNeuralModeActive()&&s.modules.neuralNetworkMode.updateNeuralNetwork()});const n=document.getElementById("activation-function");n&&(n.value=s.getActivationFunction(),n.addEventListener("change",a=>{s.setActivationFunction(a.target.value),console.log("Activation function changed to: ".concat(a.target.value))}));const i=document.getElementById("learning-rate"),r=document.getElementById("lr-value");i&&r&&(i.value=s.getLearningRate(),r.textContent=s.getLearningRate().toFixed(3),i.addEventListener("input",a=>{const o=parseFloat(a.target.value);s.setLearningRate(o),r.textContent=o.toFixed(3)})),s.eventBus.on("neuralModeActivated",a=>{console.log("Neural network mode activated with input vector:",a.inputVectorId),t&&(t.setAttribute("data-state","on"),t.querySelector(".btn-state").textContent="ON",t.classList.add("active"))}),s.eventBus.on("neuralModeDeactivated",()=>{console.log("Neural network mode deactivated"),t&&(t.setAttribute("data-state","off"),t.querySelector(".btn-state").textContent="OFF",t.classList.remove("active"))}),s.eventBus.on("activationFunctionChanged",a=>{console.log("Activation function changed to:",a.function),n&&n.parentElement.setAttribute("data-tooltip","Current: ".concat(a.function.charAt(0).toUpperCase()+a.function.slice(1)," Activation"))}),s.eventBus.on("learningRateChanged",a=>{console.log("Learning rate changed to:",a.rate),i&&i.parentElement.setAttribute("data-tooltip","Learning Rate: ".concat(a.rate.toFixed(3)," (").concat(a.rate>=.05?"Fast":a.rate>=.01?"Medium":"Slow",")"))}),document.addEventListener("keydown",a=>{if(a.ctrlKey||a.metaKey)switch(a.key){case"n":a.preventDefault(),t==null||t.click();break;case"f":a.preventDefault();const l=(s.getAvailableForceTypes().indexOf(s.getConfig().forceType||"resonance")+1)%s.getAvailableForceTypes().length,c=s.getAvailableForceTypes()[l];s.setForceType(c),e&&(e.value=c);break;case"a":if(a.preventDefault(),s.isNeuralModeActive()){const h=(s.getAvailableActivationFunctions().indexOf(s.getActivationFunction())+1)%s.getAvailableActivationFunctions().length,f=s.getAvailableActivationFunctions()[h];s.setActivationFunction(f),n&&(n.value=f)}break}})}export{bp as __vite_legacy_guard};
//# sourceMappingURL=main-SnX6XmCr.js.map
