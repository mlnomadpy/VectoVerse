System.register(["./vendor-legacy-VheMCklO.js"],(function(e,t){"use strict";var n,i;return{setters:[e=>{n=e.k,i=e.d}],execute:function(){var e=document.createElement("style");e.textContent='*{margin:0;padding:0;box-sizing:border-box}body{font-family:Arial,sans-serif;background:linear-gradient(135deg,#1e3c72,#2a5298);color:#fff;min-height:100vh}.container{max-width:1400px;margin:0 auto;padding:20px;display:grid;grid-template-areas:"header header" "main sidebar" "main sidebar";grid-template-columns:1fr 400px;grid-template-rows:auto 1fr;gap:20px;min-height:100vh}.app-header{grid-area:header}.app-main{grid-area:main;display:flex;flex-direction:column;gap:20px}.info-sidebar{grid-area:sidebar;display:flex;flex-direction:column;gap:20px}.toast{position:fixed;bottom:32px;left:50%;transform:translate(-50%) scale(.95);background:rgba(30,30,30,.95);color:#fff;padding:14px 32px;border-radius:8px;font-size:1rem;font-weight:500;box-shadow:0 4px 24px rgba(0,0,0,.18);opacity:0;pointer-events:none;z-index:9999;transition:opacity .3s,transform .3s}.toast.visible{opacity:1;pointer-events:auto;transform:translate(-50%) scale(1)}.toast-info{background:#4e54c8}.toast-success{background:#43e97b;color:#222}.toast-warning{background:gold;color:#222}.toast-error{background:#ff6b6b}.vector-atom{cursor:pointer;transition:all .3s ease}.vector-atom:focus{outline:2px solid #4ecdc4;outline-offset:4px}.vector-atom.selected{filter:drop-shadow(0 0 8px #ffd700)}.vector-tooltip{position:absolute;background:rgba(0,0,0,.9);color:#fff;padding:8px 12px;border-radius:6px;font-size:12px;line-height:1.4;pointer-events:none;z-index:1000;display:none;box-shadow:0 4px 12px rgba(0,0,0,.3);max-width:200px}.loading{position:relative;pointer-events:none;opacity:.7}.loading:after{content:"";position:absolute;top:50%;left:50%;width:20px;height:20px;margin:-10px 0 0 -10px;border:2px solid transparent;border-top:2px solid #4ecdc4;border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@media (max-width: 768px){.container{padding:8px}.controls-toolbar{flex-direction:column;gap:12px}.control-group{flex-direction:column;align-items:stretch}.info-sidebar{position:fixed;top:0;right:-100%;width:100%;height:100vh;z-index:1000;transition:right .3s ease;background:rgba(0,0,0,.95)}.info-sidebar.open{right:0}.visualization-container{height:60vh}.vector-tooltip{font-size:11px;padding:6px 8px}}@media (max-width: 480px){.app-header h1{font-size:1.5rem}.header-info{flex-direction:column;gap:8px}.btn-compact{min-width:auto;padding:8px 12px}.btn-text{display:none}.sidebar-panel{padding:12px}}@media (prefers-contrast: high){.vector-atom{stroke-width:3px!important}.vector-tooltip{background:#000;border:2px solid white}}@media (prefers-reduced-motion: reduce){.vector-atom,.loading:after,.info-sidebar{transition:none!important;animation:none!important}}@media print{.controls-toolbar,.info-sidebar,.modal-overlay,.vector-tooltip{display:none!important}.visualization-container{width:100%!important;height:100%!important}}.error-notification{position:fixed;top:20px;right:20px;max-width:400px;background:linear-gradient(135deg,#ff6b6b,#ff4757);color:#fff;border-radius:12px;box-shadow:0 8px 32px rgba(255,107,107,.3);z-index:10000;animation:slideInRight .3s ease-out;overflow:hidden}.error-network{background:linear-gradient(135deg,#3742fa,#2f3542)}.error-permission{background:linear-gradient(135deg,#ffa502,#ff6348)}.error-memory{background:linear-gradient(135deg,#ff4757,#c44569)}.error-validation{background:linear-gradient(135deg,gold,#f39c12);color:#2c2c2c}.error-timeout{background:linear-gradient(135deg,#5f27cd,#341f97)}.error-content{display:flex;align-items:flex-start;padding:16px;gap:12px}.error-icon{font-size:24px;flex-shrink:0;margin-top:2px}.error-text{flex:1;min-width:0}.error-text strong{display:block;margin-bottom:4px;font-size:1.1rem}.error-text p{margin:0;font-size:.9rem;opacity:.9;line-height:1.4}.error-close{background:none;border:none;color:inherit;font-size:20px;cursor:pointer;padding:4px;border-radius:4px;transition:background .2s ease;flex-shrink:0}.error-close:hover{background:rgba(255,255,255,.2)}.error-actions{padding:0 16px 16px;display:flex;gap:8px;flex-wrap:wrap}.error-action{background:rgba(255,255,255,.2)!important;border:1px solid rgba(255,255,255,.3)!important;color:inherit!important;font-size:.85rem!important;padding:6px 12px!important}.error-action:hover{background:rgba(255,255,255,.3)!important}.export-preview{max-width:600px;max-height:80vh}.export-preview h3{margin:0 0 16px;color:#4ecdc4;font-size:1.3rem}.export-preview-content{background:rgba(0,0,0,.3);border:1px solid rgba(255,255,255,.1);border-radius:6px;padding:12px;margin:16px 0;max-height:300px;overflow-y:auto;font-family:Courier New,monospace;font-size:.8rem;line-height:1.4;white-space:pre-wrap;word-break:break-all}.export-actions{display:flex;gap:12px;justify-content:flex-end;margin-top:20px}@keyframes slideInRight{0%{transform:translate(100%);opacity:0}to{transform:translate(0);opacity:1}}.vector-atom,.force-line{will-change:transform}.modal-overlay{contain:layout style paint}@media (prefers-reduced-motion: reduce){.error-notification{animation:none}.vector-atom,.force-line{will-change:auto}}@media (max-device-width: 768px) and (orientation: portrait){.vector-atom .dimension-segment{display:none}.force-line{stroke-width:1px}.loading:after,.loading-spinner{animation-duration:2s}}body:not(.light-theme) .error-validation{background:linear-gradient(135deg,#f39c12,#d35400);color:#fff}body.light-theme .error-notification{box-shadow:0 8px 32px rgba(0,0,0,.2)}body.light-theme .export-preview-content{background:rgba(255,255,255,.1);border-color:rgba(0,0,0,.2);color:#333}.error-notification:focus-within .error-close{outline:2px solid rgba(255,255,255,.8);outline-offset:2px}.export-preview:focus-within{outline:2px solid #4ecdc4;outline-offset:4px}.help-modal{max-width:800px;max-height:90vh;overflow:hidden;display:flex;flex-direction:column}.help-header{display:flex;justify-content:space-between;align-items:center;padding:0 0 16px;border-bottom:1px solid rgba(255,255,255,.2)}.help-header h3{margin:0;color:#4ecdc4;font-size:1.5rem}.help-content{flex:1;overflow:hidden}.help-tabs{display:flex;gap:4px;margin:16px 0 0;border-bottom:1px solid rgba(255,255,255,.2)}.help-tab{background:none;border:none;color:rgba(255,255,255,.7);padding:12px 16px;cursor:pointer;border-radius:6px 6px 0 0;transition:all .2s ease;font-size:.9rem;font-weight:500}.help-tab:hover{background:rgba(255,255,255,.1);color:rgba(255,255,255,.9)}.help-tab.active{background:rgba(78,205,196,.2);color:#4ecdc4;border-bottom:2px solid #4ecdc4}.help-panel{display:none;padding:20px 0;max-height:400px;overflow-y:auto}.help-panel.active{display:block}.help-panel h4{margin:0 0 16px;color:gold;font-size:1.2rem}.help-panel h5{margin:0 0 8px;color:#4ecdc4;font-size:1rem}.feature-list{list-style:none;padding:0;margin:0}.feature-list li{padding:8px 0;border-bottom:1px solid rgba(255,255,255,.1);line-height:1.5}.feature-list li:last-child{border-bottom:none}.shortcut-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:12px}.shortcut-item{display:flex;align-items:center;gap:8px;padding:8px 12px;background:rgba(255,255,255,.05);border-radius:6px;border:1px solid rgba(255,255,255,.1)}.shortcut-item kbd{background:rgba(255,255,255,.2);padding:4px 8px;border-radius:4px;font-family:monospace;font-size:.8rem;color:#4ecdc4;border:1px solid rgba(255,255,255,.3)}.analysis-features,.export-options,.accessibility-features{display:grid;gap:16px}.analysis-item,.export-format,.a11y-item{padding:16px;background:rgba(255,255,255,.05);border-radius:8px;border:1px solid rgba(255,255,255,.1)}.analysis-item p,.export-format p,.a11y-item p{margin:0;color:rgba(255,255,255,.8);line-height:1.5}.help-footer{padding:16px 0 0;margin-top:16px;border-top:1px solid rgba(255,255,255,.2);font-size:.9rem;color:rgba(255,255,255,.8)}.help-footer p{margin:8px 0}@media (max-width: 768px){.help-modal{max-width:95vw;max-height:95vh}.help-tabs{flex-wrap:wrap}.help-tab{font-size:.8rem;padding:8px 12px}.shortcut-grid{grid-template-columns:1fr}}.app-header{text-align:center;margin-bottom:10px}.app-header h1{font-size:2.5em;margin-bottom:10px;text-shadow:2px 2px 4px rgba(0,0,0,.3)}.app-header p{font-size:1.2em;opacity:.9;margin-bottom:15px}.header-info{display:flex;justify-content:center;gap:20px;flex-wrap:wrap;font-size:.9em;opacity:.8}.header-info span{background:rgba(255,255,255,.1);padding:5px 10px;border-radius:15px;border:1px solid rgba(255,255,255,.2)}.controls-toolbar{display:flex;justify-content:space-between;align-items:center;gap:15px;padding:8px 16px;background:rgba(255,255,255,.1);border-radius:12px;backdrop-filter:blur(15px);border:1px solid rgba(255,255,255,.2);box-shadow:0 4px 20px rgba(0,0,0,.1);flex-wrap:wrap;min-height:48px;transition:all .3s ease}.controls-toolbar:hover{box-shadow:0 6px 25px rgba(0,0,0,.15)}.control-group{display:flex;gap:8px;align-items:center}.control-compact{display:flex;align-items:center;gap:6px;padding:4px 8px;background:rgba(255,255,255,.05);border-radius:6px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease;position:relative;min-width:fit-content}.control-compact:hover{background:rgba(255,255,255,.1);border-color:rgba(255,255,255,.3);transform:translateY(-1px)}.control-icon{font-size:1em;cursor:help;min-width:18px;text-align:center;position:relative}.control-compact input[type=range]{width:70px;height:3px;background:linear-gradient(to right,#4ecdc4,rgba(255,255,255,.2) 0%);border-radius:2px;outline:none;-webkit-appearance:none;appearance:none}.control-compact input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:14px;height:14px;border-radius:50%;background:#4ecdc4;cursor:pointer;transition:all .2s ease;box-shadow:0 2px 4px rgba(0,0,0,.2)}.control-compact input[type=range]::-webkit-slider-thumb:hover{background:#45b7b8;transform:scale(1.1)}.control-value{min-width:22px;text-align:center;font-weight:600;color:gold;font-size:.8em;background:rgba(255,215,0,.1);padding:1px 4px;border-radius:3px}.btn-compact{display:flex;align-items:center;gap:4px;padding:6px 10px;background:rgba(255,255,255,.1);color:#fff;border:1px solid rgba(255,255,255,.2);border-radius:6px;cursor:pointer;font-weight:500;font-size:.8em;transition:all .3s ease;text-decoration:none;position:relative;overflow:hidden;min-height:32px}.btn-primary{background:linear-gradient(135deg,#4ecdc4,#44a08d);border-color:rgba(78,205,196,.3)}.btn-primary:hover{background:linear-gradient(135deg,#45b7b8,#3d8b82);box-shadow:0 4px 12px rgba(78,205,196,.3)}.btn-secondary{background:linear-gradient(135deg,#667eea,#764ba2);border-color:rgba(102,126,234,.3)}.btn-secondary:hover{background:linear-gradient(135deg,#5a6fd8,#6a4190);box-shadow:0 4px 12px rgba(102,126,234,.3)}.btn-accent{background:linear-gradient(135deg,#f093fb,#f5576c);border-color:rgba(240,147,251,.3)}.btn-accent:hover{background:linear-gradient(135deg,#e681f0,#f04757);box-shadow:0 4px 12px rgba(240,147,251,.3)}.btn-utility{background:rgba(255,255,255,.08);border-color:rgba(255,255,255,.15)}.btn-utility:hover{background:rgba(255,255,255,.15);border-color:rgba(255,255,255,.3)}.btn-help{background:linear-gradient(135deg,#ffecd2,#fcb69f);color:#333;border-color:rgba(255,236,210,.3)}.btn-help:hover{background:linear-gradient(135deg,#fce4d1,#f9ac94);box-shadow:0 4px 12px rgba(255,236,210,.3)}.btn-compact:before{content:"";position:absolute;top:0;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,.1),transparent);transition:left .5s ease}.btn-compact:hover:before{left:100%}.btn-compact:active{transform:translateY(1px)}.btn-icon{font-size:1.1em}.btn-text{display:inline}.btn-state{font-size:.7em;font-weight:700;background:rgba(0,0,0,.2);padding:2px 4px;border-radius:3px;margin-left:4px}.file-upload-compact{position:relative;display:inline-block}.file-upload-compact input[type=file]{display:none}.file-upload-compact label{display:inline-flex}.visualization-container{background:rgba(0,0,0,.2);border-radius:12px;overflow:hidden;position:relative;width:100%;height:100%;min-height:500px}#main-viz{width:100%;height:100%;display:block}.vector-atom{cursor:pointer;transition:all .2s ease;pointer-events:all}.vector-atom:hover{filter:brightness(1.2)}.vector-atom:hover circle{stroke-width:3!important;transition:stroke-width .2s ease}.vector-atom.selected{filter:drop-shadow(0 0 10px rgba(255,255,255,.6))}.vector-atom.selected circle{stroke-width:4!important;stroke:rgba(255,255,255,.8)!important}.force-line{pointer-events:none;transition:opacity .3s ease}.force-line.strong{opacity:.8!important}.input-vector .input-pulse{animation:pulse-ring 2s infinite}@keyframes pulse-ring{0%{opacity:.5;transform:scale(1)}50%{opacity:.8;transform:scale(1.05)}to{opacity:.5;transform:scale(1)}}.vector-tooltip{position:absolute;background:rgba(0,0,0,.9);color:#fff;padding:8px 12px;border-radius:6px;font-size:12px;font-family:monospace;z-index:1000;pointer-events:none;box-shadow:0 4px 8px rgba(0,0,0,.3);border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(5px);white-space:nowrap;max-width:250px;display:none}.vector-tooltip strong{color:#4ecdc4}.bg-particle{pointer-events:none;opacity:.3;transition:opacity 1s ease}@media (prefers-reduced-motion: reduce){.vector-atom,.force-line,.bg-particle{transition:none}.input-pulse{animation:none}}.info-sidebar{background:rgba(255,255,255,.05);border-radius:12px;padding:20px;height:100%;overflow-y:auto}.sidebar-panel{background:rgba(0,0,0,.2);border-radius:8px;padding:15px;margin-bottom:20px}.sidebar-panel:last-child{margin-bottom:0}.sidebar-panel h3{font-size:1.4em;margin-bottom:15px;color:#4ecdc4;border-bottom:1px solid rgba(255,255,255,.1);padding-bottom:10px}.concept-section{margin-bottom:20px}.concept-section h4{font-size:1.1em;margin-bottom:10px;color:gold}.concept-explanation,.range-explanation{font-size:.9em;line-height:1.5;opacity:.8;margin-bottom:10px}.formula-display{background:rgba(0,0,0,.2);padding:10px;border-radius:4px;margin-top:5px;font-size:1em;white-space:normal}.legend-item{display:flex;align-items:center;gap:10px;margin-bottom:8px;font-size:.9em}.color-box{width:15px;height:15px;border-radius:3px;border:1px solid rgba(255,255,255,.2)}.color-box.positive{background-color:#4ecdc4}.color-box.negative{background-color:#f06292}.color-box.neutral{background-color:#6c757d}#vector-details-content .placeholder{text-align:center;padding:20px;opacity:.7}.vector-info{animation:fadeIn .5s ease-in-out}.vector-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:15px}.vector-name{font-size:1.2em;font-weight:700;color:#ffc107}.charge-indicator{width:12px;height:12px;border-radius:50%}.vector-stats-grid{display:grid;grid-template-columns:1fr 1fr;gap:10px;margin-bottom:15px}.stat-item{background:rgba(0,0,0,.3);padding:10px;border-radius:4px;text-align:center}.stat-label{display:block;font-size:.8em;opacity:.7;margin-bottom:5px}.stat-value{font-size:1.1em;font-weight:700}.vector-components,.vector-relationships{margin-bottom:15px}.vector-components h5,.vector-relationships h5{font-size:1em;margin-bottom:10px;color:#4ecdc4}.components-list,.relationships-list{display:flex;flex-direction:column;gap:8px;max-height:200px;overflow-y:auto;padding-right:10px}.components-chart{width:100%;height:150px;background:rgba(0,0,0,.1);border-radius:4px;margin-bottom:15px}.stats-list{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:10px}.stat-item-detailed{background:rgba(0,0,0,.2);padding:8px;border-radius:4px}.stat-label-detailed{font-size:.8em;opacity:.7}.stat-value-detailed{font-size:1em;font-weight:700;color:#4ecdc4}.relationship-controls{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px;background:rgba(0,0,0,.2);padding:8px;border-radius:4px}.relationship-controls h5{margin-bottom:0}.control-select{background:#333;color:#fff;border:1px solid #555;border-radius:4px;padding:4px 8px;font-size:.9em}.relationship-item{background:rgba(0,0,0,.15);padding:12px;border-radius:6px;margin-bottom:8px;transition:background .3s ease}.relationship-item:hover{background:rgba(0,0,0,.3)}.relationship-target{font-weight:700;color:#ffc107;margin-bottom:8px}.relationship-scores{display:grid;grid-template-columns:repeat(2,1fr);gap:5px;font-size:.9em;opacity:.9}.relationship-scores div{display:flex;justify-content:space-between}.score-value{font-weight:700;color:#4ecdc4}.sidebar-panel.collapsible>h3{cursor:pointer;user-select:none;position:relative}.sidebar-panel.collapsible>h3:after{content:"[-]";position:absolute;right:5px;font-size:.9em;color:gold}.sidebar-panel.collapsible.collapsed>h3:after{content:"[+]"}.sidebar-panel.collapsible .panel-content{max-height:1000px;transition:max-height .5s ease-in-out,visibility .5s ease-in-out;overflow:hidden;visibility:visible}.sidebar-panel.collapsible.collapsed .panel-content{max-height:0;visibility:hidden}.modal-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.7);backdrop-filter:blur(10px);display:flex;justify-content:center;align-items:center;opacity:0;visibility:hidden;transition:opacity .3s ease,visibility .3s ease;z-index:1000}.modal-overlay.active{opacity:1;visibility:visible}.modal-content{background:#2c3e50;padding:30px;border-radius:12px;max-width:500px;width:90%;box-shadow:0 5px 20px rgba(0,0,0,.4);transform:scale(.95);transition:transform .3s ease}.modal-overlay.active .modal-content{transform:scale(1)}.modal-content h2{margin-bottom:15px;color:#4ecdc4}.modal-content p{margin-bottom:10px;line-height:1.6}.modal-content .close-button{position:absolute;top:15px;right:15px;background:none;border:none;color:#fff;font-size:1.8em;cursor:pointer}#upload-help-modal .modal-content{max-width:700px;max-height:80vh;overflow-y:auto}.upload-format-guide{color:#ecf0f1}.upload-format-guide h3{color:#4ecdc4;margin-bottom:20px;font-size:1.3em}.format-section{background:rgba(52,73,94,.6);border-radius:8px;padding:20px;margin-bottom:20px;border-left:4px solid #4ecdc4}.format-section h4{color:#f39c12;margin-bottom:12px;font-size:1.1em}.format-example{background:#34495e;border-radius:6px;padding:15px;margin:10px 0;font-family:Courier New,monospace;border:1px solid #4ecdc4;overflow-x:auto}.format-example code{color:#2ecc71;font-size:.9em;line-height:1.4}.format-section p{color:#bdc3c7;font-style:italic;margin-top:8px}.format-section ul{margin:10px 0;padding-left:20px}.format-section li{color:#ecf0f1;margin-bottom:5px;line-height:1.4}.format-section li strong{color:#f39c12}.light-theme #upload-help-modal .modal-content{background:#f8f9fa;color:#2c3e50}.light-theme .upload-format-guide h3{color:#2980b9}.light-theme .format-section{background:rgba(236,240,241,.8);border-left-color:#2980b9}.light-theme .format-section h4{color:#e67e22}.light-theme .format-example{background:#ecf0f1;border-color:#2980b9}.light-theme .format-example code{color:#27ae60}.light-theme .format-section p{color:#7f8c8d}.light-theme .format-section li{color:#2c3e50}.light-theme .format-section li strong{color:#e67e22}.upload-progress{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:#2c3e50;border-radius:12px;padding:30px;box-shadow:0 5px 20px rgba(0,0,0,.4);z-index:1001;min-width:300px;opacity:0;transform:translate(-50%,-50%) scale(.9);transition:opacity .3s ease,transform .3s ease}.upload-progress.active{opacity:1;transform:translate(-50%,-50%) scale(1)}.progress-content{text-align:center;color:#ecf0f1}.progress-message{font-size:1.1em;margin-bottom:15px;color:#4ecdc4}.progress-bar-container{background:#34495e;border-radius:10px;height:12px;margin:15px 0;overflow:hidden;border:1px solid #4ecdc4}.progress-bar{background:linear-gradient(90deg,#4ecdc4,#2ecc71);height:100%;border-radius:10px;transition:width .3s ease;box-shadow:0 2px 6px rgba(78,205,196,.3)}.progress-percentage{font-size:1.2em;font-weight:700;color:#4ecdc4}.light-theme .upload-progress{background:#f8f9fa}.light-theme .progress-content{color:#2c3e50}.light-theme .progress-message{color:#2980b9}.light-theme .progress-bar-container{background:#ecf0f1;border-color:#2980b9}.light-theme .progress-percentage{color:#2980b9}#activation-help-modal .modal-content{max-width:800px;max-height:85vh;overflow-y:auto}.activation-functions-guide{color:#ecf0f1}.activation-functions-guide h3{color:#4ecdc4;margin-bottom:20px;font-size:1.3em;text-align:center}.function-section{background:rgba(52,73,94,.6);border-radius:8px;padding:15px;margin-bottom:15px;border-left:4px solid #3498db;transition:all .3s ease}.function-section:hover{background:rgba(52,73,94,.8);transform:translate(5px)}.function-section.highlighted{border-left-color:#f39c12;background:rgba(243,156,18,.1)}.function-section h4{color:#3498db;margin-bottom:8px;font-size:1.1em}.function-section.highlighted h4{color:#f39c12}.function-formula{font-family:Courier New,monospace;background:#2c3e50;padding:8px 12px;border-radius:4px;color:#2ecc71;font-size:.9em;margin:8px 0;border:1px solid #34495e}.function-range{font-size:.85em;color:#95a5a6;font-style:italic;margin-bottom:8px}.function-section p{color:#bdc3c7;line-height:1.4;margin:0}.function-section p strong{color:#f39c12}.usage-tips{background:rgba(46,204,113,.1);border-radius:8px;padding:20px;margin-top:20px;border-left:4px solid #2ecc71}.usage-tips h4{color:#2ecc71;margin-bottom:15px;font-size:1.1em}.usage-tips ul{margin:0;padding-left:20px}.usage-tips li{color:#ecf0f1;margin-bottom:8px;line-height:1.4}.usage-tips li strong{color:#2ecc71}.light-theme #activation-help-modal .modal-content{background:#f8f9fa;color:#2c3e50}.light-theme .activation-functions-guide h3{color:#2980b9}.light-theme .function-section{background:rgba(236,240,241,.8);border-left-color:#3498db}.light-theme .function-section.highlighted{border-left-color:#e67e22;background:rgba(230,126,34,.1)}.light-theme .function-section h4{color:#2980b9}.light-theme .function-section.highlighted h4{color:#e67e22}.light-theme .function-formula{background:#ecf0f1;color:#27ae60;border-color:#bdc3c7}.light-theme .function-range{color:#7f8c8d}.light-theme .function-section p{color:#2c3e50}.light-theme .function-section p strong{color:#e67e22}.light-theme .usage-tips{background:rgba(39,174,96,.1);border-left-color:#27ae60}.light-theme .usage-tips h4{color:#27ae60}.light-theme .usage-tips li{color:#2c3e50}.light-theme .usage-tips li strong{color:#27ae60}.analysis-controls{display:flex;gap:15px;align-items:center;margin-bottom:20px;flex-wrap:wrap}.analysis-options{display:none;gap:10px;align-items:center}.analysis-options label,.analysis-controls label{font-weight:700}.analysis-controls select,.analysis-options input{padding:5px;border-radius:4px;border:1px solid #ccc}.analysis-results-container{margin-top:20px;background:rgba(0,0,0,.1);padding:15px;border-radius:8px;min-height:200px}.analysis-header{margin-bottom:16px;padding-bottom:8px;border-bottom:1px solid rgba(255,255,255,.2)}.analysis-header h4{margin:0 0 4px;color:#4ecdc4;font-size:1.2rem}.analysis-header small{color:rgba(255,255,255,.6);font-size:.85rem}.analysis-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:12px;margin:16px 0}.stat-card{background:rgba(255,255,255,.05);padding:12px;border-radius:8px;border:1px solid rgba(255,255,255,.1);text-align:center}.stat-card strong{color:gold;display:block;margin-bottom:4px;font-size:.9rem}.cluster-breakdown{margin-top:16px}.cluster-breakdown h5{margin:0 0 12px;color:#4ecdc4;font-size:1rem}.cluster-item{display:flex;align-items:center;gap:8px;padding:6px 0;font-size:.9rem}.cluster-color{width:12px;height:12px;border-radius:50%;flex-shrink:0}.data-list{margin:8px 0;max-height:150px;overflow-y:auto;background:rgba(0,0,0,.2);border-radius:4px;padding:8px}.data-list li{font-family:Courier New,monospace;font-size:.8rem;margin:2px 0;color:rgba(255,255,255,.8)}details{margin:12px 0;border:1px solid rgba(255,255,255,.1);border-radius:6px;overflow:hidden}details summary{background:rgba(255,255,255,.05);padding:8px 12px;cursor:pointer;font-weight:500;color:#4ecdc4;transition:background .2s ease}details summary:hover{background:rgba(255,255,255,.1)}details[open] summary{border-bottom:1px solid rgba(255,255,255,.1)}.loading-analysis{text-align:center;padding:40px 20px;color:rgba(255,255,255,.8)}.loading-spinner{width:32px;height:32px;border:3px solid rgba(255,255,255,.2);border-top:3px solid #4ecdc4;border-radius:50%;animation:spin 1s linear infinite;margin:0 auto 16px}.vector-analysis-card{background:rgba(255,255,255,.05);border-radius:12px;padding:20px;margin:15px 0;border:1px solid rgba(255,255,255,.1);backdrop-filter:blur(10px)}.vector-header-enhanced{display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:25px;padding-bottom:15px;border-bottom:2px solid rgba(78,205,196,.3)}.vector-title-section h4{margin:0 0 10px;color:#4ecdc4;font-size:1.4em;font-weight:600}.vector-summary{display:flex;gap:20px;flex-wrap:wrap;margin-top:8px}.summary-item{background:rgba(255,255,255,.1);padding:6px 12px;border-radius:20px;font-size:.9em;border:1px solid rgba(255,255,255,.2)}.summary-label{color:rgba(255,255,255,.8);margin-right:5px}.summary-value{color:gold;font-weight:600}.vector-badges-enhanced{display:flex;gap:10px;flex-wrap:wrap}.vector-badge{display:flex;align-items:center;gap:6px;padding:8px 12px;border-radius:20px;font-size:.85em;font-weight:500;transition:all .3s ease;cursor:help}.vector-badge.charge{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff}.vector-badge.magnitude{background:linear-gradient(135deg,#f093fb,#f5576c);color:#fff}.vector-badge.sparsity{background:linear-gradient(135deg,#4ecdc4,#44a08d);color:#fff}.vector-badge:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(0,0,0,.3)}.badge-icon{font-size:1.1em}.tab-nav{display:flex;gap:8px;margin-bottom:20px;border-bottom:2px solid rgba(255,255,255,.1);overflow-x:auto;padding-bottom:10px}.tab-nav-btn{background:rgba(255,255,255,.1);border:1px solid rgba(255,255,255,.2);color:rgba(255,255,255,.8);padding:10px 16px;border-radius:25px;cursor:pointer;transition:all .3s ease;white-space:nowrap;font-size:.9em;font-weight:500}.tab-nav-btn:hover{background:rgba(255,255,255,.2);transform:translateY(-1px)}.tab-nav-btn.active{background:linear-gradient(135deg,#4ecdc4,#44a08d);color:#fff;border-color:#4ecdc4;box-shadow:0 4px 15px rgba(78,205,196,.3)}.tab-content-enhanced{min-height:400px}@keyframes fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.components-analysis{display:grid;grid-template-columns:1fr 1fr;gap:20px}.visualization-container{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1)}.chart-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:15px}.chart-header h6{margin:0;color:#4ecdc4;font-size:1.1em}.chart-controls{display:flex;gap:10px}.mini-select{background:rgba(255,255,255,.1);border:1px solid rgba(255,255,255,.2);color:#fff;padding:6px 10px;border-radius:6px;font-size:.85em}.components-chart-enhanced{min-height:250px;background:rgba(0,0,0,.1);border-radius:6px;padding:10px}.components-insights{display:flex;flex-direction:column;gap:20px}.insight-grid{display:grid;grid-template-columns:1fr;gap:12px}.insight-card{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.insight-card:hover{transform:translateY(-2px);box-shadow:0 5px 20px rgba(0,0,0,.3)}.insight-icon{font-size:1.2em}.insight-title{font-weight:600;color:#4ecdc4;font-size:.9em}.insight-value{font-size:1.8em;font-weight:700;color:gold;margin:5px 0}.insight-detail{font-size:.8em;color:rgba(255,255,255,.7)}.insight-card.positive{border-left:4px solid #2ecc71}.insight-card.negative{border-left:4px solid #e74c3c}.insight-card.dominant{border-left:4px solid #f39c12}.component-extremes h6{margin:0 0 10px;color:#4ecdc4;font-size:1em}.extreme-category{background:rgba(255,255,255,.05);border-radius:8px;padding:12px;border:1px solid rgba(255,255,255,.1)}.extreme-header{display:flex;align-items:center;gap:8px;margin-bottom:10px}.extreme-icon{font-size:1.1em}.extreme-title{font-weight:600;color:#4ecdc4;font-size:.9em}.extreme-items{display:flex;flex-direction:column;gap:6px}.extreme-item{display:flex;justify-content:space-between;align-items:center;padding:6px 8px;background:rgba(255,255,255,.05);border-radius:6px;font-size:.85em}.extreme-index{color:rgba(255,255,255,.8);font-weight:500}.extreme-value{font-family:Courier New,monospace;font-weight:600}.extreme-value.positive{color:#2ecc71}.extreme-value.negative{color:#e74c3c}.statistics-enhanced{display:flex;flex-direction:column;gap:20px}.stats-categories{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px}.stats-category{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1)}.stats-category h6{margin:0 0 12px;color:#4ecdc4;font-size:1.1em;border-bottom:1px solid rgba(78,205,196,.3);padding-bottom:8px}.stats-detailed{display:flex;flex-direction:column;gap:8px}.stat-row.enhanced{display:flex;justify-content:space-between;align-items:center;padding:8px 12px;background:rgba(255,255,255,.05);border-radius:6px;transition:all .2s ease}.stat-row.enhanced:hover{background:rgba(255,255,255,.1);transform:translate(5px)}.stat-name{color:rgba(255,255,255,.8);font-weight:500}.stat-value{color:gold;font-family:Courier New,monospace;font-weight:600}.statistical-insights h6{margin:0 0 12px;color:#4ecdc4;font-size:1.1em}.insights-list{display:flex;flex-direction:column;gap:10px}.insight-item{display:flex;align-items:flex-start;gap:10px;padding:10px;background:rgba(255,255,255,.05);border-radius:8px;border-left:3px solid #4ecdc4}.insight-indicator{font-size:1.2em;flex-shrink:0;margin-top:2px}.insight-text{color:rgba(255,255,255,.9);font-size:.9em;line-height:1.4}.quantum-analysis,.entropy-analysis{margin-bottom:25px}.quantum-analysis h6,.entropy-analysis h6{margin:0 0 15px;color:#4ecdc4;font-size:1.2em;border-bottom:2px solid rgba(78,205,196,.3);padding-bottom:8px}.quantum-metrics,.entropy-metrics{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:15px}.quantum-card,.entropy-card{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.quantum-card:hover,.entropy-card:hover{transform:translateY(-3px);box-shadow:0 8px 25px rgba(0,0,0,.3)}.quantum-header,.entropy-header{display:flex;align-items:center;gap:8px;margin-bottom:10px}.quantum-icon,.entropy-icon{font-size:1.2em}.quantum-title,.entropy-title{font-weight:600;color:#4ecdc4;font-size:.95em}.quantum-value,.entropy-value{font-size:1.6em;font-weight:700;color:gold;margin:8px 0;font-family:Courier New,monospace}.quantum-bar,.entropy-bar{width:100%;height:8px;background:rgba(255,255,255,.1);border-radius:4px;overflow:hidden;margin:8px 0}.quantum-fill,.entropy-fill{height:100%;border-radius:4px;transition:width .8s ease}.quantum-fill.excitatory{background:linear-gradient(90deg,#f39c12,#e67e22)}.quantum-fill.inhibitory{background:linear-gradient(90deg,#3498db,#2980b9)}.entropy-fill{background:linear-gradient(90deg,#4ecdc4,#44a08d)}.quantum-card.excitatory{border-left:4px solid #f39c12}.quantum-card.inhibitory{border-left:4px solid #3498db}.quantum-card.balance{border-left:4px solid #95a5a6}.quantum-interpretation,.entropy-detail{font-size:.8em;color:rgba(255,255,255,.7);margin-top:5px;font-style:italic}.analysis-placeholder,.analysis-error{text-align:center;padding:60px 20px;color:rgba(255,255,255,.8)}.placeholder-icon,.error-icon{font-size:4em;margin-bottom:20px;opacity:.5}.analysis-placeholder h3,.analysis-error h3{margin:0 0 10px;color:#4ecdc4;font-size:1.4em}.analysis-placeholder p,.analysis-error p{color:rgba(255,255,255,.6);line-height:1.5;max-width:400px;margin:0 auto}.relationship-controls{display:flex;gap:20px;margin-bottom:20px;align-items:center;flex-wrap:wrap}.control-group{display:flex;align-items:center;gap:8px}.control-group label{color:rgba(255,255,255,.8);font-weight:500;font-size:.9em}.relationship-visualization{display:grid;grid-template-columns:1fr 1fr;gap:20px}.similarity-matrix,.relationship-list{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1)}.similarity-matrix h6,.relationship-list h6{margin:0 0 15px;color:#4ecdc4;font-size:1.1em}.relationships-list{display:flex;flex-direction:column;gap:10px;max-height:300px;overflow-y:auto}.relationship-item{display:flex;justify-content:space-between;align-items:center;padding:10px;background:rgba(255,255,255,.05);border-radius:8px;transition:all .2s ease}.relationship-item:hover{background:rgba(255,255,255,.1);transform:translate(5px)}.relationship-vectors{display:flex;align-items:center;gap:8px}.vector-id{background:linear-gradient(135deg,#4ecdc4,#44a08d);color:#fff;padding:4px 8px;border-radius:12px;font-size:.8em;font-weight:600}.relationship-arrow{color:rgba(255,255,255,.6);font-size:1.2em}.relationship-strength{display:flex;align-items:center;gap:10px}.strength-bar{width:60px;height:6px;background:rgba(255,255,255,.1);border-radius:3px;overflow:hidden}.strength-fill{height:100%;background:linear-gradient(90deg,#4ecdc4,#44a08d);border-radius:3px;transition:width .3s ease}.strength-value{font-family:Courier New,monospace;font-size:.8em;color:gold;font-weight:600;min-width:50px;text-align:right}.clustering-controls{display:flex;gap:20px;margin-bottom:20px;align-items:center;flex-wrap:wrap}.clustering-results{display:flex;flex-direction:column;gap:20px}.cluster-summary{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1)}.cluster-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:15px;margin-top:10px}.stat-item{display:flex;justify-content:space-between;align-items:center;padding:8px 12px;background:rgba(255,255,255,.05);border-radius:6px}.stat-label{color:rgba(255,255,255,.8);font-size:.9em}.stat-value{color:gold;font-weight:600}.cluster-details{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1)}.clusters-list{display:flex;flex-direction:column;gap:15px}.cluster-item{background:rgba(255,255,255,.05);border-radius:8px;padding:12px;border:1px solid rgba(255,255,255,.1)}.cluster-header{display:flex;align-items:center;gap:10px;margin-bottom:10px}.cluster-title{color:#4ecdc4;font-weight:600;font-size:1em}.cluster-size{background:rgba(255,255,255,.1);padding:2px 8px;border-radius:12px;font-size:.8em;color:rgba(255,255,255,.8)}.cluster-vectors{display:flex;flex-wrap:wrap;gap:6px;margin-bottom:8px}.vector-chip{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;padding:2px 6px;border-radius:10px;font-size:.75em;font-weight:500}.cluster-centroid{font-size:.8em;color:rgba(255,255,255,.7);font-family:Courier New,monospace}.global-statistics,.distribution-analysis,.correlation-analysis{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;margin-bottom:20px;border:1px solid rgba(255,255,255,.1)}.global-statistics h6,.distribution-analysis h6,.correlation-analysis h6{margin:0 0 15px;color:#4ecdc4;font-size:1.1em;border-bottom:1px solid rgba(78,205,196,.3);padding-bottom:8px}.stats-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px}.stat-card-global{background:rgba(255,255,255,.05);border-radius:8px;padding:15px;border:1px solid rgba(255,255,255,.1);display:flex;align-items:center;gap:12px;transition:all .3s ease}.stat-card-global:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(0,0,0,.2)}.stat-icon{font-size:2em;opacity:.8}.stat-content{flex:1}.stat-card-global .stat-value{font-size:1.4em;font-weight:700;color:gold;margin:0}.stat-card-global .stat-label{font-size:.9em;color:rgba(255,255,255,.8);margin:2px 0 0}.stat-detail{font-size:.8em;color:rgba(255,255,255,.6);margin-top:2px}.distribution-chart{min-height:200px;background:rgba(0,0,0,.1);border-radius:6px;padding:10px}.chart-tooltip{position:absolute;background:rgba(0,0,0,.9);color:#fff;padding:8px;border-radius:4px;font-size:12px;pointer-events:none;z-index:1000;box-shadow:0 4px 8px rgba(0,0,0,.3)}@media (max-width: 1024px){.components-analysis{grid-template-columns:1fr}.vector-header-enhanced{flex-direction:column;align-items:flex-start;gap:15px}.vector-summary{gap:10px}.quantum-metrics,.entropy-metrics,.relationship-visualization{grid-template-columns:1fr}.stats-grid{grid-template-columns:repeat(auto-fit,minmax(180px,1fr))}}@media (max-width: 768px){.analysis-stats{grid-template-columns:1fr;gap:8px}.stat-card{padding:8px}.data-list{font-size:.7rem;max-height:100px}.tab-nav{overflow-x:auto;padding-bottom:5px}.tab-nav-btn{font-size:.8em;padding:8px 12px}.insight-grid{grid-template-columns:1fr}.vector-summary{flex-direction:column;gap:8px}.summary-item{width:100%;text-align:center}.stats-categories{grid-template-columns:1fr}.relationship-controls,.clustering-controls{flex-direction:column;align-items:stretch}.control-group{justify-content:space-between}.cluster-stats,.stats-grid{grid-template-columns:1fr}}.pattern-detection,.anomaly-detection{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;margin-bottom:15px;border:1px solid rgba(255,255,255,.1)}.pattern-detection h6,.anomaly-detection h6{margin:0 0 15px;color:#4ecdc4;font-size:1.1em;border-bottom:1px solid rgba(78,205,196,.3);padding-bottom:8px}.pattern-item{background:rgba(255,255,255,.05);border-radius:8px;padding:12px;margin-bottom:10px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.pattern-item:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(0,0,0,.2)}.pattern-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.pattern-icon{font-size:1.2em;margin-right:8px}.pattern-type{font-weight:600;color:#4ecdc4;flex:1}.pattern-confidence{background:linear-gradient(135deg,#f39c12,#e67e22);color:#fff;padding:2px 8px;border-radius:12px;font-size:.8em;font-weight:600}.pattern-description{color:rgba(255,255,255,.8);font-size:.9em;margin-bottom:8px}.pattern-strength-bar{width:100%;height:6px;background:rgba(255,255,255,.1);border-radius:3px;overflow:hidden}.pattern-strength-fill{height:100%;background:linear-gradient(90deg,#4ecdc4,#44a08d);border-radius:3px;transition:width .8s ease}.anomaly-summary{margin-bottom:15px;text-align:center}.anomaly-count{background:linear-gradient(135deg,#e74c3c,#c0392b);color:#fff;padding:6px 12px;border-radius:20px;font-weight:600;font-size:.9em}.anomaly-list{display:flex;flex-direction:column;gap:8px}.anomaly-item{display:grid;grid-template-columns:auto 1fr auto auto;gap:10px;align-items:center;padding:8px 12px;background:rgba(255,255,255,.05);border-radius:6px;border-left:3px solid;font-size:.9em}.anomaly-item.high{border-left-color:#e74c3c;background:rgba(231,76,60,.1)}.anomaly-item.medium{border-left-color:#f39c12;background:rgba(243,156,18,.1)}.anomaly-position{color:rgba(255,255,255,.8);font-weight:500}.anomaly-value{color:gold;font-family:Courier New,monospace;font-weight:600}.anomaly-score{color:rgba(255,255,255,.8);font-family:Courier New,monospace;font-size:.8em}.anomaly-severity{background:rgba(0,0,0,.3);padding:2px 6px;border-radius:10px;font-size:.75em;font-weight:600;text-transform:uppercase}.comparison-modal-overlay,.export-modal-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:10000;backdrop-filter:blur(5px)}.comparison-modal,.export-modal{background:linear-gradient(135deg,#1e3c72,#2a5298);border-radius:15px;padding:0;max-width:90vw;max-height:90vh;overflow:hidden;box-shadow:0 20px 40px rgba(0,0,0,.5);border:1px solid rgba(255,255,255,.1)}.comparison-header,.export-header{background:rgba(255,255,255,.1);padding:20px;border-bottom:1px solid rgba(255,255,255,.2);display:flex;justify-content:space-between;align-items:center}.comparison-header h3,.export-header h3{margin:0;color:#4ecdc4;font-size:1.3em}.close-comparison,.close-export{background:none;border:none;color:rgba(255,255,255,.8);font-size:1.5em;cursor:pointer;padding:5px;border-radius:50%;transition:all .3s ease}.close-comparison:hover,.close-export:hover{background:rgba(255,255,255,.1);color:#fff}.comparison-content,.export-content{padding:20px;overflow-y:auto;max-height:70vh}.vector-selector-grid{display:grid;grid-template-columns:1fr 1fr;gap:20px;margin-bottom:20px}.selector-group{display:flex;flex-direction:column;gap:8px}.selector-group label{color:rgba(255,255,255,.8);font-weight:500;font-size:.9em}.selector-group select{background:rgba(255,255,255,.1);border:1px solid rgba(255,255,255,.2);color:#fff;padding:10px;border-radius:8px;font-size:.9em}.comparison-metrics{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px}.metric-card{background:rgba(255,255,255,.05);border-radius:10px;padding:15px;border:1px solid rgba(255,255,255,.1);text-align:center;transition:all .3s ease}.metric-card:hover{transform:translateY(-3px);box-shadow:0 8px 25px rgba(0,0,0,.3)}.metric-label{color:rgba(255,255,255,.8);font-size:.9em;margin-bottom:8px;font-weight:500}.metric-value{color:gold;font-size:1.4em;font-weight:700;font-family:Courier New,monospace}.export-options{display:flex;gap:15px;margin-bottom:20px;flex-wrap:wrap}.export-btn{background:linear-gradient(135deg,#4ecdc4,#44a08d);color:#fff;border:none;padding:12px 20px;border-radius:8px;cursor:pointer;font-weight:600;transition:all .3s ease;font-size:.9em}.export-btn:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(78,205,196,.4)}.export-preview{background:rgba(0,0,0,.3);border-radius:8px;padding:15px;border:1px solid rgba(255,255,255,.1)}.export-preview h4{margin:0 0 10px;color:#4ecdc4;font-size:1em}#export-preview-content{background:rgba(0,0,0,.5);color:#0f0;padding:10px;border-radius:4px;font-family:Courier New,monospace;font-size:.8em;max-height:200px;overflow-y:auto;white-space:pre-wrap;word-wrap:break-word}.btn-compact{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;border:none;padding:8px 16px;border-radius:20px;cursor:pointer;font-weight:500;font-size:.85em;transition:all .3s ease}.btn-compact:hover{transform:translateY(-1px);box-shadow:0 4px 12px rgba(102,126,234,.4)}.theme-switcher{position:fixed;top:20px;right:20px;width:40px;height:40px;border-radius:50%;background:rgba(255,255,255,.1);color:#fff;display:flex;justify-content:center;align-items:center;cursor:pointer;z-index:1001;transition:all .3s ease}.theme-switcher:hover{background:rgba(255,255,255,.2);transform:scale(1.1)}body.light-theme{background:linear-gradient(135deg,#f5f7fa,#c3cfe2);color:#333}.light-theme .app-header h1{color:#2c3e50}.light-theme .header-info span{background:rgba(0,0,0,.05);border-color:rgba(0,0,0,.1)}.light-theme .controls-toolbar{background:rgba(255,255,255,.6);border-color:rgba(0,0,0,.1);box-shadow:0 4px 20px rgba(0,0,0,.05)}.light-theme .control-compact{background:rgba(0,0,0,.05);border-color:rgba(0,0,0,.1)}.light-theme .btn-compact{color:#333;background:rgba(0,0,0,.05);border-color:rgba(0,0,0,.1)}.light-theme .btn-compact:hover{background:rgba(0,0,0,.1)}.light-theme .btn-primary{color:#fff}.light-theme .btn-help{color:#333}.light-theme .info-sidebar{background:rgba(255,255,255,.4)}.light-theme .sidebar-panel{background:rgba(255,255,255,.5)}.light-theme #main-viz{background:#e9ecef}.light-theme .modal-content{background:#fdfdfd}@media (max-width: 1200px){.container{grid-template-columns:1fr 350px}}@media (max-width: 992px){.container{grid-template-areas:"header" "main" "sidebar";grid-template-columns:1fr}.info-sidebar{flex-direction:row;overflow-x:auto}.sidebar-panel{min-width:300px}}@media (max-width: 768px){.controls-toolbar{flex-direction:column;align-items:stretch}.control-group{justify-content:center;flex-wrap:wrap}.info-sidebar{flex-direction:column}}@media (max-width: 480px){.btn-text{display:none}.btn-compact{padding:6px 8px}.btn-icon{font-size:1.2em}}.btn-neural{background:linear-gradient(135deg,#667eea,#764ba2);border:2px solid #667eea}.btn-neural:hover{background:linear-gradient(135deg,#764ba2,#667eea);transform:translateY(-2px);box-shadow:0 8px 25px rgba(102,126,234,.3)}.btn-neural.active{background:linear-gradient(135deg,#f093fb,#f5576c);border-color:#f5576c;box-shadow:0 0 20px rgba(245,87,108,.4)}.control-select{background:rgba(255,255,255,.1);border:1px solid rgba(255,255,255,.2);border-radius:6px;color:#fff;padding:4px 8px;font-size:12px;min-width:100px}.control-select:focus{outline:none;border-color:#4ecdc4;box-shadow:0 0 0 2px rgba(78,205,196,.2)}.control-select option{background:#2c3e50;color:#fff}.periodic-table-container{border-top:2px solid rgba(255,255,255,.2);background:rgba(0,0,0,.1);backdrop-filter:blur(10px)}.periodic-element{transition:all .2s ease}.periodic-element:hover{transform:scale(1.05)}.periodic-element.selected rect{stroke:gold!important;stroke-width:3!important;filter:drop-shadow(0 0 8px rgba(255,215,0,.6))}.neural-connection{transition:opacity .3s ease}.activation-ring{animation:neuralPulse 2s ease-in-out infinite}@keyframes neuralPulse{0%,to{opacity:.7}50%{opacity:1}}.neural-input-highlight{animation:inputPulse 1.5s ease-in-out infinite}@keyframes inputPulse{0%,to{stroke-dashoffset:0;opacity:.8}50%{stroke-dashoffset:15;opacity:1}}.force-line.force-cosine{filter:drop-shadow(0 0 3px rgba(231,76,60,.5))}.force-line.force-correlation{filter:drop-shadow(0 0 3px rgba(52,152,219,.5))}.force-line.force-euclidean{filter:drop-shadow(0 0 3px rgba(155,89,182,.5))}.force-line.force-manhattan{filter:drop-shadow(0 0 3px rgba(243,156,18,.5))}.force-line.force-quantum{filter:drop-shadow(0 0 3px rgba(26,188,156,.5))}.force-line.force-resonance{filter:drop-shadow(0 0 3px rgba(255,107,107,.5))}.force-tooltip,.periodic-tooltip{font-family:Courier New,monospace;border:1px solid rgba(255,255,255,.2);backdrop-filter:blur(10px);animation:tooltipFadeIn .2s ease-out}@keyframes tooltipFadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.neural-info-panel{backdrop-filter:blur(15px);animation:slideInRight .3s ease-out}@keyframes slideInRight{0%{opacity:0;transform:translate(20px)}to{opacity:1;transform:translate(0)}}.btn-compact:focus-visible{outline:2px solid #4ecdc4;outline-offset:2px}.control-select:focus-visible{outline:2px solid #4ecdc4;outline-offset:2px}@media (prefers-reduced-motion: reduce){.neural-connection,.activation-ring,.neural-input-highlight{animation:none!important}}.vector-analysis-section{background:linear-gradient(135deg,rgba(13,27,42,.95),rgba(27,38,59,.95));border-radius:16px;margin:20px;padding:24px;box-shadow:0 8px 32px rgba(0,0,0,.3);backdrop-filter:blur(10px);border:1px solid rgba(255,255,255,.1);animation:slideInUp .6s ease-out}@keyframes slideInUp{0%{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}.analysis-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:16px;border-bottom:2px solid rgba(78,205,196,.3)}.analysis-header h2{font-size:2rem;color:#4ecdc4;margin:0;text-shadow:0 2px 4px rgba(0,0,0,.3)}.analysis-header p{color:rgba(255,255,255,.8);margin:4px 0 0;font-size:1rem}.analysis-toggle-controls{display:flex;gap:12px;align-items:center}.overview-stats{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:16px;margin-bottom:32px}.stat-card{background:linear-gradient(135deg,rgba(78,205,196,.1),rgba(255,193,7,.1));border:1px solid rgba(78,205,196,.3);border-radius:12px;padding:20px;display:flex;align-items:center;gap:16px;transition:all .3s ease;position:relative;overflow:hidden}.stat-card:before{content:"";position:absolute;top:0;left:0;right:0;bottom:0;background:linear-gradient(45deg,transparent 30%,rgba(255,255,255,.05) 50%,transparent 70%);transform:translate(-100%);transition:transform .6s ease}.stat-card:hover:before{transform:translate(100%)}.stat-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(78,205,196,.2);border-color:rgba(78,205,196,.5)}.stat-icon{font-size:2.5rem;line-height:1}.stat-info{flex:1}.stat-value{font-size:1.8rem;font-weight:700;color:#4ecdc4;margin-bottom:4px}.stat-label{font-size:.9rem;color:rgba(255,255,255,.7);text-transform:uppercase;letter-spacing:.5px}.analysis-tabs{background:rgba(0,0,0,.2);border-radius:12px;overflow:hidden;border:1px solid rgba(255,255,255,.1)}.tab-buttons{display:flex;background:rgba(0,0,0,.3);border-bottom:1px solid rgba(255,255,255,.1)}.tab-btn{flex:1;padding:16px 20px;background:transparent;border:none;color:rgba(255,255,255,.7);cursor:pointer;transition:all .3s ease;font-size:.95rem;font-weight:500;position:relative}.tab-btn:after{content:"";position:absolute;bottom:0;left:0;right:0;height:3px;background:#4ecdc4;transform:scaleX(0);transition:transform .3s ease}.tab-btn:hover{background:rgba(78,205,196,.1);color:rgba(255,255,255,.9)}.tab-btn.active{background:rgba(78,205,196,.15);color:#4ecdc4}.tab-btn.active:after{transform:scaleX(1)}.tab-content{padding:24px}.tab-panel{display:none;animation:fadeInTab .3s ease-in-out}.tab-panel.active{display:block}@keyframes fadeInTab{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.vector-selector{margin-bottom:24px;padding:16px;background:rgba(0,0,0,.2);border-radius:8px;border:1px solid rgba(255,255,255,.1)}.vector-selector label{display:block;margin-bottom:8px;color:#4ecdc4;font-weight:500}.vector-selector select{width:100%;max-width:300px}.analysis-placeholder{text-align:center;padding:60px 20px;color:rgba(255,255,255,.6)}.placeholder-icon{font-size:4rem;margin-bottom:16px;opacity:.5}.analysis-placeholder h3{color:rgba(255,255,255,.8);margin-bottom:12px}.analysis-placeholder p{color:rgba(255,255,255,.6);max-width:400px;margin:0 auto;line-height:1.5}.relationship-controls{display:flex;gap:24px;margin-bottom:24px;padding:16px;background:rgba(0,0,0,.2);border-radius:8px;border:1px solid rgba(255,255,255,.1);align-items:end}.relationship-controls .control-group{flex:1}.relationship-controls label{display:block;margin-bottom:8px;color:#4ecdc4;font-weight:500}.relationship-matrix{background:rgba(0,0,0,.1);border-radius:8px;min-height:300px;padding:20px;border:1px solid rgba(255,255,255,.1)}.matrix-placeholder{display:flex;align-items:center;justify-content:center;height:260px;color:rgba(255,255,255,.5);font-style:italic}.clustering-controls{display:flex;gap:20px;margin-bottom:24px;padding:16px;background:rgba(0,0,0,.2);border-radius:8px;border:1px solid rgba(255,255,255,.1);align-items:end}.clustering-controls .control-group{flex:1}.clustering-controls label{display:block;margin-bottom:8px;color:#4ecdc4;font-weight:500}.clustering-results{background:rgba(0,0,0,.1);border-radius:8px;min-height:300px;padding:20px;border:1px solid rgba(255,255,255,.1)}.clustering-placeholder{display:flex;flex-direction:column;align-items:center;justify-content:center;height:260px;text-align:center}.clustering-placeholder h3{color:rgba(255,255,255,.8);margin:16px 0 8px}.clustering-placeholder p{color:rgba(255,255,255,.6);margin:0}.stats-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px}.stats-card{background:linear-gradient(135deg,rgba(0,0,0,.3),rgba(0,0,0,.1));border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:20px;transition:all .3s ease}.stats-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,.2);border-color:rgba(78,205,196,.3)}.stats-card h4{color:#4ecdc4;margin:0 0 16px;font-size:1.1rem;padding-bottom:8px;border-bottom:1px solid rgba(78,205,196,.3)}.stats-content{min-height:150px}.stats-placeholder{display:flex;align-items:center;justify-content:center;height:150px;color:rgba(255,255,255,.5);font-style:italic;text-align:center}.analysis-detailed{animation:slideInRight .4s ease-out}@keyframes slideInRight{0%{opacity:0;transform:translate(30px)}to{opacity:1;transform:translate(0)}}.detailed-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:16px;border-bottom:2px solid rgba(78,205,196,.3)}.detailed-header h3{color:#4ecdc4;margin:0;font-size:1.5rem}.vector-details-card{background:linear-gradient(135deg,rgba(0,0,0,.3),rgba(0,0,0,.1));border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:24px}.vector-details-card .vector-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:16px;border-bottom:1px solid rgba(255,255,255,.1)}.vector-details-card .vector-name{color:#ffc107;margin:0;font-size:1.3rem}.vector-badges{display:flex;gap:8px}.vector-badge{padding:6px 12px;border-radius:20px;font-size:.8rem;font-weight:500;background:rgba(78,205,196,.2);color:#4ecdc4;border:1px solid rgba(78,205,196,.3)}.details-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px}.detail-panel{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:20px}.detail-panel h5{color:#4ecdc4;margin:0 0 16px;font-size:1rem;padding-bottom:8px;border-bottom:1px solid rgba(78,205,196,.3)}.components-chart-large{width:100%;height:200px;background:rgba(0,0,0,.1);border-radius:4px;border:1px solid rgba(255,255,255,.1)}.properties-list{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:12px}.property-item{background:rgba(0,0,0,.2);padding:12px;border-radius:6px;text-align:center;border:1px solid rgba(255,255,255,.1)}.property-label{font-size:.8rem;color:rgba(255,255,255,.7);margin-bottom:4px}.property-value{font-size:1.1rem;font-weight:700;color:#4ecdc4}.relationships-detailed{max-height:300px;overflow-y:auto}.relationship-item-detailed{background:rgba(0,0,0,.2);padding:12px;border-radius:6px;margin-bottom:8px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.relationship-item-detailed:hover{background:rgba(78,205,196,.1);border-color:rgba(78,205,196,.3)}.advanced-analysis{display:grid;grid-template-columns:1fr;gap:12px}.analysis-metric{background:rgba(0,0,0,.2);padding:12px;border-radius:6px;border:1px solid rgba(255,255,255,.1);display:flex;justify-content:space-between;align-items:center}.metric-name{font-weight:500;color:rgba(255,255,255,.9)}.metric-value{font-weight:700;color:#4ecdc4}@media (max-width: 768px){.vector-analysis-section{margin:10px;padding:16px}.analysis-header{flex-direction:column;gap:16px;text-align:center}.analysis-toggle-controls{flex-wrap:wrap;justify-content:center}.overview-stats{grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:12px}.tab-buttons{flex-direction:column}.relationship-controls,.clustering-controls{flex-direction:column;gap:16px}.stats-grid,.details-grid{grid-template-columns:1fr}}[data-theme=dark] .vector-analysis-section{background:linear-gradient(135deg,rgba(8,15,26,.95),rgba(15,20,35,.95))}[data-theme=dark] .stat-card{background:linear-gradient(135deg,rgba(78,205,196,.08),rgba(255,193,7,.08))}[data-theme=dark] .analysis-tabs{background:rgba(0,0,0,.4)}.stat-card:nth-child(1){animation-delay:.1s}.stat-card:nth-child(2){animation-delay:.2s}.stat-card:nth-child(3){animation-delay:.3s}.stat-card:nth-child(4){animation-delay:.4s}.relationships-detailed::-webkit-scrollbar,.clustering-results::-webkit-scrollbar{width:6px}.relationships-detailed::-webkit-scrollbar-track,.clustering-results::-webkit-scrollbar-track{background:rgba(0,0,0,.1);border-radius:3px}.relationships-detailed::-webkit-scrollbar-thumb,.clustering-results::-webkit-scrollbar-thumb{background:rgba(78,205,196,.5);border-radius:3px}.relationships-detailed::-webkit-scrollbar-thumb:hover,.clustering-results::-webkit-scrollbar-thumb:hover{background:rgba(78,205,196,.7)}.vector-analysis-card{background:linear-gradient(135deg,rgba(0,0,0,.3),rgba(0,0,0,.1));border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:24px;margin-top:16px}.vector-header-enhanced{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:16px;border-bottom:2px solid rgba(78,205,196,.3)}.vector-header-enhanced h4{color:#ffc107;margin:0;font-size:1.3rem}.vector-badge.charge-positive{background:linear-gradient(135deg,rgba(78,205,196,.3),rgba(78,205,196,.2));color:#4ecdc4;border:1px solid rgba(78,205,196,.5)}.vector-badge.charge-negative{background:linear-gradient(135deg,rgba(240,98,146,.3),rgba(240,98,146,.2));color:#f06292;border:1px solid rgba(240,98,146,.5)}.vector-badge.charge-neutral{background:linear-gradient(135deg,rgba(108,117,125,.3),rgba(108,117,125,.2));color:#6c757d;border:1px solid rgba(108,117,125,.5)}.vector-badge.magnitude{background:linear-gradient(135deg,rgba(255,193,7,.3),rgba(255,193,7,.2));color:#ffc107;border:1px solid rgba(255,193,7,.5)}.analysis-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px}.analysis-panel{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:20px;transition:all .3s ease}.analysis-panel:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,.2);border-color:rgba(78,205,196,.3)}.analysis-panel h5{color:#4ecdc4;margin:0 0 16px;font-size:1rem;padding-bottom:8px;border-bottom:1px solid rgba(78,205,196,.3)}.component-stats,.stats-detailed,.information-metrics{display:flex;flex-direction:column;gap:8px}.stat-row{display:flex;justify-content:space-between;align-items:center;padding:8px 12px;background:rgba(0,0,0,.2);border-radius:6px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.stat-row:hover{background:rgba(78,205,196,.1);border-color:rgba(78,205,196,.3)}.stat-name{color:rgba(255,255,255,.9);font-weight:500}.stat-value{color:#4ecdc4;font-weight:700;font-family:Courier New,monospace}.components-chart{width:100%;height:180px;background:rgba(0,0,0,.1);border-radius:4px;border:1px solid rgba(255,255,255,.1);margin-bottom:16px}.relationships-compact{max-height:250px;overflow-y:auto}.relationship-compact-item{background:rgba(0,0,0,.2);padding:12px;border-radius:6px;margin-bottom:8px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.relationship-compact-item:hover{background:rgba(78,205,196,.1);border-color:rgba(78,205,196,.3);transform:translate(4px)}.relationship-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.relationship-header .vector-name{color:#ffc107;font-weight:500}.similarity-badge{background:rgba(78,205,196,.2);color:#4ecdc4;padding:4px 8px;border-radius:12px;font-size:.8rem;font-weight:700;border:1px solid rgba(78,205,196,.3)}.relationship-metrics{display:flex;gap:16px;font-size:.9rem;color:rgba(255,255,255,.7)}.clustering-results-content h4{color:#4ecdc4;margin:0 0 20px;text-align:center}.clusters-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:16px}.cluster-card{background:linear-gradient(135deg,rgba(78,205,196,.1),rgba(255,193,7,.1));border:1px solid rgba(78,205,196,.3);border-radius:8px;padding:16px;transition:all .3s ease}.cluster-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(78,205,196,.2);border-color:rgba(78,205,196,.5)}.cluster-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;padding-bottom:8px;border-bottom:1px solid rgba(78,205,196,.3)}.cluster-header h5{color:#4ecdc4;margin:0;font-size:1rem}.cluster-size{background:rgba(78,205,196,.2);color:#4ecdc4;padding:4px 8px;border-radius:12px;font-size:.8rem;font-weight:700}.cluster-vectors{display:flex;flex-wrap:wrap;gap:6px}.cluster-vector{background:rgba(255,193,7,.2);color:#ffc107;padding:4px 8px;border-radius:12px;font-size:.8rem;font-weight:500;border:1px solid rgba(255,193,7,.3)}.stat-item{display:flex;justify-content:space-between;align-items:center;padding:8px 12px;background:rgba(0,0,0,.2);border-radius:6px;border:1px solid rgba(255,255,255,.1);margin-bottom:6px;transition:all .3s ease}.stat-item:hover{background:rgba(78,205,196,.1);border-color:rgba(78,205,196,.3)}.matrix-cell{cursor:pointer;transition:all .2s ease}.matrix-cell:hover{stroke:#4ecdc4;stroke-width:2;opacity:1!important}.analysis-loading{display:flex;align-items:center;justify-content:center;height:200px;color:rgba(255,255,255,.6);font-style:italic}.analysis-loading:before{content:"⚡";margin-right:8px;animation:pulse 1.5s ease-in-out infinite}@keyframes pulse{0%,to{opacity:.4}50%{opacity:1}}.tooltip-enhanced{position:absolute;background:rgba(0,0,0,.9);color:#fff;padding:8px 12px;border-radius:6px;font-size:.8rem;pointer-events:none;z-index:1000;border:1px solid rgba(78,205,196,.5);box-shadow:0 4px 12px rgba(0,0,0,.3)}.vector-title-section{flex:1}.vector-summary{display:flex;gap:20px;margin-top:8px;flex-wrap:wrap}.summary-item{display:flex;flex-direction:column;gap:2px}.summary-label{font-size:.8rem;color:rgba(255,255,255,.6);text-transform:uppercase;letter-spacing:.5px}.summary-value{font-size:1rem;font-weight:700;color:#4ecdc4;font-family:Courier New,monospace}.vector-badges-enhanced{display:flex;flex-direction:column;gap:8px;align-items:flex-end}.vector-badge .badge-icon{margin-right:4px}.vector-badge.sparsity{background:linear-gradient(135deg,rgba(156,39,176,.3),rgba(156,39,176,.2));color:#9c27b0;border:1px solid rgba(156,39,176,.5)}.analysis-tabs-enhanced{margin-top:20px}.tab-nav{display:flex;background:rgba(0,0,0,.3);border-radius:8px 8px 0 0;border:1px solid rgba(255,255,255,.1);border-bottom:none;overflow:hidden}.tab-nav-btn{flex:1;padding:12px 16px;background:transparent;border:none;color:rgba(255,255,255,.7);cursor:pointer;transition:all .3s ease;font-size:.9rem;font-weight:500;position:relative;border-right:1px solid rgba(255,255,255,.1)}.tab-nav-btn:last-child{border-right:none}.tab-nav-btn:hover{background:rgba(78,205,196,.1);color:rgba(255,255,255,.9)}.tab-nav-btn.active{background:linear-gradient(135deg,rgba(78,205,196,.2),rgba(78,205,196,.1));color:#4ecdc4}.tab-content-enhanced{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:0 0 8px 8px;padding:24px;min-height:400px}.tab-pane{display:none;animation:fadeIn .3s ease-in-out}.tab-pane.active{display:block}.visualization-container{margin-bottom:24px}.chart-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px;padding-bottom:8px;border-bottom:1px solid rgba(255,255,255,.1)}.chart-header h6{color:#4ecdc4;margin:0;font-size:1rem}.mini-select{background:rgba(0,0,0,.3);color:#fff;border:1px solid rgba(255,255,255,.2);border-radius:4px;padding:4px 8px;font-size:.8rem}.components-chart-enhanced{width:100%;height:300px;background:rgba(0,0,0,.1);border-radius:8px;border:1px solid rgba(255,255,255,.1);margin-bottom:20px}.insight-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:16px;margin-bottom:20px}.insight-card{background:linear-gradient(135deg,rgba(0,0,0,.4),rgba(0,0,0,.2));border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:16px;transition:all .3s ease}.insight-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,.3)}.insight-card.positive{border-color:rgba(78,205,196,.3)}.insight-card.negative{border-color:rgba(240,98,146,.3)}.insight-card.dominant{border-color:rgba(255,193,7,.3)}.insight-card.range{border-color:rgba(156,39,176,.3)}.insight-header{display:flex;align-items:center;gap:8px;margin-bottom:8px}.insight-icon{font-size:1.2rem}.insight-title{font-weight:500;color:rgba(255,255,255,.9)}.insight-value{font-size:1.5rem;font-weight:700;color:#4ecdc4;margin-bottom:4px}.insight-detail{font-size:.8rem;color:rgba(255,255,255,.6)}.component-extremes h6{color:#4ecdc4;margin:0 0 12px;font-size:1rem}.extreme-category{margin-bottom:16px}.extreme-header{display:flex;align-items:center;gap:8px;margin-bottom:8px}.extreme-icon{font-size:1.1rem}.extreme-title{font-weight:500;color:rgba(255,255,255,.9)}.extreme-items{display:flex;flex-direction:column;gap:4px}.extreme-item{display:flex;justify-content:space-between;align-items:center;padding:6px 12px;background:rgba(0,0,0,.2);border-radius:4px;border:1px solid rgba(255,255,255,.1)}.extreme-index{font-size:.8rem;color:rgba(255,255,255,.7)}.extreme-value.positive{color:#4ecdc4;font-weight:700;font-family:Courier New,monospace}.extreme-value.negative{color:#f06292;font-weight:700;font-family:Courier New,monospace}.stats-categories{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin-bottom:24px}.stats-category{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:20px}.stats-category h6{color:#4ecdc4;margin:0 0 16px;font-size:1rem;padding-bottom:8px;border-bottom:1px solid rgba(78,205,196,.3)}.stat-row.enhanced{background:rgba(0,0,0,.3);margin-bottom:8px;border-radius:6px;padding:10px 14px}.statistical-insights h6{color:#4ecdc4;margin:0 0 12px}.insight-item{display:flex;align-items:center;gap:12px;padding:10px 14px;background:rgba(0,0,0,.2);border-radius:6px;margin-bottom:8px;border:1px solid rgba(255,255,255,.1)}.insight-indicator{font-size:1.2rem;min-width:20px}.insight-text{color:rgba(255,255,255,.9);line-height:1.4}.relationship-controls-enhanced{display:flex;gap:20px;margin-bottom:20px;padding:16px;background:rgba(0,0,0,.2);border-radius:8px;border:1px solid rgba(255,255,255,.1)}.relationships-visualization{display:grid;grid-template-columns:1fr 1fr;gap:20px}.relationships-chart{background:rgba(0,0,0,.1);border-radius:8px;border:1px solid rgba(255,255,255,.1);min-height:200px}.relationships-list-enhanced{max-height:400px;overflow-y:auto}.relationship-item-enhanced{display:flex;align-items:center;gap:12px;padding:12px;background:rgba(0,0,0,.2);border-radius:6px;margin-bottom:8px;border:1px solid rgba(255,255,255,.1);transition:all .3s ease}.relationship-item-enhanced:hover{background:rgba(78,205,196,.1);border-color:rgba(78,205,196,.3)}.relationship-rank{font-weight:700;color:#ffc107;min-width:30px}.relationship-info{flex:1}.relationship-vector{font-weight:500;color:rgba(255,255,255,.9);margin-bottom:2px}.relationship-metric{font-size:.8rem;color:rgba(255,255,255,.6);font-family:Courier New,monospace}.relationship-strength{width:80px}.strength-bar{width:100%;height:6px;background:rgba(255,255,255,.1);border-radius:3px;overflow:hidden}.strength-fill{height:100%;background:linear-gradient(90deg,#4ecdc4,#ffc107);border-radius:3px;transition:width .3s ease}.pattern-detection h6,.anomaly-detection h6{color:#4ecdc4;margin:0 0 16px;font-size:1rem}.patterns-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:16px;margin-bottom:24px}.pattern-card{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:16px;transition:all .3s ease}.pattern-card.strong{border-color:rgba(78,205,196,.5);background:rgba(78,205,196,.05)}.pattern-card.moderate{border-color:rgba(255,193,7,.5);background:rgba(255,193,7,.05)}.pattern-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,.3)}.pattern-header{display:flex;align-items:center;gap:8px;margin-bottom:8px}.pattern-icon{font-size:1.2rem}.pattern-name{font-weight:500;color:rgba(255,255,255,.9)}.pattern-strength{font-size:1.2rem;font-weight:700;color:#4ecdc4;margin-bottom:6px}.pattern-description{font-size:.9rem;color:rgba(255,255,255,.7);line-height:1.4}.anomaly-item{display:flex;align-items:center;gap:12px;padding:10px 14px;background:rgba(0,0,0,.2);border-radius:6px;margin-bottom:8px;border:1px solid rgba(255,255,255,.1)}.anomaly-item.high{border-color:rgba(244,67,54,.5);background:rgba(244,67,54,.05)}.anomaly-item.medium{border-color:rgba(255,152,0,.5);background:rgba(255,152,0,.05)}.anomaly-icon{font-size:1.1rem;color:#ff9800}.anomaly-text{flex:1;color:rgba(255,255,255,.9)}.anomaly-score{font-weight:700;color:#ff9800;font-family:Courier New,monospace}.quantum-metrics{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:16px;margin-bottom:24px}.quantum-card{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:16px;transition:all .3s ease}.quantum-card.excitatory{border-color:rgba(78,205,196,.3)}.quantum-card.inhibitory{border-color:rgba(240,98,146,.3)}.quantum-card.balance{border-color:rgba(255,193,7,.3)}.quantum-card:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(0,0,0,.3)}.quantum-header{display:flex;align-items:center;gap:8px;margin-bottom:12px}.quantum-icon{font-size:1.2rem}.quantum-title{font-weight:500;color:rgba(255,255,255,.9)}.quantum-value{font-size:1.4rem;font-weight:700;color:#4ecdc4;margin-bottom:8px;font-family:Courier New,monospace}.quantum-bar{width:100%;height:8px;background:rgba(255,255,255,.1);border-radius:4px;overflow:hidden;margin-bottom:8px}.quantum-fill.excitatory{height:100%;background:linear-gradient(90deg,#4ecdc4,#26a69a);border-radius:4px}.quantum-fill.inhibitory{height:100%;background:linear-gradient(90deg,#f06292,#e91e63);border-radius:4px}.quantum-interpretation{font-size:.9rem;color:rgba(255,255,255,.7);font-style:italic}.entropy-analysis h6{color:#4ecdc4;margin:0 0 16px}.entropy-card{background:rgba(0,0,0,.2);border:1px solid rgba(255,255,255,.1);border-radius:8px;padding:16px;margin-bottom:12px;transition:all .3s ease}.entropy-card:hover{background:rgba(78,205,196,.05);border-color:rgba(78,205,196,.3)}.entropy-header{display:flex;align-items:center;gap:8px;margin-bottom:8px}.entropy-icon{font-size:1.1rem}.entropy-title{font-weight:500;color:rgba(255,255,255,.9)}.entropy-value{font-size:1.2rem;font-weight:700;color:#4ecdc4;margin-bottom:8px;font-family:Courier New,monospace}.entropy-bar{width:100%;height:6px;background:rgba(255,255,255,.1);border-radius:3px;overflow:hidden;margin-bottom:6px}.entropy-fill{height:100%;background:linear-gradient(90deg,#4ecdc4,#26a69a);border-radius:3px}.entropy-detail{font-size:.8rem;color:rgba(255,255,255,.6)}@media (max-width: 768px){.vector-summary{flex-direction:column;gap:8px}.vector-badges-enhanced{flex-direction:row;align-items:center;flex-wrap:wrap}.tab-nav{flex-direction:column}.tab-nav-btn{border-right:none;border-bottom:1px solid rgba(255,255,255,.1)}.relationships-visualization{grid-template-columns:1fr}.relationship-controls-enhanced{flex-direction:column;gap:12px}.insight-grid,.quantum-metrics{grid-template-columns:1fr}}@media (max-width: 480px){.analysis-grid{grid-template-columns:1fr}.relationship-metrics{flex-direction:column;gap:4px}.cluster-vectors{justify-content:center}.stat-row{flex-direction:column;text-align:center;gap:4px}}.individual-relationships{padding:16px}.relationship-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:12px;border-bottom:1px solid rgba(78,205,196,.3)}.relationship-header h6{color:#4ecdc4;margin:0;font-size:1.2rem}.metric-selector{display:flex;align-items:center;gap:8px}.metric-selector label{color:rgba(255,255,255,.8);font-size:.9rem}.metrics-overview{margin-bottom:32px}.metrics-overview h6{color:#4ecdc4;margin-bottom:16px;font-size:1.1rem}.metrics-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:16px}.metric-overview-card{background:linear-gradient(135deg,rgba(78,205,196,.08),rgba(255,193,7,.08));border:1px solid rgba(78,205,196,.2);border-radius:12px;padding:16px;transition:all .3s ease}.metric-overview-card:hover{transform:translateY(-2px);box-shadow:0 6px 20px rgba(78,205,196,.15);border-color:rgba(78,205,196,.4)}.metric-header{display:flex;align-items:center;gap:8px;margin-bottom:12px}.metric-icon{font-size:1.5rem}.metric-name{color:#4ecdc4;font-weight:600;font-size:.95rem}.metric-stats{display:flex;flex-direction:column;gap:8px}.metric-stats .stat-item{display:flex;justify-content:space-between;align-items:center}.metric-stats .stat-label{color:rgba(255,255,255,.7);font-size:.85rem}.metric-stats .stat-value{color:#4ecdc4;font-weight:500;font-size:.9rem}.relationship-details h6{color:#4ecdc4;margin-bottom:16px;font-size:1.1rem}.relationships-table-container{overflow-x:auto;border-radius:8px;border:1px solid rgba(78,205,196,.2)}.relationships-table{width:100%;border-collapse:collapse;background:rgba(0,0,0,.2)}.relationships-table th{background:rgba(78,205,196,.1);color:#4ecdc4;padding:12px 16px;text-align:left;font-weight:600;font-size:.9rem;border-bottom:1px solid rgba(78,205,196,.3)}.relationships-table td{padding:12px 16px;border-bottom:1px solid rgba(255,255,255,.1)}.relationship-row:hover{background:rgba(78,205,196,.05)}.vector-cell{font-weight:600}.vector-id{color:#4ecdc4;background:rgba(78,205,196,.1);padding:4px 8px;border-radius:4px;font-size:.85rem}.metric-cell{color:rgba(255,255,255,.8);font-family:Monaco,Consolas,monospace;font-size:.85rem;text-align:center}.metric-cell.highlighted{background:rgba(78,205,196,.15);color:#4ecdc4;font-weight:600}@media (max-width: 768px){.metrics-grid{grid-template-columns:1fr}.relationship-header{flex-direction:column;align-items:flex-start;gap:12px}.relationships-table-container{font-size:.8rem}.relationships-table th,.relationships-table td{padding:8px 12px}.metric-overview-card,.individual-relationships{padding:12px}}@media (max-width: 480px){.relationships-table-container{font-size:.75rem}.relationships-table th,.relationships-table td{padding:6px 8px}}@font-face{font-family:KaTeX_AMS;src:url(/assets/KaTeX_AMS-Regular-BQhdFMY1.woff2) format("woff2"),url(/assets/KaTeX_AMS-Regular-DMm9YOAa.woff) format("woff"),url(/assets/KaTeX_AMS-Regular-DRggAlZN.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Caligraphic;src:url(/assets/KaTeX_Caligraphic-Bold-Dq_IR9rO.woff2) format("woff2"),url(/assets/KaTeX_Caligraphic-Bold-BEiXGLvX.woff) format("woff"),url(/assets/KaTeX_Caligraphic-Bold-ATXxdsX0.ttf) format("truetype");font-weight:700;font-style:normal}@font-face{font-family:KaTeX_Caligraphic;src:url(/assets/KaTeX_Caligraphic-Regular-Di6jR-x-.woff2) format("woff2"),url(/assets/KaTeX_Caligraphic-Regular-CTRA-rTL.woff) format("woff"),url(/assets/KaTeX_Caligraphic-Regular-wX97UBjC.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Fraktur;src:url(/assets/KaTeX_Fraktur-Bold-CL6g_b3V.woff2) format("woff2"),url(/assets/KaTeX_Fraktur-Bold-BsDP51OF.woff) format("woff"),url(/assets/KaTeX_Fraktur-Bold-BdnERNNW.ttf) format("truetype");font-weight:700;font-style:normal}@font-face{font-family:KaTeX_Fraktur;src:url(/assets/KaTeX_Fraktur-Regular-CTYiF6lA.woff2) format("woff2"),url(/assets/KaTeX_Fraktur-Regular-Dxdc4cR9.woff) format("woff"),url(/assets/KaTeX_Fraktur-Regular-CB_wures.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Main;src:url(/assets/KaTeX_Main-Bold-Cx986IdX.woff2) format("woff2"),url(/assets/KaTeX_Main-Bold-Jm3AIy58.woff) format("woff"),url(/assets/KaTeX_Main-Bold-waoOVXN0.ttf) format("truetype");font-weight:700;font-style:normal}@font-face{font-family:KaTeX_Main;src:url(/assets/KaTeX_Main-BoldItalic-DxDJ3AOS.woff2) format("woff2"),url(/assets/KaTeX_Main-BoldItalic-SpSLRI95.woff) format("woff"),url(/assets/KaTeX_Main-BoldItalic-DzxPMmG6.ttf) format("truetype");font-weight:700;font-style:italic}@font-face{font-family:KaTeX_Main;src:url(/assets/KaTeX_Main-Italic-NWA7e6Wa.woff2) format("woff2"),url(/assets/KaTeX_Main-Italic-BMLOBm91.woff) format("woff"),url(/assets/KaTeX_Main-Italic-3WenGoN9.ttf) format("truetype");font-weight:400;font-style:italic}@font-face{font-family:KaTeX_Main;src:url(/assets/KaTeX_Main-Regular-B22Nviop.woff2) format("woff2"),url(/assets/KaTeX_Main-Regular-Dr94JaBh.woff) format("woff"),url(/assets/KaTeX_Main-Regular-ypZvNtVU.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Math;src:url(/assets/KaTeX_Math-BoldItalic-CZnvNsCZ.woff2) format("woff2"),url(/assets/KaTeX_Math-BoldItalic-iY-2wyZ7.woff) format("woff"),url(/assets/KaTeX_Math-BoldItalic-B3XSjfu4.ttf) format("truetype");font-weight:700;font-style:italic}@font-face{font-family:KaTeX_Math;src:url(/assets/KaTeX_Math-Italic-t53AETM-.woff2) format("woff2"),url(/assets/KaTeX_Math-Italic-DA0__PXp.woff) format("woff"),url(/assets/KaTeX_Math-Italic-flOr_0UB.ttf) format("truetype");font-weight:400;font-style:italic}@font-face{font-family:KaTeX_SansSerif;src:url(/assets/KaTeX_SansSerif-Bold-D1sUS0GD.woff2) format("woff2"),url(/assets/KaTeX_SansSerif-Bold-DbIhKOiC.woff) format("woff"),url(/assets/KaTeX_SansSerif-Bold-CFMepnvq.ttf) format("truetype");font-weight:700;font-style:normal}@font-face{font-family:KaTeX_SansSerif;src:url(/assets/KaTeX_SansSerif-Italic-C3H0VqGB.woff2) format("woff2"),url(/assets/KaTeX_SansSerif-Italic-DN2j7dab.woff) format("woff"),url(/assets/KaTeX_SansSerif-Italic-YYjJ1zSn.ttf) format("truetype");font-weight:400;font-style:italic}@font-face{font-family:KaTeX_SansSerif;src:url(/assets/KaTeX_SansSerif-Regular-DDBCnlJ7.woff2) format("woff2"),url(/assets/KaTeX_SansSerif-Regular-CS6fqUqJ.woff) format("woff"),url(/assets/KaTeX_SansSerif-Regular-BNo7hRIc.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Script;src:url(/assets/KaTeX_Script-Regular-D3wIWfF6.woff2) format("woff2"),url(/assets/KaTeX_Script-Regular-D5yQViql.woff) format("woff"),url(/assets/KaTeX_Script-Regular-C5JkGWo-.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Size1;src:url(/assets/KaTeX_Size1-Regular-mCD8mA8B.woff2) format("woff2"),url(/assets/KaTeX_Size1-Regular-C195tn64.woff) format("woff"),url(/assets/KaTeX_Size1-Regular-Dbsnue_I.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Size2;src:url(/assets/KaTeX_Size2-Regular-Dy4dx90m.woff2) format("woff2"),url(/assets/KaTeX_Size2-Regular-oD1tc_U0.woff) format("woff"),url(/assets/KaTeX_Size2-Regular-B7gKUWhC.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Size3;src:url(data:font/woff2;base64,d09GMgABAAAAAA4oAA4AAAAAHbQAAA3TAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAAgRQIDgmcDBEICo1oijYBNgIkA14LMgAEIAWJAAeBHAyBHBvbGiMRdnO0IkRRkiYDgr9KsJ1NUAf2kILNxgUmgqIgq1P89vcbIcmsQbRps3vCcXdYOKSWEPEKgZgQkprQQsxIXUgq0DqpGKmIvrgkeVGtEQD9DzAO29fM9jYhxZEsL2FeURH2JN4MIcTdO049NCVdxQ/w9NrSYFEBKTDKpLKfNkCGDc1RwjZLQcm3vqJ2UW9Xfa3tgAHz6ivp6vgC2yD4/6352ndnN0X0TL7seypkjZlMsjmZnf0Mm5Q+JykRWQBKCVCVPbARPXWyQtb5VgLB6Biq7/Uixcj2WGqdI8tGSgkuRG+t910GKP2D7AQH0DB9FMDW/obJZ8giFI3Wg8Cvevz0M+5m0rTh7XDBlvo9Y4vm13EXmfttwI4mBo1EG15fxJhUiCLbiiyCf/ZA6MFAhg3pGIZGdGIVjtPn6UcMk9A/UUr9PhoNsCENw1APAq0gpH73e+M+0ueyHbabc3vkbcdtzcf/fiy+NxQEjf9ud/ELBHAXJ0nk4z+MXH2Ev/kWyV4k7SkvpPc9Qr38F6RPWnM9cN6DJ0AdD1BhtgABtmoRoFCvPsBAumNm6soZG2Gk5GyVTo2sJncSyp0jQTYoR6WDvTwaaEcHsxHfvuWhHA3a6bN7twRKtcGok6NsCi7jYRrM2jExsUFMxMQYuJbMhuWNOumEJy9hi29Dmg5zMp/A5+hhPG19j1vBrq8JTLr8ki5VLPmG/PynJHVul440bxg5xuymHUFPBshC+nA9I1FmwbRBTNHAcik3Oae0cxKoI3MOriM42UrPe51nsaGxJ+WfXubAsP84aabUlQSJ1IiE0iPETLUU4CATgfXSCSpuRFRmCGbO+wSpAnzaeaCYW1VNEysRtuXCEL1kUFUbbtMv3Tilt/1c11jt3Q5bbMa84cpWipp8Elw3MZhOHsOlwwVUQM3lAR35JiFQbaYCRnMF2lxAWoOg2gyoIV4PouX8HytNIfLhqpJtXB4vjiViUI8IJ7bkC4ikkQvKksnOTKICwnqWSZ9YS5f0WCxmpgjbIq7EJcM4aI2nmhLNY2JIUgOjXZFWBHb+x5oh6cwb0Tv1ackHdKi0I9OO2wE9aogIOn540CCCziyhN+IaejtgAONKznHlHyutPrHGwCx9S6B8kfS4Mfi4Eyv7OU730bT1SCBjt834cXsf43zVjPUqqJjgrjeGnBxSG4aYAKFuVbeCfkDIjAqMb6yLNIbCuvXhMH2/+k2vkNpkORhR59N1CkzoOENvneIosjYmuTxlhUzaGEJQ/iWqx4dmwpmKjrwTiTGTCVozNAYqk/zXOndWxuWSmJkQpJw3pK5KX6QrLt5LATMqpmPAQhkhK6PUjzHUn7E0gHE0kPE0iKkolgkUx9SZmVAdDgpffdyJKg3k7VmzYGCwVXGz/tXmkOIp+vcWs+EMuhhvN0h9uhfzWJziBQmCREGSIFmQIkgVpAnSBRmC//6hkLZwaVhwxlrJSOdqlFtOYxlau9F2QN5Y98xmIAsiM1HVp2VFX+DHHGg6Ecjh3vmqtidX3qHI2qycTk/iwxSt5UzTmEP92ZBnEWTk4Mx8Mpl78ZDokxg/KWb+Q0QkvdKVmq3TMW+RXEgrsziSAfNXFMhDc60N5N9jQzjfO0kBKpUZl0ZmwJ41j/B9Hz6wmRaJB84niNmQrzp9eSlQCDDzazGDdVi3P36VZQ+Jy4f9UBNp+3zTjqI4abaFAm+GShVaXlsGdF3FYzZcDI6cori4kMxUECl9IjJZpzkvitAoxKue+90pDMvcKRxLl53TmOKCmV/xRolNKSqqUxc6LStOETmFOiLZZptlZepcKiAzteG8PEdpnQpbOMNcMsR4RR2Bs0cKFEvSmIjAFcnarqwUL4lDhHmnVkwu1IwshbiCcgvOheZuYyOteufZZwlcTlLgnZ3o/WcYdzZHW/WGaqaVfmTZ1aWCceJjkbZqsfbkOtcFlUZM/jy+hXHDbaUobWqqXaeWobbLO99yG5N3U4wxco0rQGGcOLASFMXeJoham8M+/x6O2WywK2l4HGbq1CoUyC/IZikQhdq3SiuNrvAEj0AVu9x2x3lp/xWzahaxidezFVtdcb5uEnzyl0ZmYiuKI0exvCd4Xc9CV1KB0db00z92wDPde0kukbvZIWN6jUWFTmPIC/Y4UPCm8UfDTFZpZNon1qLFTkBhxzB+FjQRA2Q/YRJT8pQigslMaUpFyAG8TMlXigiqmAZX4xgijKjRlGpLE0GdplRfCaJo0JQaSxNBk6ZmMzcya0FmrcisDdn0Q3HI2sWSppYigmlM1XT/kLQZSNpMJG0WkjYbSZuDpM1F0uYhFc1HxU4m1QJjDK6iL0S5uSj5rgXc3RejEigtcRBtqYPQsiTskmO5vosV+q4VGIKbOkDg0jtRrq+Em1YloaTFar3EGr1EUC8R0kus1Uus00usL97ABr2BjXoDm/QGNhuWtMVBKOwg/i78lT7hBsAvDmwHc/ao3vmUbBmhjeYySZNWvGkfZAgISDSaDo1SVpzGDsAEkF8B+gEapViUoZgUWXcRIGFZNm6gWbAKk0bp0k1MHG9fLYtV4iS2SmLEQFARzRcnf9PUS0LVn05/J9MiRRBU3v2IrvW974v4N00L7ZMk0wXP1409CHo/an8zTRHD3eSJ6m8D4YMkZNl3M79sqeuAsr/m3f+8/yl7A50aiAEJgeBeMWzu7ui9UfUBCe2TIqZIoOd/3/udRBOQidQZUERzb2/VwZN1H/Sju82ew2H2Wfr6qvfVf3hqwDvAIpkQVFy4B9Pe9e4/XvPeceu7h3dvO56iJPf0+A6cqA2ip18ER+iFgggiuOkvj24bby0N9j2UHIkgqIt+sVgfodC4YghLSMjSZbH0VR/6dMDrYJeKHilKTemt6v6kvzvn3/RrdWtr0GoN/xL+Sex/cPYLUpepx9cz/D46UPU5KXgAQa+NDps1v6J3xP1i2HtaDB0M9aX2deA7SYff//+gUCovMmIK/qfsFcOk+4Y5ZN97XlG6zebqtMbKgeRFi51vnxTQYBUik2rS/Cn6PC8ADR8FGxsRPB82dzfND90gIcshOcYUkfjherBz53odpm6TP8txlwOZ71xmfHHOvq053qFF/MRlS3jP0ELudrf2OeN8DHvp6ZceLe8qKYvWz/7yp0u4dKPfli3CYq0O13Ih71mylJ80tOi10On8wi+F4+LWgDPeJ30msSQt9/vkmHq9/Lvo2b461mP801v3W4xTcs6CbvF9UDdrSt+A8OUbpSh55qAUFXWznBBfdeJ8a4d7ugT5tvxUza3h9m4H7ptTqiG4z0g5dc0X29OcGlhpGFMpQo9ytTS+NViZpNdvU4kWx+LKxNY10kQ1yqGXrhe4/1nvP7E+nd5A92TtaRplbHSqoIdOqtRWti+fkB5/n1+/VvCmz12pG1kpQWsfi1ftlBobm0bpngs16CHkbIwdLnParxtTV3QYRlfJ0KFskH7pdN/YDn+yRuSd7sNH3aO0DYPggk6uWuXrfOc+fa3VTxFVvKaNxHsiHmsXyCLIE5yuOeN3/Jdf8HBL/5M6shjyhxHx9BjB1O0+4NLOnjLLSxwO7ukN4jMbOIcD879KLSi6Pk61Oqm2377n8079PXEEQ7cy7OKEC9nbpet118fxweTafpt69x/Bt8UqGzNQt7aelpc44dn5cqhwf71+qKp/Zf/+a0zcizOUWpl/iBcSXip0pplkatCchoH5c5aUM8I7/dWxAej8WicPL1URFZ9BDJelUwEwTkGqUhgSlydVes95YdXvhh9Gfz/aeFWvgVb4tuLbcv4+wLdutVZv/cUonwBD/6eDlE0aSiKK/uoH3+J1wDE/jMVqY2ysGufN84oIXB0sPzy8ollX/LegY74DgJXJR57sn+VGza0x3DnuIgABFM15LmajjjsNlYj+JEZGbuRYcAMOWxFkPN2w6Wd46xo4gVWQR/X4lyI/R6K/YK0110GzudPRW7Y+UOBGTfNNzHeYT0fiH0taunBpq9HEW8OKSaBGj21L0MqenEmNRWBAWDWAk4CpNoEZJ2tTaPFgbQYj8HxtFilErs3BTRwT8uO1NXQaWfIotchmPkAF5mMBAliEmZiOGVgCG9LgRzpscMAOOwowlT3JhusdazXGSC/hxR3UlmWVwWHpOIKheqONvjyhSiTHIkVUco5bnji8m//zL7PKaT1Vl5I6UE609f+gkr6MZKVyKc7zJRmCahLsdlyA5fdQkRSan9LgnnLEyGSkaKJCJog0wAgvepWBt80+1yKln1bMVtCljfNWDueKLsWwaEbBSfSPTEmVRsUcYYMnEjcjeyCZzBXK9E9BYBXLKjOSpUDR+nEV3TFSUdQaz+ot98QxgXwx0GQ+EEUAKB2qZPkQQ0GqFD8UPFMqyaCHM24BZmSGic9EYMagKizOw9Hz50DMrDLrqqLkTAhplMictiCAx5S3BIUQdeJeLnBy2CNtMfz6cV4u8XKoFZQesbf9YZiIERiHjaNodDW6LgcirX/mPnJIkBGDUpTBhSa0EIr38D5hCIszhCM8URGBqImoWjpvpt1ebu/v3Gl3qJfMnNM+9V+kiRFyROTPHQWOcs1dNW94/ukKMPZBvDi55i5CttdeJz84DLngLqjcdwEZ87bFFR8CIG35OAkDVN6VRDZ7aq67NteYqZ2lpT8oYB2CytoBd6VuAx4WgiAsnuj3WohG+LugzXiQRDeM3XYXlULv4dp5VFYC) format("woff2"),url(/assets/KaTeX_Size3-Regular-CTq5MqoE.woff) format("woff"),url(/assets/KaTeX_Size3-Regular-DgpXs0kz.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Size4;src:url(/assets/KaTeX_Size4-Regular-Dl5lxZxV.woff2) format("woff2"),url(/assets/KaTeX_Size4-Regular-BF-4gkZK.woff) format("woff"),url(/assets/KaTeX_Size4-Regular-DWFBv043.ttf) format("truetype");font-weight:400;font-style:normal}@font-face{font-family:KaTeX_Typewriter;src:url(/assets/KaTeX_Typewriter-Regular-CO6r4hn1.woff2) format("woff2"),url(/assets/KaTeX_Typewriter-Regular-C0xS9mPB.woff) format("woff"),url(/assets/KaTeX_Typewriter-Regular-D3Ib7_Hf.ttf) format("truetype");font-weight:400;font-style:normal}.katex{font: 1.21em KaTeX_Main,Times New Roman,serif;line-height:1.2;text-indent:0;text-rendering:auto}.katex *{-ms-high-contrast-adjust:none!important}.katex *{border-color:currentColor}.katex .katex-version:after{content:"0.16.22"}.katex .katex-mathml{position:absolute;clip:rect(1px,1px,1px,1px);padding:0;border:0;height:1px;width:1px;overflow:hidden}.katex .katex-html>.newline{display:block}.katex .base{position:relative;display:inline-block;white-space:nowrap;width:-webkit-min-content;width:-moz-min-content;width:min-content}.katex .strut{display:inline-block}.katex .textbf{font-weight:700}.katex .textit{font-style:italic}.katex .textrm{font-family:KaTeX_Main}.katex .textsf{font-family:KaTeX_SansSerif}.katex .texttt{font-family:KaTeX_Typewriter}.katex .mathnormal{font-family:KaTeX_Math;font-style:italic}.katex .mathit{font-family:KaTeX_Main;font-style:italic}.katex .mathrm{font-style:normal}.katex .mathbf{font-family:KaTeX_Main;font-weight:700}.katex .boldsymbol{font-family:KaTeX_Math;font-weight:700;font-style:italic}.katex .amsrm,.katex .mathbb,.katex .textbb{font-family:KaTeX_AMS}.katex .mathcal{font-family:KaTeX_Caligraphic}.katex .mathfrak,.katex .textfrak{font-family:KaTeX_Fraktur}.katex .mathboldfrak,.katex .textboldfrak{font-family:KaTeX_Fraktur;font-weight:700}.katex .mathtt{font-family:KaTeX_Typewriter}.katex .mathscr,.katex .textscr{font-family:KaTeX_Script}.katex .mathsf,.katex .textsf{font-family:KaTeX_SansSerif}.katex .mathboldsf,.katex .textboldsf{font-family:KaTeX_SansSerif;font-weight:700}.katex .mathsfit,.katex .mathitsf,.katex .textitsf{font-family:KaTeX_SansSerif;font-style:italic}.katex .mainrm{font-family:KaTeX_Main;font-style:normal}.katex .vlist-t{display:inline-table;table-layout:fixed;border-collapse:collapse}.katex .vlist-r{display:table-row}.katex .vlist{display:table-cell;vertical-align:bottom;position:relative}.katex .vlist>span{display:block;height:0;position:relative}.katex .vlist>span>span{display:inline-block}.katex .vlist>span>.pstrut{overflow:hidden;width:0}.katex .vlist-t2{margin-right:-2px}.katex .vlist-s{display:table-cell;vertical-align:bottom;font-size:1px;width:2px;min-width:2px}.katex .vbox{display:inline-flex;flex-direction:column;align-items:baseline}.katex .hbox{display:inline-flex;flex-direction:row;width:100%}.katex .thinbox{display:inline-flex;flex-direction:row;width:0;max-width:0}.katex .msupsub{text-align:left}.katex .mfrac>span>span{text-align:center}.katex .mfrac .frac-line{display:inline-block;width:100%;border-bottom-style:solid}.katex .mfrac .frac-line,.katex .overline .overline-line,.katex .underline .underline-line,.katex .hline,.katex .hdashline,.katex .rule{min-height:1px}.katex .mspace{display:inline-block}.katex .llap,.katex .rlap,.katex .clap{width:0;position:relative}.katex .llap>.inner,.katex .rlap>.inner,.katex .clap>.inner{position:absolute}.katex .llap>.fix,.katex .rlap>.fix,.katex .clap>.fix{display:inline-block}.katex .llap>.inner{right:0}.katex .rlap>.inner,.katex .clap>.inner{left:0}.katex .clap>.inner>span{margin-left:-50%;margin-right:50%}.katex .rule{display:inline-block;border:solid 0;position:relative}.katex .overline .overline-line,.katex .underline .underline-line,.katex .hline{display:inline-block;width:100%;border-bottom-style:solid}.katex .hdashline{display:inline-block;width:100%;border-bottom-style:dashed}.katex .sqrt>.root{margin-left:.2777777778em;margin-right:-.5555555556em}.katex .sizing.reset-size1.size1,.katex .fontsize-ensurer.reset-size1.size1{font-size:1em}.katex .sizing.reset-size1.size2,.katex .fontsize-ensurer.reset-size1.size2{font-size:1.2em}.katex .sizing.reset-size1.size3,.katex .fontsize-ensurer.reset-size1.size3{font-size:1.4em}.katex .sizing.reset-size1.size4,.katex .fontsize-ensurer.reset-size1.size4{font-size:1.6em}.katex .sizing.reset-size1.size5,.katex .fontsize-ensurer.reset-size1.size5{font-size:1.8em}.katex .sizing.reset-size1.size6,.katex .fontsize-ensurer.reset-size1.size6{font-size:2em}.katex .sizing.reset-size1.size7,.katex .fontsize-ensurer.reset-size1.size7{font-size:2.4em}.katex .sizing.reset-size1.size8,.katex .fontsize-ensurer.reset-size1.size8{font-size:2.88em}.katex .sizing.reset-size1.size9,.katex .fontsize-ensurer.reset-size1.size9{font-size:3.456em}.katex .sizing.reset-size1.size10,.katex .fontsize-ensurer.reset-size1.size10{font-size:4.148em}.katex .sizing.reset-size1.size11,.katex .fontsize-ensurer.reset-size1.size11{font-size:4.976em}.katex .sizing.reset-size2.size1,.katex .fontsize-ensurer.reset-size2.size1{font-size:.8333333333em}.katex .sizing.reset-size2.size2,.katex .fontsize-ensurer.reset-size2.size2{font-size:1em}.katex .sizing.reset-size2.size3,.katex .fontsize-ensurer.reset-size2.size3{font-size:1.1666666667em}.katex .sizing.reset-size2.size4,.katex .fontsize-ensurer.reset-size2.size4{font-size:1.3333333333em}.katex .sizing.reset-size2.size5,.katex .fontsize-ensurer.reset-size2.size5{font-size:1.5em}.katex .sizing.reset-size2.size6,.katex .fontsize-ensurer.reset-size2.size6{font-size:1.6666666667em}.katex .sizing.reset-size2.size7,.katex .fontsize-ensurer.reset-size2.size7{font-size:2em}.katex .sizing.reset-size2.size8,.katex .fontsize-ensurer.reset-size2.size8{font-size:2.4em}.katex .sizing.reset-size2.size9,.katex .fontsize-ensurer.reset-size2.size9{font-size:2.88em}.katex .sizing.reset-size2.size10,.katex .fontsize-ensurer.reset-size2.size10{font-size:3.4566666667em}.katex .sizing.reset-size2.size11,.katex .fontsize-ensurer.reset-size2.size11{font-size:4.1466666667em}.katex .sizing.reset-size3.size1,.katex .fontsize-ensurer.reset-size3.size1{font-size:.7142857143em}.katex .sizing.reset-size3.size2,.katex .fontsize-ensurer.reset-size3.size2{font-size:.8571428571em}.katex .sizing.reset-size3.size3,.katex .fontsize-ensurer.reset-size3.size3{font-size:1em}.katex .sizing.reset-size3.size4,.katex .fontsize-ensurer.reset-size3.size4{font-size:1.1428571429em}.katex .sizing.reset-size3.size5,.katex .fontsize-ensurer.reset-size3.size5{font-size:1.2857142857em}.katex .sizing.reset-size3.size6,.katex .fontsize-ensurer.reset-size3.size6{font-size:1.4285714286em}.katex .sizing.reset-size3.size7,.katex .fontsize-ensurer.reset-size3.size7{font-size:1.7142857143em}.katex .sizing.reset-size3.size8,.katex .fontsize-ensurer.reset-size3.size8{font-size:2.0571428571em}.katex .sizing.reset-size3.size9,.katex .fontsize-ensurer.reset-size3.size9{font-size:2.4685714286em}.katex .sizing.reset-size3.size10,.katex .fontsize-ensurer.reset-size3.size10{font-size:2.9628571429em}.katex .sizing.reset-size3.size11,.katex .fontsize-ensurer.reset-size3.size11{font-size:3.5542857143em}.katex .sizing.reset-size4.size1,.katex .fontsize-ensurer.reset-size4.size1{font-size:.625em}.katex .sizing.reset-size4.size2,.katex .fontsize-ensurer.reset-size4.size2{font-size:.75em}.katex .sizing.reset-size4.size3,.katex .fontsize-ensurer.reset-size4.size3{font-size:.875em}.katex .sizing.reset-size4.size4,.katex .fontsize-ensurer.reset-size4.size4{font-size:1em}.katex .sizing.reset-size4.size5,.katex .fontsize-ensurer.reset-size4.size5{font-size:1.125em}.katex .sizing.reset-size4.size6,.katex .fontsize-ensurer.reset-size4.size6{font-size:1.25em}.katex .sizing.reset-size4.size7,.katex .fontsize-ensurer.reset-size4.size7{font-size:1.5em}.katex .sizing.reset-size4.size8,.katex .fontsize-ensurer.reset-size4.size8{font-size:1.8em}.katex .sizing.reset-size4.size9,.katex .fontsize-ensurer.reset-size4.size9{font-size:2.16em}.katex .sizing.reset-size4.size10,.katex .fontsize-ensurer.reset-size4.size10{font-size:2.5925em}.katex .sizing.reset-size4.size11,.katex .fontsize-ensurer.reset-size4.size11{font-size:3.11em}.katex .sizing.reset-size5.size1,.katex .fontsize-ensurer.reset-size5.size1{font-size:.5555555556em}.katex .sizing.reset-size5.size2,.katex .fontsize-ensurer.reset-size5.size2{font-size:.6666666667em}.katex .sizing.reset-size5.size3,.katex .fontsize-ensurer.reset-size5.size3{font-size:.7777777778em}.katex .sizing.reset-size5.size4,.katex .fontsize-ensurer.reset-size5.size4{font-size:.8888888889em}.katex .sizing.reset-size5.size5,.katex .fontsize-ensurer.reset-size5.size5{font-size:1em}.katex .sizing.reset-size5.size6,.katex .fontsize-ensurer.reset-size5.size6{font-size:1.1111111111em}.katex .sizing.reset-size5.size7,.katex .fontsize-ensurer.reset-size5.size7{font-size:1.3333333333em}.katex .sizing.reset-size5.size8,.katex .fontsize-ensurer.reset-size5.size8{font-size:1.6em}.katex .sizing.reset-size5.size9,.katex .fontsize-ensurer.reset-size5.size9{font-size:1.92em}.katex .sizing.reset-size5.size10,.katex .fontsize-ensurer.reset-size5.size10{font-size:2.3044444444em}.katex .sizing.reset-size5.size11,.katex .fontsize-ensurer.reset-size5.size11{font-size:2.7644444444em}.katex .sizing.reset-size6.size1,.katex .fontsize-ensurer.reset-size6.size1{font-size:.5em}.katex .sizing.reset-size6.size2,.katex .fontsize-ensurer.reset-size6.size2{font-size:.6em}.katex .sizing.reset-size6.size3,.katex .fontsize-ensurer.reset-size6.size3{font-size:.7em}.katex .sizing.reset-size6.size4,.katex .fontsize-ensurer.reset-size6.size4{font-size:.8em}.katex .sizing.reset-size6.size5,.katex .fontsize-ensurer.reset-size6.size5{font-size:.9em}.katex .sizing.reset-size6.size6,.katex .fontsize-ensurer.reset-size6.size6{font-size:1em}.katex .sizing.reset-size6.size7,.katex .fontsize-ensurer.reset-size6.size7{font-size:1.2em}.katex .sizing.reset-size6.size8,.katex .fontsize-ensurer.reset-size6.size8{font-size:1.44em}.katex .sizing.reset-size6.size9,.katex .fontsize-ensurer.reset-size6.size9{font-size:1.728em}.katex .sizing.reset-size6.size10,.katex .fontsize-ensurer.reset-size6.size10{font-size:2.074em}.katex .sizing.reset-size6.size11,.katex .fontsize-ensurer.reset-size6.size11{font-size:2.488em}.katex .sizing.reset-size7.size1,.katex .fontsize-ensurer.reset-size7.size1{font-size:.4166666667em}.katex .sizing.reset-size7.size2,.katex .fontsize-ensurer.reset-size7.size2{font-size:.5em}.katex .sizing.reset-size7.size3,.katex .fontsize-ensurer.reset-size7.size3{font-size:.5833333333em}.katex .sizing.reset-size7.size4,.katex .fontsize-ensurer.reset-size7.size4{font-size:.6666666667em}.katex .sizing.reset-size7.size5,.katex .fontsize-ensurer.reset-size7.size5{font-size:.75em}.katex .sizing.reset-size7.size6,.katex .fontsize-ensurer.reset-size7.size6{font-size:.8333333333em}.katex .sizing.reset-size7.size7,.katex .fontsize-ensurer.reset-size7.size7{font-size:1em}.katex .sizing.reset-size7.size8,.katex .fontsize-ensurer.reset-size7.size8{font-size:1.2em}.katex .sizing.reset-size7.size9,.katex .fontsize-ensurer.reset-size7.size9{font-size:1.44em}.katex .sizing.reset-size7.size10,.katex .fontsize-ensurer.reset-size7.size10{font-size:1.7283333333em}.katex .sizing.reset-size7.size11,.katex .fontsize-ensurer.reset-size7.size11{font-size:2.0733333333em}.katex .sizing.reset-size8.size1,.katex .fontsize-ensurer.reset-size8.size1{font-size:.3472222222em}.katex .sizing.reset-size8.size2,.katex .fontsize-ensurer.reset-size8.size2{font-size:.4166666667em}.katex .sizing.reset-size8.size3,.katex .fontsize-ensurer.reset-size8.size3{font-size:.4861111111em}.katex .sizing.reset-size8.size4,.katex .fontsize-ensurer.reset-size8.size4{font-size:.5555555556em}.katex .sizing.reset-size8.size5,.katex .fontsize-ensurer.reset-size8.size5{font-size:.625em}.katex .sizing.reset-size8.size6,.katex .fontsize-ensurer.reset-size8.size6{font-size:.6944444444em}.katex .sizing.reset-size8.size7,.katex .fontsize-ensurer.reset-size8.size7{font-size:.8333333333em}.katex .sizing.reset-size8.size8,.katex .fontsize-ensurer.reset-size8.size8{font-size:1em}.katex .sizing.reset-size8.size9,.katex .fontsize-ensurer.reset-size8.size9{font-size:1.2em}.katex .sizing.reset-size8.size10,.katex .fontsize-ensurer.reset-size8.size10{font-size:1.4402777778em}.katex .sizing.reset-size8.size11,.katex .fontsize-ensurer.reset-size8.size11{font-size:1.7277777778em}.katex .sizing.reset-size9.size1,.katex .fontsize-ensurer.reset-size9.size1{font-size:.2893518519em}.katex .sizing.reset-size9.size2,.katex .fontsize-ensurer.reset-size9.size2{font-size:.3472222222em}.katex .sizing.reset-size9.size3,.katex .fontsize-ensurer.reset-size9.size3{font-size:.4050925926em}.katex .sizing.reset-size9.size4,.katex .fontsize-ensurer.reset-size9.size4{font-size:.462962963em}.katex .sizing.reset-size9.size5,.katex .fontsize-ensurer.reset-size9.size5{font-size:.5208333333em}.katex .sizing.reset-size9.size6,.katex .fontsize-ensurer.reset-size9.size6{font-size:.5787037037em}.katex .sizing.reset-size9.size7,.katex .fontsize-ensurer.reset-size9.size7{font-size:.6944444444em}.katex .sizing.reset-size9.size8,.katex .fontsize-ensurer.reset-size9.size8{font-size:.8333333333em}.katex .sizing.reset-size9.size9,.katex .fontsize-ensurer.reset-size9.size9{font-size:1em}.katex .sizing.reset-size9.size10,.katex .fontsize-ensurer.reset-size9.size10{font-size:1.2002314815em}.katex .sizing.reset-size9.size11,.katex .fontsize-ensurer.reset-size9.size11{font-size:1.4398148148em}.katex .sizing.reset-size10.size1,.katex .fontsize-ensurer.reset-size10.size1{font-size:.2410800386em}.katex .sizing.reset-size10.size2,.katex .fontsize-ensurer.reset-size10.size2{font-size:.2892960463em}.katex .sizing.reset-size10.size3,.katex .fontsize-ensurer.reset-size10.size3{font-size:.337512054em}.katex .sizing.reset-size10.size4,.katex .fontsize-ensurer.reset-size10.size4{font-size:.3857280617em}.katex .sizing.reset-size10.size5,.katex .fontsize-ensurer.reset-size10.size5{font-size:.4339440694em}.katex .sizing.reset-size10.size6,.katex .fontsize-ensurer.reset-size10.size6{font-size:.4821600771em}.katex .sizing.reset-size10.size7,.katex .fontsize-ensurer.reset-size10.size7{font-size:.5785920926em}.katex .sizing.reset-size10.size8,.katex .fontsize-ensurer.reset-size10.size8{font-size:.6943105111em}.katex .sizing.reset-size10.size9,.katex .fontsize-ensurer.reset-size10.size9{font-size:.8331726133em}.katex .sizing.reset-size10.size10,.katex .fontsize-ensurer.reset-size10.size10{font-size:1em}.katex .sizing.reset-size10.size11,.katex .fontsize-ensurer.reset-size10.size11{font-size:1.1996142719em}.katex .sizing.reset-size11.size1,.katex .fontsize-ensurer.reset-size11.size1{font-size:.2009646302em}.katex .sizing.reset-size11.size2,.katex .fontsize-ensurer.reset-size11.size2{font-size:.2411575563em}.katex .sizing.reset-size11.size3,.katex .fontsize-ensurer.reset-size11.size3{font-size:.2813504823em}.katex .sizing.reset-size11.size4,.katex .fontsize-ensurer.reset-size11.size4{font-size:.3215434084em}.katex .sizing.reset-size11.size5,.katex .fontsize-ensurer.reset-size11.size5{font-size:.3617363344em}.katex .sizing.reset-size11.size6,.katex .fontsize-ensurer.reset-size11.size6{font-size:.4019292605em}.katex .sizing.reset-size11.size7,.katex .fontsize-ensurer.reset-size11.size7{font-size:.4823151125em}.katex .sizing.reset-size11.size8,.katex .fontsize-ensurer.reset-size11.size8{font-size:.578778135em}.katex .sizing.reset-size11.size9,.katex .fontsize-ensurer.reset-size11.size9{font-size:.6945337621em}.katex .sizing.reset-size11.size10,.katex .fontsize-ensurer.reset-size11.size10{font-size:.8336012862em}.katex .sizing.reset-size11.size11,.katex .fontsize-ensurer.reset-size11.size11{font-size:1em}.katex .delimsizing.size1{font-family:KaTeX_Size1}.katex .delimsizing.size2{font-family:KaTeX_Size2}.katex .delimsizing.size3{font-family:KaTeX_Size3}.katex .delimsizing.size4{font-family:KaTeX_Size4}.katex .delimsizing.mult .delim-size1>span{font-family:KaTeX_Size1}.katex .delimsizing.mult .delim-size4>span{font-family:KaTeX_Size4}.katex .nulldelimiter{display:inline-block;width:.12em}.katex .delimcenter,.katex .op-symbol{position:relative}.katex .op-symbol.small-op{font-family:KaTeX_Size1}.katex .op-symbol.large-op{font-family:KaTeX_Size2}.katex .op-limits>.vlist-t{text-align:center}.katex .accent>.vlist-t{text-align:center}.katex .accent .accent-body{position:relative}.katex .accent .accent-body:not(.accent-full){width:0}.katex .overlay{display:block}.katex .mtable .vertical-separator{display:inline-block;min-width:1px}.katex .mtable .arraycolsep{display:inline-block}.katex .mtable .col-align-c>.vlist-t{text-align:center}.katex .mtable .col-align-l>.vlist-t{text-align:left}.katex .mtable .col-align-r>.vlist-t{text-align:right}.katex .svg-align{text-align:left}.katex svg{display:block;position:absolute;width:100%;height:inherit;fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1}.katex svg path{stroke:none}.katex img{border-style:none;min-width:0;min-height:0;max-width:none;max-height:none}.katex .stretchy{width:100%;display:block;position:relative;overflow:hidden}.katex .stretchy:before,.katex .stretchy:after{content:""}.katex .hide-tail{width:100%;position:relative;overflow:hidden}.katex .halfarrow-left{position:absolute;left:0;width:50.2%;overflow:hidden}.katex .halfarrow-right{position:absolute;right:0;width:50.2%;overflow:hidden}.katex .brace-left{position:absolute;left:0;width:25.1%;overflow:hidden}.katex .brace-center{position:absolute;left:25%;width:50%;overflow:hidden}.katex .brace-right{position:absolute;right:0;width:25.1%;overflow:hidden}.katex .x-arrow-pad{padding:0 .5em}.katex .cd-arrow-pad{padding:0 .55556em 0 .27778em}.katex .x-arrow,.katex .mover,.katex .munder{text-align:center}.katex .boxpad{padding:0 .3em}.katex .fbox,.katex .fcolorbox{box-sizing:border-box;border:.04em solid}.katex .cancel-pad{padding:0 .2em}.katex .cancel-lap{margin-left:-.2em;margin-right:-.2em}.katex .sout{border-bottom-style:solid;border-bottom-width:.08em}.katex .angl{box-sizing:border-box;border-top:.049em solid;border-right:.049em solid;margin-right:.03889em}.katex .anglpad{padding:0 .03889em}.katex .eqn-num:before{counter-increment:katexEqnNo;content:"(" counter(katexEqnNo) ")"}.katex .mml-eqn-num:before{counter-increment:mmlEqnNo;content:"(" counter(mmlEqnNo) ")"}.katex .mtr-glue{width:50%}.katex .cd-vert-arrow{display:inline-block;position:relative}.katex .cd-label-left{display:inline-block;position:absolute;right:calc(50% + .3em);text-align:left}.katex .cd-label-right{display:inline-block;position:absolute;left:calc(50% + .3em);text-align:right}.katex-display{display:block;margin:1em 0;text-align:center}.katex-display>.katex{display:block;text-align:center;white-space:nowrap}.katex-display>.katex>.katex-html{display:block;position:relative}.katex-display>.katex>.katex-html>.tag{position:absolute;right:0}.katex-display.leqno>.katex>.katex-html>.tag{left:0;right:auto}.katex-display.fleqn>.katex{text-align:left;padding-left:2em}body{counter-reset:katexEqnNo mmlEqnNo}\n/*$vite$:1*/',document.head.appendChild(e);var t=function(e,t,n){for(var i=n,r=0,a=e.length;i<t.length;){var s=t[i];if(r<=0&&t.slice(i,i+a)===e)return i;"\\"===s?i++:"{"===s?r++:"}"===s&&r--,i++}return-1},r=/^\\begin{/,a=function(e,i){var a=function(e,n){for(var i,a=[],s=new RegExp("("+n.map((e=>e.left.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"))).join("|")+")");-1!==(i=e.search(s));){i>0&&(a.push({type:"text",data:e.slice(0,i)}),e=e.slice(i));var o=n.findIndex((t=>e.startsWith(t.left)));if(-1===(i=t(n[o].right,e,n[o].left.length)))break;var l=e.slice(0,i+n[o].right.length),c=r.test(l)?l:e.slice(n[o].left.length,i);a.push({type:"math",data:c,rawData:l,display:n[o].display}),e=e.slice(i+n[o].right.length)}return""!==e&&a.push({type:"text",data:e}),a}(e,i.delimiters);if(1===a.length&&"text"===a[0].type)return null;for(var s=document.createDocumentFragment(),o=0;o<a.length;o++)if("text"===a[o].type)s.appendChild(document.createTextNode(a[o].data));else{var l=document.createElement("span"),c=a[o].data;i.displayMode=a[o].display;try{i.preProcess&&(c=i.preProcess(c)),n.render(c,l,i)}catch(d){if(!(d instanceof n.ParseError))throw d;i.errorCallback("KaTeX auto-render: Failed to parse `"+a[o].data+"` with ",d),s.appendChild(document.createTextNode(a[o].rawData));continue}s.appendChild(l)}return s},s=function e(t,n){for(var i=0;i<t.childNodes.length;i++){var r=t.childNodes[i];if(3===r.nodeType){for(var s=r.textContent,o=r.nextSibling,l=0;o&&o.nodeType===Node.TEXT_NODE;)s+=o.textContent,o=o.nextSibling,l++;var c=a(s,n);if(c){for(var d=0;d<l;d++)r.nextSibling.remove();i+=c.childNodes.length-1,t.replaceChild(c,r)}else i+=l}else 1===r.nodeType&&function(){var t=" "+r.className+" ";-1===n.ignoredTags.indexOf(r.nodeName.toLowerCase())&&n.ignoredClasses.every((e=>-1===t.indexOf(" "+e+" ")))&&e(r,n)}()}},o=function(e,t){if(!e)throw new Error("No element provided to render");var n={};for(var i in t)t.hasOwnProperty(i)&&(n[i]=t[i]);n.delimiters=n.delimiters||[{left:"$$",right:"$$",display:!0},{left:"\\(",right:"\\)",display:!1},{left:"\\begin{equation}",right:"\\end{equation}",display:!0},{left:"\\begin{align}",right:"\\end{align}",display:!0},{left:"\\begin{alignat}",right:"\\end{alignat}",display:!0},{left:"\\begin{gather}",right:"\\end{gather}",display:!0},{left:"\\begin{CD}",right:"\\end{CD}",display:!0},{left:"\\[",right:"\\]",display:!0}],n.ignoredTags=n.ignoredTags||["script","noscript","style","textarea","pre","code","option"],n.ignoredClasses=n.ignoredClasses||[],n.errorCallback=n.errorCallback||console.error,n.macros=n.macros||{},s(e,n)};const l={POSITIVE:"#ff4757",NEGATIVE:"#3742fa",NEUTRAL:"#747d8c",INPUT:"#ffd700",UPLOADED:"#ffd700"},c={PULSE_SPEED:.05,FLOAT_SPEED_Y:2,FLOAT_SPEED_X:1.5,FLOAT_AMPLITUDE_Y:5,FLOAT_AMPLITUDE_X:3,FORCE_PULSE_SPEED:3},d=20,h=60;class u{constructor(e,t){this.svg=e,this.framework=t,this.d3=window.d3,this.lastRenderState=null,this.framework.eventBus.on("analysisCompleted",(e=>{this.handleAnalysisResults(e)})),this.framework.eventBus.on("stateChanged",(e=>{if(e&&"vectorSelected"===e.reason&&this.framework.modules.periodicTableVisualization){const e=this.framework.getState().selectedVectorId;null!==e&&this.framework.modules.periodicTableVisualization.highlightElement(e)}}))}handleAnalysisResults(e){if("kmeans"===e.type){const t=this.d3.scaleOrdinal(this.d3.schemeCategory10);this.svg.selectAll(".vector-atom").each((function(n,i){const r=e.data.assignments[i];d3.select(this).select("circle").style("fill",t(r))}))}else if("pca"===e.type||"tsne"===e.type){const t=e.data;this.framework.getState();const n=this.framework.getConfig(),i=this.d3.extent(t,(e=>e[0])),r=this.d3.extent(t,(e=>e[1])),a=this.d3.scaleLinear().domain(i).range([50,n.width-50]),s=this.d3.scaleLinear().domain(r).range([50,n.height-50]);this.svg.selectAll(".vector-atom").each((function(e,n){e.x=a(t[n][0]),e.y=s(t[n][1])})).transition().duration(750).attr("transform",(e=>`translate(${e.x}, ${e.y})`))}}render(e=!1){const t=this.framework.getState(),n=this.framework.getConfig();(e||this.needsFullRender(t,n))&&(this.svg.selectAll("*").remove(),this.renderBackgroundParticles(),this.renderVectors(),this.lastRenderState=this.getStateSnapshot(t,n)),this.updateForces(),this.updateVectorSelection(),this.updateInputVector()}needsFullRender(e,t){if(!this.lastRenderState)return!0;const n=this.getStateSnapshot(e,t);return n.vectorCount!==this.lastRenderState.vectorCount||n.dimensions!==this.lastRenderState.dimensions||n.width!==this.lastRenderState.width||n.height!==this.lastRenderState.height||JSON.stringify(n.vectorIds)!==JSON.stringify(this.lastRenderState.vectorIds)}getStateSnapshot(e,t){return{vectorCount:e.vectors.length,dimensions:t.dimensions,width:t.width,height:t.height,vectorIds:e.vectors.map((e=>e.id)),hasInputVector:!!e.inputVector}}renderBackgroundParticles(){const e=this.framework.getConfig(),t=this.d3.range(30).map((()=>({x:Math.random()*e.width,y:Math.random()*e.height,r:2*Math.random()+1})));this.svg.selectAll(".bg-particle").data(t).enter().append("circle").attr("class","bg-particle").attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("r",(e=>e.r)).attr("fill","rgba(255,255,255,0.1)").attr("opacity",.3)}updateForces(){const e=this.framework.getConfig();this.svg.selectAll(".force-line").remove(),e.showForces&&this.renderForces()}renderForces(){const e=this.framework.getState(),t=this.framework.getModules().forceCalculator,n=this.framework.getConfig(),i=[];for(let a=0;a<e.vectors.length;a++)for(let r=a+1;r<e.vectors.length;r++){const s=e.vectors[a],o=e.vectors[r],l=t.resonanceForce(s,o),c=Math.abs(t.cosineSimilarity(s,o)),d=Math.abs(t.correlation(s,o)),h=1/(1+t.euclideanDistance(s,o)),u=1/(1+this.calculateManhattanDistance(s,o)),p=t.quantumEntanglement?t.quantumEntanglement(s,o):Math.abs(d);let m=l,f="resonance";if(n.forceType)switch(n.forceType){case"cosine":m=c,f="cosine";break;case"correlation":m=d,f="correlation";break;case"euclidean":m=h,f="euclidean";break;case"manhattan":m=u,f="manhattan";break;case"quantum":m=p,f="quantum";break;default:m=l,f="resonance"}i.push({x1:s.x,y1:s.y,x2:o.x,y2:o.y,force:m,type:"normal",forceType:f,allMetrics:{resonance:l,cosine:c,correlation:d,euclidean:h,manhattan:u,quantum:p}})}e.inputVector&&e.vectors.forEach((n=>{const r=t.resonanceForce(e.inputVector,n);i.push({x1:e.inputVector.x,y1:e.inputVector.y,x2:n.x,y2:n.y,force:r,type:"input",forceType:"input-resonance"})}));const r=i.length>0?Math.max(...i.map((e=>e.force))):1;this.svg.selectAll(".force-line").data(i).enter().append("line").attr("class",(e=>`force-line ${e.force>.5*r?"strong":""} force-${e.forceType}`)).attr("x1",(e=>e.x1)).attr("y1",(e=>e.y1)).attr("x2",(e=>e.x2)).attr("y2",(e=>e.y2)).style("stroke",(e=>this.getForceColor(e))).style("stroke-width",(e=>Math.max(1,e.force/r*6))).attr("data-base-opacity",(e=>.3+e.force/r*.5)).style("opacity",(e=>.3+e.force/r*.5)).style("stroke-dasharray",(e=>this.getForcePattern(e.forceType))).on("mouseenter",((e,t)=>this.showForceTooltip(e,t))).on("mouseleave",(()=>this.hideForceTooltip()))}renderVectors(){const e=this.framework.getState(),t=this.framework.getConfig(),n=this.svg.selectAll(".vector-atom").data(e.vectors,(e=>e.id)).enter().append("g").attr("class","vector-atom").attr("transform",(e=>`translate(${e.x||0}, ${e.y||0})`)).attr("tabindex","0").attr("role","button").attr("aria-label",(e=>`Vector ${e.id+1}, magnitude ${this.framework.getModules().forceCalculator.magnitude(e).toFixed(2)}`)).on("click",((e,t)=>{e.stopPropagation(),this.framework.selectVector(t.id)})).on("keydown",((e,t)=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.framework.selectVector(t.id))}));if(this.svg.select("defs").empty()){const e=this.svg.append("defs").append("filter").attr("id","glow");e.append("feGaussianBlur").attr("stdDeviation","3").attr("result","coloredBlur");const t=e.append("feMerge");t.append("feMergeNode").attr("in","coloredBlur"),t.append("feMergeNode").attr("in","SourceGraphic")}n.append("circle").attr("r",(e=>this.getVectorRadius(e))).attr("fill",(e=>e.customColor?e.customColor:e.isUploaded?"rgba(255,215,0,0.2)":"rgba(255,255,255,0.1)")).attr("stroke",(e=>e.isUploaded?l.UPLOADED:"rgba(255,255,255,0.5)")).attr("stroke-width",2).attr("filter","url(#glow)"),n.each(((e,n,i)=>{const r=d3.select(i[n]),a=this.getVectorRadius(e),s=2*Math.PI/t.dimensions;e.components.forEach(((e,n)=>{const i=n*s-Math.PI/2,o=Math.abs(e),l=.8*a,c=d3.arc().innerRadius(l-8).outerRadius(l-2).startAngle(i-.4*s).endAngle(i+.4*s);if(r.append("path").attr("d",c).attr("fill",this.getComponentColor(e)).attr("opacity",.3+.7*o).attr("class","dimension-segment"),t.dimensions<=10){const e=Math.cos(i)*(a+15),t=Math.sin(i)*(a+15);r.append("text").attr("x",e).attr("y",t).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-size","8px").attr("opacity",.8).text(`D${n+1}`)}}))})),n.append("text").attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-weight","bold").attr("font-size","14px").text((e=>e.isUploaded?`N${e.id+1}`:`V${e.id+1}`)),this.setupKeyboardNavigation()}updateInputVector(){const e=this.framework.getState();this.svg.select(".input-vector").remove(),e.inputVector&&this.renderInputVector()}renderInputVector(){const e=this.framework.getState(),t=this.framework.getConfig(),n=this.svg.append("g").attr("class","input-vector").attr("transform",`translate(${e.inputVector.x||0}, ${e.inputVector.y||0})`),i=this.getVectorRadius(e.inputVector);n.append("circle").attr("r",i+10).attr("fill","none").attr("stroke",l.INPUT).attr("stroke-width",2).attr("opacity",.5).attr("class","input-pulse"),n.append("circle").attr("r",i).attr("fill","rgba(255,215,0,0.3)").attr("stroke",l.INPUT).attr("stroke-width",3);const r=2*Math.PI/t.dimensions;e.inputVector.components.forEach(((e,t)=>{const a=t*r-Math.PI/2,s=Math.abs(e),o=.8*i,l=d3.arc().innerRadius(o-8).outerRadius(o-2).startAngle(a-.4*r).endAngle(a+.4*r);n.append("path").attr("d",l).attr("fill",this.getComponentColor(e)).attr("opacity",.5+.5*s)})),n.append("text").attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",l.INPUT).attr("font-weight","bold").attr("font-size","16px").text("INPUT")}updateVectorSelection(){const{selectedVectorId:e}=this.framework.getState();this.svg.selectAll(".vector-atom").classed("selected",(t=>t.id===e))}getVectorRadius(e){const t=this.framework.getModules().forceCalculator.magnitude(e);return Math.max(d,Math.min(h,25*t))*(e.scale||1)}calculateManhattanDistance(e,t){let n=0;for(let i=0;i<e.components.length;i++)n+=Math.abs(e.components[i]-t.components[i]);return n}getForceColor(e){if("input"===e.type)return l.INPUT;switch(e.forceType){case"cosine":return"#e74c3c";case"correlation":return"#3498db";case"euclidean":return"#9b59b6";case"manhattan":return"#f39c12";case"quantum":return"#1abc9c";default:return"#ff6b6b"}}getForcePattern(e){switch(e){case"cosine":case"resonance":default:return"none";case"correlation":return"6,3";case"euclidean":return"8,4";case"manhattan":return"4,2";case"quantum":return"2,2"}}showForceTooltip(e,t){const n=this.d3.select("body").append("div").attr("class","force-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","8px 12px").style("border-radius","6px").style("font-size","11px").style("pointer-events","none").style("z-index","1000").style("box-shadow","0 4px 8px rgba(0,0,0,0.3)");let i=`<div><strong>${{cosine:"Cosine Similarity",correlation:"Pearson Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",quantum:"Quantum Entanglement",resonance:"Resonance Force"}[t.forceType]||t.forceType.toUpperCase()}</strong></div>`;i+=`<div>Value: ${t.force.toFixed(4)}</div>`,t.allMetrics&&(i+='<div style="margin-top: 5px; font-size: 10px; opacity: 0.8; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 5px;">',i+="<div>📊 All Metrics:</div>",i+=`<div>Resonance: ${t.allMetrics.resonance.toFixed(3)}</div>`,i+=`<div>Cosine: ${t.allMetrics.cosine.toFixed(3)}</div>`,i+=`<div>Correlation: ${t.allMetrics.correlation.toFixed(3)}</div>`,i+=`<div>Euclidean: ${t.allMetrics.euclidean.toFixed(3)}</div>`,i+=`<div>Manhattan: ${t.allMetrics.manhattan.toFixed(3)}</div>`,i+=`<div>Quantum: ${t.allMetrics.quantum.toFixed(3)}</div>`,i+="</div>"),n.html(i);const[r,a]=this.d3.pointer(e,document.body);n.style("left",r+10+"px").style("top",a-10+"px")}hideForceTooltip(){this.d3.selectAll(".force-tooltip").remove()}getComponentColor(e){return Math.abs(e)<.1?l.NEUTRAL:e>0?l.POSITIVE:l.NEGATIVE}setupKeyboardNavigation(){document.addEventListener("keydown",(e=>{if(e.target.closest(".modal-overlay")||"INPUT"===e.target.tagName)return;const t=this.framework.getState(),n=t.vectors,i=n.findIndex((e=>e.id===t.selectedVectorId));let r=-1;switch(e.key){case"ArrowRight":case"ArrowDown":e.preventDefault(),r=i<n.length-1?i+1:0;break;case"ArrowLeft":case"ArrowUp":e.preventDefault(),r=i>0?i-1:n.length-1;break;case"Home":e.preventDefault(),r=0;break;case"End":e.preventDefault(),r=n.length-1}if(r>=0&&r<n.length){this.framework.selectVector(n[r].id);const e=this.svg.select(`.vector-atom[data-id="${n[r].id}"]`).node();e&&e.focus()}}))}}const p={add(e,t){if(e.length!==t.length)throw new Error("Vectors must have the same dimensions.");return e.map(((e,n)=>e+t[n]))},subtract(e,t){if(e.length!==t.length)throw new Error("Vectors must have the same dimensions.");return e.map(((e,n)=>e-t[n]))},scale:(e,t)=>e.map((e=>e*t)),magnitude:e=>Math.sqrt(e.reduce(((e,t)=>e+t*t),0)),normalize(e){const t=this.magnitude(e);return 0===t?e:this.scale(e,1/t)},dotProduct(e,t){if(e.length!==t.length)throw new Error("Vectors must have the same dimensions.");return e.reduce(((e,n,i)=>e+n*t[i]),0)},distanceSquared(e,t){if(e.length!==t.length)throw new Error("Vectors must have the same dimensions.");return e.reduce(((e,n,i)=>e+Math.pow(n-t[i],2)),0)},distance(e,t){return Math.sqrt(this.distanceSquared(e,t))}};class m{constructor(){this.epsilon=.01}dotProduct(e,t){return p.dotProduct(e.components,t.components)}distanceSquared(e,t){return p.distanceSquared(e.components,t.components)}euclideanDistance(e,t){return p.distance(e.components,t.components)}magnitude(e){return p.magnitude(e.components)}cosineSimilarity(e,t){const n=this.dotProduct(e,t),i=this.magnitude(e),r=this.magnitude(t);return 0===i||0===r?0:n/(i*r)}resonanceForce(e,t){return Math.pow(this.dotProduct(e,t),2)/(this.distanceSquared(e,t)+this.epsilon)}informationEntropy(e){const t=e.components.reduce(((e,t)=>e+Math.abs(t)),0);return 0===t?0:-e.components.map((e=>Math.abs(e)/t)).reduce(((e,t)=>t>0?e+t*Math.log2(t):e),0)}correlation(e,t){const n=e.components.length,i=e.components.reduce(((e,t)=>e+t),0)/n,r=t.components.reduce(((e,t)=>e+t),0)/n;let a=0,s=0,o=0;for(let l=0;l<n;l++){const n=e.components[l]-i,c=t.components[l]-r;a+=n*c,s+=n*n,o+=c*c}return a/Math.sqrt(s*o)}quantumEntanglement(e,t){return Math.abs(this.correlation(e,t))}harmonicAlignment(e,t){const n=this.dotProduct(e,t),i=Math.sqrt(this.distanceSquared(e,t));return i>0?Math.pow(n,2)/Math.pow(i,2):0}nuclearStability(e){return this.magnitude(e)/Math.sqrt(e.components.length)}getInformationQuantums(e){const t=this.magnitude(e);return{excitatory:e.components.filter((e=>e>.1)).length,inhibitory:e.components.filter((e=>e<-.1)).length,neutral:e.components.filter((e=>Math.abs(e)<=.1)).length,totalEnergy:t,averageExcitation:e.components.filter((e=>e>0)).reduce(((e,t)=>e+t),0),averageInhibition:Math.abs(e.components.filter((e=>e<0)).reduce(((e,t)=>e+t),0))}}getVectorStatistics(e){const t=e.components,n=t.length,i=t.reduce(((e,t)=>e+t),0)/n,r=t.reduce(((e,t)=>e+Math.pow(t-i,2)),0)/n,a=Math.sqrt(r);return{mean:i,variance:r,standardDeviation:a,min:Math.min(...t),max:Math.max(...t),range:Math.max(...t)-Math.min(...t),skewness:this.calculateSkewness(t,i,a),kurtosis:this.calculateKurtosis(t,i,a)}}calculateSkewness(e,t,n){if(0===n)return 0;const i=e.length;return e.reduce(((e,i)=>e+Math.pow((i-t)/n,3)),0)/i}calculateKurtosis(e,t,n){if(0===n)return 0;const i=e.length;return e.reduce(((e,i)=>e+Math.pow((i-t)/n,4)),0)/i-3}electromagneticForce(e,t){return 1*this.dotProduct(e,t)/(this.distanceSquared(e,t)+this.epsilon)}gravitationalAttraction(e,t){return this.magnitude(e)*this.magnitude(t)*1/(this.distanceSquared(e,t)+this.epsilon)}}class f extends m{constructor(){super(),this.neuralNetworkMode=!1,this.inputNeuron=null,this.activationFunction="sigmoid",this.learningRate=.01,this.temperature=1}applyActivation(e,t=this.activationFunction,n=null){switch(t){case"sigmoid":return 1/(1+Math.exp(-e));case"tanh":return Math.tanh(e);case"relu":return Math.max(0,e);case"leaky_relu":return e>0?e:.01*e;case"softplus":return Math.log(1+Math.exp(e));case"swish":return e/(1+Math.exp(-e));case"softmax":if(!n||!Array.isArray(n))return Math.exp(e);const t=n.map((e=>Math.exp(e))).reduce(((e,t)=>e+t),0);return Math.exp(e)/t;case"softermax":if(!n||!Array.isArray(n))return Math.abs(e)/(1e-4+Math.abs(e));const i=n.reduce(((e,t)=>e+Math.abs(t)),0);return Math.abs(e)/(1e-4+i);case"soft_sigmoid":return 1/(1+Math.abs(e));default:return e}}neuralActivation(e,t,n=0){const i=this.dotProduct(e,t)+n;return this.applyActivation(i)}attentionScore(e,t,n){const i=this.dotProduct(e,t)/Math.sqrt(e.components.length);return Math.exp(i/this.temperature)*this.magnitude(n)}synapticStrength(e,t){const n=Math.abs(this.correlation(e,t)),i=this.euclideanDistance(e,t);return n*this.neuralActivation(e,t)/(1+i)}quantumCoherence(e,t){const n=e.components.length;let i=0,r=0;for(let a=0;a<n;a++){const n=Math.atan2(e.components[a],Math.abs(e.components[a])||1)-Math.atan2(t.components[a],Math.abs(t.components[a])||1);i+=Math.cos(n),r+=Math.sin(n)}return Math.sqrt(i*i+r*r)/n}thermodynamicEntropy(e,t=1){const n=e.components.map((e=>Math.abs(e))),i=n.reduce(((e,t)=>e+t),0);if(0===i)return 0;const r=n.map((e=>e/i)),a=r.map((e=>Math.exp(-e/t))),s=a.reduce(((e,t)=>e+t),0);return Math.log(s)+r.reduce(((e,n,i)=>e+n*a[i]/(t*s)),0)}fieldStrength(e,t){let n=0,i=0,r=0;return e.forEach((e=>{const a=this.magnitude(e),s=(t.x||0)-(e.x||0),o=(t.y||0)-(e.y||0),l=(t.z||0)-(e.z||0),c=Math.sqrt(s*s+o*o+l*l)+this.epsilon,d=899e7*a/(c*c*c);n+=d*s,i+=d*o,r+=d*l})),Math.sqrt(n*n+i*i+r*r)}waveInterference(e,t,n=0,i=0){const r=this.magnitude(e),a=this.magnitude(t),s=i-n;return{amplitude:Math.sqrt(r*r+a*a+2*r*a*Math.cos(s)),interference:Math.cos(s),phaseShift:Math.atan2(r*Math.sin(n)+a*Math.sin(i),r*Math.cos(n)+a*Math.cos(i))}}mutualInformation(e,t){const n=this.informationEntropy(e),i=this.informationEntropy(t),r={components:e.components.map(((e,n)=>e+t.components[n]))};return n+i-this.informationEntropy(r)}transferEntropy(e,t){const n=this.conditionalEntropy(t,e);return this.informationEntropy(t)-n}conditionalEntropy(e,t){const n=Math.abs(this.correlation(e,t));return this.informationEntropy(e)*(1-n)}calculateCentrality(e,t){const n=e.length;let i=0,r=0;return e.forEach((e=>{e.id!==t.id&&this.synapticStrength(t,e)>.5&&i++})),r=(n-1)/e.reduce(((e,n)=>n.id!==t.id?e+this.euclideanDistance(t,n):e),0),{degree:i/(n-1),closeness:r,betweenness:0}}enableNeuralNetworkMode(e){this.neuralNetworkMode=!0,this.inputNeuron=e}disableNeuralNetworkMode(){this.neuralNetworkMode=!1,this.inputNeuron=null}forwardPass(e,t,n=null){n||(n=t.map((()=>Array(e.components.length).fill(0).map((()=>Math.random()-.5)))));const i=t.map(((t,i)=>e.components.reduce(((e,t,r)=>e+t*n[i][r]),0))),r=i.map(((e,t)=>"softmax"===this.activationFunction||"softermax"===this.activationFunction?this.applyActivation(e,this.activationFunction,i):this.applyActivation(e))),a=r.reduce(((e,t)=>e+t),0),s=this.applyActivation(a);return{activations:r,weights:n,output:s,weightedSums:i}}getNeuralNetworkAnalysis(e,t){const n=this.forwardPass(e,t),i=t.map((t=>this.synapticStrength(e,t))),r=t.map((t=>this.attentionScore(e,t,t)));return{activations:n.activations,synapticStrengths:i,attentionScores:r,networkOutput:n.output,totalSynapticStrength:i.reduce(((e,t)=>e+t),0),averageActivation:n.activations.reduce(((e,t)=>e+t),0)/n.activations.length,networkComplexity:this.calculateNetworkComplexity(i)}}calculateNetworkComplexity(e){const t=e.reduce(((e,t)=>e+t),0)/e.length,n=e.reduce(((e,n)=>e+Math.pow(n-t,2)),0)/e.length;return Math.sqrt(n)}getEnhancedVectorStatistics(e,t=[]){return{...this.getVectorStatistics(e),...this.getInformationQuantums(e),quantumCoherence:t.length>0?t.reduce(((t,n)=>n.id!==e.id?t+this.quantumCoherence(e,n):t),0)/Math.max(1,t.length-1):0,thermodynamicEntropy:this.thermodynamicEntropy(e),informationDensity:this.informationEntropy(e)/e.components.length,centrality:t.length>0?this.calculateCentrality(t,e):null,neuralComplexity:this.calculateNeuralComplexity(e),activationPotential:this.calculateActivationPotential(e)}}calculateNeuralComplexity(e){const t=e.components.filter((e=>e>0)),n=e.components.filter((e=>e<0)),i=e.components.filter((e=>Math.abs(e)<.1));return{excitatory:t.length,inhibitory:n.length,neutral:i.length,balance:(t.length-n.length)/e.components.length,diversity:1-i.length/e.components.length}}calculateActivationPotential(e){return this.magnitude(e)*this.informationEntropy(e)}calculateSelectedMetric(e,t,n="resonance"){switch(n){case"resonance":default:return this.resonanceForce(e,t);case"cosine":return this.cosineSimilarity(e,t);case"correlation":return this.correlation(e,t);case"euclidean":return 1/(1+this.euclideanDistance(e,t));case"manhattan":return 1/(1+this.manhattanDistance(e,t));case"quantum":return this.quantumEntanglement(e,t)}}manhattanDistance(e,t){let n=0;for(let i=0;i<e.components.length;i++)n+=Math.abs(e.components[i]-t.components[i]);return n}}class g{constructor(e){this.framework=e,this.d3=window.d3}setupControls(){this.setupDimensionsControl(),this.setupVectorsControl(),this.setupButtons(),this.setupThemeSwitcher(),this.setupHelpModal(),this.setupAnalysisModal(),this.setupUploadHelpModal(),this.setupActivationHelpModal(),this.setupHelpSystem(),this.framework.eventBus.on("stateChanged",(e=>{e&&"vectorSelected"!==e.reason&&"vectorColorChanged"!==e.reason&&"vectorScaleChanged"!==e.reason&&!e.fullRender||this.updateVectorDetails(),e&&!e.fullRender&&"vectorsGenerated"!==e.reason||this.updateControls()})),this.updateControls()}setupDimensionsControl(){const e=document.getElementById("dimensions"),t=document.getElementById("dim-value");e&&e.addEventListener("input",(e=>{const n=parseInt(e.target.value,10);t.textContent=`${n}D`,this.framework.updateConfig("dimensions",n)}))}setupVectorsControl(){const e=document.getElementById("vectors"),t=document.getElementById("vec-value");e&&e.addEventListener("input",(e=>{const n=parseInt(e.target.value,10);t.textContent=n,this.framework.updateConfig("numVectors",n)}))}setupButtons(){document.getElementById("regenerate")?.addEventListener("click",(()=>this.framework.stateManager.generateVectors()));const e=document.getElementById("toggle-forces");e&&e.addEventListener("click",(e=>{const t="on"===e.currentTarget.dataset.state?"off":"on";e.currentTarget.dataset.state=t;const n=e.currentTarget.querySelector(".btn-state");n&&(n.textContent=t.toUpperCase()),this.framework.updateConfig("showForces","on"===t)})),document.getElementById("add-input-vector")?.addEventListener("click",(()=>this.showAddVectorModal())),document.getElementById("export-json")?.addEventListener("click",(()=>this.framework.modules.fileHandler.exportStateToJson()));const t=document.getElementById("vector-file");t&&t.addEventListener("change",(e=>this.framework.modules.fileHandler.handleFileUpload(e)))}setupThemeSwitcher(){const e=document.querySelector(".theme-switcher");"light"===localStorage.getItem("vectoverse-theme")?(document.body.classList.add("light-theme"),e&&(e.textContent="🌑")):(document.body.classList.remove("light-theme"),e&&(e.textContent="🌙")),e&&e.addEventListener("click",(()=>{const t=document.body.classList.toggle("light-theme");e.textContent=t?"🌑":"🌙",localStorage.setItem("vectoverse-theme",t?"light":"dark")}))}setupHelpModal(){const e=document.getElementById("tutorial-modal"),t=document.getElementById("show-help"),n=e?.querySelector(".close-button");e&&(e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","Tutorial")),t?.addEventListener("click",(()=>{e?.classList.add("active"),setTimeout((()=>{const t=e.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');t[0]&&t[0].focus()}),50)})),n?.addEventListener("click",(()=>e?.classList.remove("active"))),e?.addEventListener("click",(t=>{t.target===e&&e.classList.remove("active")})),document.addEventListener("keydown",(t=>{"Escape"===t.key&&e?.classList.contains("active")&&e.classList.remove("active")}))}setupAnalysisModal(){const e=document.getElementById("analysis-modal"),t=document.getElementById("run-analysis"),n=e?.querySelector(".close-button"),i=document.getElementById("analysis-type"),r=document.getElementById("kmeans-options"),a=document.getElementById("run-selected-analysis");e&&(e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","Advanced Analysis")),t?.addEventListener("click",(()=>{e?.classList.add("active"),setTimeout((()=>{const t=e.querySelectorAll('button, select, input, [tabindex]:not([tabindex="-1"])');t[0]&&t[0].focus()}),50)})),n?.addEventListener("click",(()=>e?.classList.remove("active"))),i?.addEventListener("change",(e=>{"kmeans"===e.target.value?r.style.display="flex":r.style.display="none"})),a?.addEventListener("click",(()=>{const e=i.value;this.runAnalysis(e)})),e?.addEventListener("click",(t=>{t.target===e&&e.classList.remove("active")})),document.addEventListener("keydown",(t=>{"Escape"===t.key&&e?.classList.contains("active")&&e.classList.remove("active")}))}setupUploadHelpModal(){const e=document.getElementById("upload-help-modal"),t=document.getElementById("show-upload-help"),n=e?.querySelector(".close-button");e&&(e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","Upload Format Guide")),t?.addEventListener("click",(()=>{e?.classList.add("active"),setTimeout((()=>{const t=e.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');t[0]&&t[0].focus()}),50)})),n?.addEventListener("click",(()=>e?.classList.remove("active"))),e?.addEventListener("click",(t=>{t.target===e&&e.classList.remove("active")})),document.addEventListener("keydown",(t=>{"Escape"===t.key&&e?.classList.contains("active")&&e.classList.remove("active")}))}setupActivationHelpModal(){const e=document.getElementById("activation-help-modal"),t=document.getElementById("show-activation-help"),n=e?.querySelector(".close-button");e&&(e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","Activation Functions Guide")),t?.addEventListener("click",(()=>{e?.classList.add("active"),setTimeout((()=>{const t=e.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');t[0]&&t[0].focus()}),50)})),n?.addEventListener("click",(()=>e?.classList.remove("active"))),e?.addEventListener("click",(t=>{t.target===e&&e.classList.remove("active")})),document.addEventListener("keydown",(t=>{"Escape"===t.key&&e?.classList.contains("active")&&e.classList.remove("active")}))}setupHelpSystem(){const e=document.querySelector('[data-action="help"]');e&&e.addEventListener("click",(()=>this.showComprehensiveHelp()))}showComprehensiveHelp(){const e=document.createElement("div");e.className="modal-overlay",e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","VectoVerse Help & Features"),e.innerHTML='\n            <div class="modal-content help-modal">\n                <div class="help-header">\n                    <h3>🚀 VectoVerse - Complete Guide</h3>\n                    <button class="close-button" aria-label="Close help">&times;</button>\n                </div>\n                \n                <div class="help-content">\n                    <div class="help-tabs">\n                        <button class="help-tab active" data-tab="features">✨ Features</button>\n                        <button class="help-tab" data-tab="keyboard">⌨️ Shortcuts</button>\n                        <button class="help-tab" data-tab="analysis">📊 Analysis</button>\n                        <button class="help-tab" data-tab="export">💾 Export</button>\n                        <button class="help-tab" data-tab="accessibility">♿ Accessibility</button>\n                    </div>\n                    \n                    <div class="help-panel active" data-panel="features">\n                        <h4>Core Features</h4>\n                        <ul class="feature-list">\n                            <li><strong>Interactive Vector Visualization:</strong> Click, drag, and explore high-dimensional vectors in 2D/3D space</li>\n                            <li><strong>Custom Vector Input:</strong> Add your own vectors with the "Add Vector" button</li>\n                            <li><strong>Force Visualization:</strong> Toggle attractive/repulsive forces between vectors</li>\n                            <li><strong>Real-time Controls:</strong> Adjust dimensions, vector count, and visualization parameters</li>\n                            <li><strong>File Upload/Export:</strong> Import CSV data and export in multiple formats</li>\n                            <li><strong>Theme Switching:</strong> Light/dark mode with persistent preferences</li>\n                            <li><strong>Responsive Design:</strong> Optimized for desktop, tablet, and mobile devices</li>\n                        </ul>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="keyboard">\n                        <h4>Keyboard Navigation</h4>\n                        <div class="shortcut-grid">\n                            <div class="shortcut-item"><kbd>Ctrl+G</kbd> Generate new vectors</div>\n                            <div class="shortcut-item"><kbd>Ctrl+R</kbd> Reset visualization</div>\n                            <div class="shortcut-item"><kbd>Ctrl+E</kbd> Export options</div>\n                            <div class="shortcut-item"><kbd>Ctrl+A</kbd> Analysis modal</div>\n                            <div class="shortcut-item"><kbd>Arrow Keys</kbd> Navigate vectors</div>\n                            <div class="shortcut-item"><kbd>Enter/Space</kbd> Select vector</div>\n                            <div class="shortcut-item"><kbd>Escape</kbd> Close modals</div>\n                            <div class="shortcut-item"><kbd>?</kbd> Show shortcuts</div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="analysis">\n                        <h4>Advanced Analysis</h4>\n                        <div class="analysis-features">\n                            <div class="analysis-item">\n                                <h5>📈 PCA (Principal Component Analysis)</h5>\n                                <p>Reduces dimensionality while preserving variance. Shows explained variance and projected coordinates.</p>\n                            </div>\n                            <div class="analysis-item">\n                                <h5>🔍 t-SNE</h5>\n                                <p>Non-linear dimensionality reduction for visualization. Great for finding clusters and patterns.</p>\n                            </div>\n                            <div class="analysis-item">\n                                <h5>📊 K-Means Clustering</h5>\n                                <p>Groups vectors into clusters. Shows silhouette score, cluster assignments, and centroids.</p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="export">\n                        <h4>Export & Import Options</h4>\n                        <div class="export-options">\n                            <div class="export-format">\n                                <h5>📋 CSV Format</h5>\n                                <p>Comprehensive data with headers: vector ID, type, position, magnitude, entropy, and all components</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>📄 JSON Format</h5>\n                                <p>Complete session data including metadata, configuration, and analysis results</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>🖼️ Visual Export</h5>\n                                <p>High-resolution PNG and scalable SVG for publications and presentations</p>\n                            </div>\n                            <div class="export-format">\n                                <h5>📈 Analysis Results</h5>\n                                <p>Export PCA, t-SNE, and clustering results in multiple formats</p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="help-panel" data-panel="accessibility">\n                        <h4>Accessibility Features</h4>\n                        <div class="accessibility-features">\n                            <div class="a11y-item">\n                                <h5>🔊 Screen Reader Support</h5>\n                                <p>Full ARIA labels, live regions for announcements, and descriptive content</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>⌨️ Keyboard Navigation</h5>\n                                <p>Complete keyboard control, focus management, and modal focus trapping</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>🎨 High Contrast</h5>\n                                <p>Automatic detection and enhanced colors for better visibility</p>\n                            </div>\n                            <div class="a11y-item">\n                                <h5>🎯 Reduced Motion</h5>\n                                <p>Respects user preferences for reduced motion and animations</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="help-footer">\n                    <p><strong>Performance Tips:</strong> The app automatically optimizes for your device. For large datasets (>100 vectors), consider enabling performance mode in settings.</p>\n                    <p><strong>Need Help?</strong> Use the error reporting system if you encounter issues. All errors are logged and can be exported for debugging.</p>\n                </div>\n            </div>\n        ',document.body.appendChild(e);const t=e.querySelectorAll(".help-tab"),n=e.querySelectorAll(".help-panel");t.forEach((i=>{i.addEventListener("click",(()=>{const r=i.dataset.tab;t.forEach((e=>e.classList.remove("active"))),n.forEach((e=>e.classList.remove("active"))),i.classList.add("active"),e.querySelector(`[data-panel="${r}"]`).classList.add("active")}))})),e.querySelector(".close-button").addEventListener("click",(()=>e.remove())),e.addEventListener("click",(t=>{t.target===e&&e.remove()})),e.querySelector(".help-tabs .help-tab").focus()}async runAnalysis(e){const t=document.getElementById("analysis-results"),n=document.getElementById("run-selected-analysis"),i=this.framework.getState().vectors;if(i.length<2)return void(t.innerHTML='<p style="color: orange;">Need at least 2 vectors for analysis.</p>');let r;n.disabled=!0,n.classList.add("loading"),t.innerHTML=`\n            <div class="loading-analysis">\n                <div class="loading-spinner"></div>\n                <p>Running ${e.toUpperCase()} analysis...</p>\n            </div>\n        `;try{switch(e){case"pca":r=await this.framework.modules.analysisEngine.performPCA(i);break;case"tsne":r=await this.framework.modules.analysisEngine.performTSNE(i);break;case"kmeans":const t=parseInt(document.getElementById("kmeans-k").value,10);r=await this.framework.modules.analysisEngine.performKMeans(i,t);break;default:throw new Error(`Unknown analysis type: ${e}`)}this.displayAnalysisResults(r),this.showToast(`${e.toUpperCase()} analysis completed successfully!`,"success")}catch(a){t.innerHTML=`<p style="color: red;">Error: ${a.message}</p>`,this.showToast(`Analysis failed: ${a.message}`,"error")}finally{n.disabled=!1,n.classList.remove("loading")}}displayAnalysisResults(e){const t=document.getElementById("analysis-results");let n=`\n            <div class="analysis-header">\n                <h4>${e.type.toUpperCase()} Results</h4>\n                <small>Completed at ${new Date(e.timestamp).toLocaleTimeString()}</small>\n            </div>\n        `;"pca"===e.type?n+=`\n                <div class="analysis-stats">\n                    <div class="stat-card">\n                        <strong>Explained Variance:</strong> \n                        ${e.explainedVariance.map((e=>(100*e).toFixed(1)+"%")).join(", ")}\n                    </div>\n                    <div class="stat-card">\n                        <strong>Total Variance:</strong> \n                        ${(100*e.explainedVariance.reduce(((e,t)=>e+t),0)).toFixed(1)}%\n                    </div>\n                </div>\n                <details>\n                    <summary>Projected Data (first 5 points)</summary>\n                    <ul class="data-list">\n                        ${e.data.slice(0,5).map((e=>`<li>[${e.map((e=>e.toFixed(4))).join(", ")}]</li>`)).join("")}\n                    </ul>\n                </details>\n            `:"tsne"===e.type?n+=`\n                <div class="analysis-stats">\n                    <div class="stat-card">\n                        <strong>Perplexity:</strong> ${e.parameters.perplexity||30}\n                    </div>\n                    <div class="stat-card">\n                        <strong>Dimensions:</strong> ${e.parameters.dim||2}\n                    </div>\n                </div>\n                <details>\n                    <summary>Embedding (first 5 points)</summary>\n                    <ul class="data-list">\n                        ${e.data.slice(0,5).map((e=>`<li>[${e.map((e=>e.toFixed(4))).join(", ")}]</li>`)).join("")}\n                    </ul>\n                </details>\n            `:"kmeans"===e.type&&(n+=`\n                <div class="analysis-stats">\n                    <div class="stat-card"><strong>Clusters:</strong> ${e.data.k}</div>\n                    <div class="stat-card"><strong>Iterations:</strong> ${e.data.iterations}</div>\n                    <div class="stat-card"><strong>Converged:</strong> ${e.data.converged?"✓":"✗"}</div>\n                    <div class="stat-card"><strong>Silhouette Score:</strong> ${e.data.silhouetteScore.toFixed(3)}</div>\n                </div>\n                <div class="cluster-breakdown">\n                    <h5>Cluster Distribution:</h5>\n                    ${e.data.clusters.map(((t,n)=>`\n                        <div class="cluster-item">\n                            <span class="cluster-color" style="background: hsl(${60*n}, 70%, 60%)"></span>\n                            Cluster ${n+1}: ${t.size} vectors (${(t.size/e.originalVectors.length*100).toFixed(1)}%)\n                        </div>\n                    `)).join("")}\n                </div>\n            `),t.innerHTML=n,this.framework.eventBus.emit("analysisCompleted",e)}updateVectorDetails(){const e=this.framework.stateManager.getSelectedVector(),t=document.getElementById("vector-details-content");if(!t)return;if(null===e)return void(t.innerHTML='<div class="placeholder">Click on a vector to see its detailed properties and relationships.</div>');const n=document.getElementById("vector-details-template");if(!n)return;const i=n.content.cloneNode(!0),r=this.framework.getModules().forceCalculator,a=r.getInformationQuantums(e);let s="Neutral (Balanced)";a.excitatory>a.inhibitory?s="Positive (Excitatory)":a.inhibitory>a.excitatory&&(s="Negative (Inhibitory)");const o=i.querySelector(".charge-indicator");o&&(s.includes("Positive")?o.style.background="#4ecdc4":s.includes("Negative")?o.style.background="#f06292":o.style.background="#6c757d"),i.querySelector(".vector-name").textContent=`Vector ${e.id}`,i.querySelector("#template-magnitude").textContent=r.magnitude(e).toFixed(4),i.querySelector("#template-entropy").textContent=r.informationEntropy(e).toFixed(4),i.querySelector("#template-dimensions").textContent=e.components.length,this.renderComponentChart(i.querySelector("#template-components-chart"),e.components),this.renderStatsList(i.querySelector("#template-stats-list"),r.getVectorStatistics(e));const l=i.querySelector("#template-relationships-list"),c=i.querySelector("#relationship-sort-metric");if(l&&c){const t=this.calculateSimilarities(e),n=()=>{const e=c.value;"distance"===e?t.sort(((t,n)=>t[e]-n[e])):t.sort(((t,n)=>n[e]-t[e])),l.innerHTML=t.slice(0,5).map((e=>`\n                    <div class="relationship-item">\n                        <div class="relationship-target">vs V${e.index}</div>\n                        <div class="relationship-scores">\n                            <div>Resonance: <span class="score-value">${e.resonance.toFixed(3)}</span></div>\n                            <div>Similarity: <span class="score-value">${e.similarity.toFixed(3)}</span></div>\n                            <div>Correlation: <span class="score-value">${e.correlation.toFixed(3)}</span></div>\n                            <div>Distance: <span class="score-value">${e.distance.toFixed(3)}</span></div>\n                        </div>\n                    </div>\n                `)).join("")};c.addEventListener("change",n),n()}t.innerHTML="",t.appendChild(i)}renderComponentChart(e,t){if(!e)return;const n=20,i=20,r=30,a=40,s=e.clientWidth-a-i,o=e.clientHeight-n-r,l=this.d3.select(e).append("svg").attr("width","100%").attr("height","100%").attr("viewBox",`0 0 ${e.clientWidth} ${e.clientHeight}`).append("g").attr("transform",`translate(${a},${n})`),c=this.d3.scaleBand().range([0,s]).padding(.1).domain(t.map(((e,t)=>t))),d=this.d3.scaleLinear().range([o,0]).domain(this.d3.extent(t));l.selectAll(".bar").data(t).enter().append("rect").attr("class","bar").attr("x",((e,t)=>c(t))).attr("width",c.bandwidth()).attr("y",(e=>d(Math.max(0,e)))).attr("height",(e=>Math.abs(d(e)-d(0)))).attr("fill",(e=>e>=0?"#4ecdc4":"#f06292"))}renderStatsList(e,t){if(!e)return;let n="";for(const[i,r]of Object.entries(t))n+=`\n                <div class="stat-item-detailed">\n                    <div class="stat-label-detailed">${i}</div>\n                    <div class="stat-value-detailed">${r.toFixed(4)}</div>\n                </div>\n            `;e.innerHTML=n}calculateSimilarities(e){const t=this.framework.getModules().forceCalculator;return this.framework.getState().vectors.filter((t=>t.id!==e.id)).map((n=>({index:n.id,similarity:t.cosineSimilarity(e,n),resonance:t.resonanceForce(e,n),correlation:t.correlation(e,n),distance:t.euclideanDistance(e,n)})))}updateControls(){const e=this.framework.getConfig(),t=document.getElementById("dimensions"),n=document.getElementById("dim-value");t&&n&&(t.value=e.dimensions,n.textContent=`${e.dimensions}D`);const i=document.getElementById("vectors"),r=document.getElementById("vec-value");i&&r&&(i.value=e.numVectors,r.textContent=e.numVectors)}showAddVectorModal(){let e=document.getElementById("add-vector-modal");e&&e.remove();const t=this.framework.getConfig().dimensions;e=document.createElement("div"),e.id="add-vector-modal",e.className="modal-overlay",e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-label","Add Custom Vector"),e.innerHTML=`\n            <div class="modal-content" tabindex="-1">\n                <button class="close-button" aria-label="Close">&times;</button>\n                <h2>Add Custom Vector</h2>\n                <form id="add-vector-form">\n                    <div class="vector-input-fields">\n                        ${Array.from({length:t}).map(((e,t)=>`\n                            <label>Component ${t+1}: <input type="number" step="any" name="component${t}" required aria-label="Component ${t+1}"></label>\n                        `)).join("")}\n                    </div>\n                    <button type="submit" class="btn-compact btn-primary">Add Vector</button>\n                </form>\n            </div>\n        `,document.body.appendChild(e);const n=e.querySelectorAll('input, button, [tabindex]:not([tabindex="-1"])'),i=n[0],r=n[n.length-1];e.addEventListener("keydown",(function(e){"Tab"===e.key&&(e.shiftKey?document.activeElement===i&&(e.preventDefault(),r.focus()):document.activeElement===r&&(e.preventDefault(),i.focus()))})),setTimeout((()=>i.focus()),50),e.querySelector(".close-button").onclick=()=>e.remove(),e.onclick=t=>{t.target===e&&e.remove()},document.addEventListener("keydown",(function t(n){"Escape"===n.key&&(e.remove(),document.removeEventListener("keydown",t))}));const a=e.querySelector("#add-vector-form");a.onsubmit=t=>{t.preventDefault();const n=Array.from(a.elements).filter((e=>"INPUT"===e.tagName)).map((e=>parseFloat(e.value)));n.some(isNaN)?alert("Please enter valid numbers for all components."):(this.framework.stateManager.addCustomVector(n),e.remove())}}showToast(e,t="info"){let n=document.getElementById("vectoverse-toast");n&&n.remove(),n=document.createElement("div"),n.id="vectoverse-toast",n.className=`toast toast-${t}`,n.textContent=e,document.body.appendChild(n),setTimeout((()=>{n.classList.add("visible")}),10),setTimeout((()=>{n.classList.remove("visible"),setTimeout((()=>n.remove()),400)}),2500)}showProgress(e,t){const n=document.querySelector(".upload-progress");n&&n.remove();const i=document.createElement("div");i.className="upload-progress",i.innerHTML=`\n            <div class="progress-content">\n                <div class="progress-message">${e}</div>\n                <div class="progress-bar-container">\n                    <div class="progress-bar" style="width: ${t}%"></div>\n                </div>\n                <div class="progress-percentage">${t}%</div>\n            </div>\n        `,document.body.appendChild(i),setTimeout((()=>{i.classList.add("active")}),10)}hideProgress(){const e=document.querySelector(".upload-progress");e&&(e.classList.remove("active"),setTimeout((()=>{document.body.contains(e)&&e.remove()}),300))}}class v{constructor(e){this.framework=e,this.ui=null,this.maxDimensions=1e4,this.maxFileSize=104857600}handleFileUpload(e){const t=e.target.files?.[0];if(!t)return;if(t.size>this.maxFileSize)return void this.showError(`File too large. Maximum size is ${this.maxFileSize/1048576}MB.`);this.showProgress("Reading file...",0);const n=new FileReader;n.onload=e=>{try{this.processFileContent(e.target.result,t.name)}catch(n){console.error("File upload error:",n),this.showError(`Error processing file: ${n.message}`)}},n.onerror=()=>{this.showError("Error reading file. Please try again.")},n.readAsText(t)}processFileContent(e,t){const n=t.toLowerCase().split(".").pop();let i;this.showProgress("Parsing content...",20);try{switch(n){case"json":i=this.parseJSON(e);break;case"csv":i=this.parseCSV(e);break;case"txt":i=this.parseTXT(e);break;default:i=this.autoDetectFormat(e)}if(!i||0===i.length)throw new Error("No valid vectors found in file");this.showProgress("Processing vectors...",60),this.loadVectors(i)}catch(r){throw new Error(`Failed to parse ${n.toUpperCase()} file: ${r.message}`)}}parseJSON(e){const t=JSON.parse(e);if(Array.isArray(t))return t;if(t.vectors&&Array.isArray(t.vectors))return t.vectors;if(t.data&&Array.isArray(t.data))return t.data;if(t.matrix&&Array.isArray(t.matrix))return t.matrix;throw new Error('JSON must contain an array of vectors or an object with "vectors", "data", or "matrix" property')}parseCSV(e){const t=e.trim().split("\n").filter((e=>e.trim())),n=[],i=t[0].split(",").map((e=>e.trim())).some((e=>isNaN(parseFloat(e))))?1:0;if(t.length<=i)throw new Error("CSV file appears to contain only headers or is empty");for(let r=i;r<t.length;r++){const e=t[r].trim();if(!e)continue;const i=e.split(",").map((e=>parseFloat(e.trim()))).filter((e=>!isNaN(e)));i.length>0&&n.push(i)}return n}parseTXT(e){const t=e.trim().split("\n").filter((e=>e.trim())),n=[];for(const i of t){const e=i.split(/\s+/).map((e=>parseFloat(e.trim()))).filter((e=>!isNaN(e)));e.length>0&&n.push(e)}return n}autoDetectFormat(e){try{return this.parseJSON(e)}catch(t){try{return this.parseCSV(e)}catch(t){return this.parseTXT(e)}}}loadVectors(e){if(this.showProgress("Validating vectors...",80),0===e.length)throw new Error("No vectors found in file");const t=e[0].length;if(0===t)throw new Error("Vectors cannot be empty");if(t>this.maxDimensions)throw new Error(`Too many dimensions (${t}). Maximum supported: ${this.maxDimensions}`);for(let s=1;s<e.length;s++)if(e[s].length!==t)throw new Error(`Inconsistent dimensions: Vector ${s+1} has ${e[s].length} dimensions, expected ${t}`);this.showProgress("Creating visualization...",90);const n=this.framework.getConfig();this.framework.updateConfig("dimensions",t),this.framework.updateConfig("numVectors",e.length);const i=document.getElementById("dimensions"),r=document.getElementById("vectors");i&&(i.max=Math.max(t,20),i.value=t,document.getElementById("dim-value").textContent=`${t}D`),r&&(r.max=Math.max(e.length,12),r.value=e.length,document.getElementById("vec-value").textContent=e.length);const a=e.map(((e,t)=>({id:t,components:e,x:Math.random()*(n.width-100)+50,y:Math.random()*(n.height-100)+50,isUploaded:!0,uploadedAt:Date.now()})));this.framework.getState().vectors=a,this.framework.render(),this.hideProgress(),this.showSuccess(`Successfully loaded ${e.length} vectors with ${t} dimensions`,`File contained ${e.length} vectors in ${t}D space`)}showProgress(e,t){this.ui&&"function"==typeof this.ui.showProgress?this.ui.showProgress(e,t):console.log(`Progress: ${t}% - ${e}`)}hideProgress(){this.ui&&"function"==typeof this.ui.hideProgress&&this.ui.hideProgress()}showSuccess(e,t){this.ui&&"function"==typeof this.ui.showToast?(this.ui.showToast(e,"success"),t&&console.log(t)):alert(e)}showError(e){this.ui&&"function"==typeof this.ui.showToast?this.ui.showToast(e,"error"):alert(e)}exportStateToJson(){const e=this.framework.getState(),t={config:this.framework.getConfig(),vectors:e.vectors.map((e=>({id:e.id,components:e.components,isUploaded:e.isUploaded,isInput:e.isInput}))),inputVector:e.inputVector?{id:e.inputVector.id,components:e.inputVector.components,isInput:!0}:null},n="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(t,null,2)),i=document.createElement("a");i.setAttribute("href",n),i.setAttribute("download","vectoverse_state.json"),document.body.appendChild(i),i.click(),i.remove(),this.ui&&"function"==typeof this.ui.showToast?this.ui.showToast("State exported successfully!","success"):alert("State exported successfully!")}}class x{constructor(e,t){this.svg=e,this.framework=t,this.pulseTime=0,this.animationId=null,this.isRunning=!1}start(){if(this.isRunning)return;this.isRunning=!0;const e=()=>{this.isRunning&&(this.pulseTime+=c.PULSE_SPEED,this.updateAnimations(),this.animationId=requestAnimationFrame(e))};e()}stop(){this.isRunning=!1,this.animationId&&(cancelAnimationFrame(this.animationId),this.animationId=null)}updateAnimations(){try{this.updateVectorPulse(),this.updateInputVectorFloat(),this.updateForceLineAnimation()}catch(e){console.warn("Animation update error:",e)}}updateVectorPulse(){const e=this.framework.getState(),t=this.pulseTime;this.svg.selectAll(".vector-atom circle").each((function(n){const i=window.d3.select(this),r=n.id===e.selectedVectorId?4:2,a=.3*Math.sin(t+(n.id||0))+1;i.attr("stroke-width",r+.5*a)}))}updateInputVectorFloat(){const e=this.framework.getState();if(e.inputVector){const t=Math.sin(this.pulseTime*c.FLOAT_SPEED_Y)*c.FLOAT_AMPLITUDE_Y,n=Math.cos(this.pulseTime*c.FLOAT_SPEED_X)*c.FLOAT_AMPLITUDE_X;this.svg.select(".input-vector").attr("transform",`translate(${e.inputVector.x+n}, ${e.inputVector.y+t})`)}}updateForceLineAnimation(){const e=this.pulseTime;this.svg.selectAll(".force-line").style("opacity",(function(t){const n=window.d3.select(this);if(n.empty())return.6;const i=parseFloat(n.attr("data-base-opacity")||.6),r=.2*Math.sin(e*c.FORCE_PULSE_SPEED)+1;return Math.min(1,i*r)}))}restart(){this.stop(),setTimeout((()=>this.start()),100)}}class b{constructor(e){this.framework=e,this.state={vectors:[],inputVector:null,selectedVectorId:null}}getVectors(){return this.state.vectors}getInputVector(){return this.state.inputVector}getSelectedVector(){return null===this.state.selectedVectorId?null:this.state.vectors.find((e=>e.id===this.state.selectedVectorId))}generateVectors(){this.state.vectors=[];const e=this.framework.getConfig();for(let t=0;t<e.numVectors;t++){const n={id:t,components:[],x:Math.random()*(e.width-160)+80,y:Math.random()*(e.height-160)+80};for(let t=0;t<e.dimensions;t++)n.components.push(2*(Math.random()-.5));this.state.vectors.push(n)}this.state.selectedVectorId=null,this.state.inputVector=null,this.framework.notify("stateChanged",{fullRender:!0,reason:"vectorsGenerated"})}selectVector(e){this.state.selectedVectorId===e?this.state.selectedVectorId=null:this.state.selectedVectorId=e,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorSelected"})}addInputVector(){const e=this.framework.getConfig(),t={id:"input",components:[],x:Math.random()*(e.width-100)+50,y:Math.random()*(e.height-100)+50,isInput:!0};for(let n=0;n<e.dimensions;n++)t.components.push(2*(Math.random()-.5));this.state.inputVector=t,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorAdded"})}removeInputVector(){this.state.inputVector=null,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorRemoved"})}randomizeInputVector(e){if(this.state.inputVector){for(let e=0;e<this.state.inputVector.components.length;e++)this.state.inputVector.components[e]=2*(Math.random()-.5);this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorRandomized"}),e&&e(this.state.inputVector.components)}}updateInputVectorComponent(e,t){this.state.inputVector&&(this.state.inputVector.components[e]=t,this.framework.notify("stateChanged",{fullRender:!1,reason:"inputVectorComponentUpdated"}))}removeVector(e){this.state.vectors=this.state.vectors.filter((t=>t.id!==e)),this.state.selectedVectorId===e&&(this.state.selectedVectorId=null),this.framework.notify("stateChanged",{fullRender:!0,reason:"vectorRemoved"})}setVectorCustomColor(e,t){const n=this.state.vectors.find((t=>t.id===e));n&&(n.customColor=t,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorColorChanged"}))}setVectorScale(e,t){const n=this.state.vectors.find((t=>t.id===e));n&&(n.scale=t,this.framework.notify("stateChanged",{fullRender:!1,reason:"vectorScaleChanged"}))}addCustomVector(e){const t=this.framework.getConfig(),n={id:this.state.vectors.length,components:e,x:Math.random()*(t.width-160)+80,y:Math.random()*(t.height-160)+80,isCustom:!0};this.state.vectors.push(n),this.framework.updateConfig("numVectors",this.state.vectors.length),this.framework.notify("stateChanged",{fullRender:!0,reason:"customVectorAdded"})}}class _{constructor(){this.listeners={}}on(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}off(e,t){this.listeners[e]&&(this.listeners[e]=this.listeners[e].filter((e=>e!==t)))}emit(e,t){this.listeners[e]&&this.listeners[e].forEach((e=>e(t)))}}class y{constructor(){this.config={width:800,height:600,dimensions:4,numVectors:6,showForces:!1}}getConfig(){return this.config}updateConfig(e,t){this.config[e]=t}}class M{constructor(e){this.framework=e}initialize(){document.addEventListener("keydown",(e=>this.handleKeyPress(e)))}handleKeyPress(e){if(!document.querySelector(".input-editor-modal"))switch(e.code){case"Space":e.preventDefault(),this.framework.stateManager.generateVectors();break;case"KeyF":e.preventDefault(),this.framework.updateConfig("showForces",!this.framework.getConfig().showForces);break;case"KeyI":e.preventDefault(),this.framework.addInputVector()}}}class S{constructor(e={}){this.options={dim:2,perplexity:30,earlyExaggeration:4,learningRate:100,nIter:500,metric:"euclidean",...e}}async run(e){return console.log("Running t-SNE with options:",this.options),e.map((e=>[e[0]||0,e[1]||0])).map((e=>[e[0]+.1*(Math.random()-.5),e[1]+.1*(Math.random()-.5)]))}}class w{constructor(e){this.framework=e}async performPCA(e,t=2){const n=this.vectorsToMatrix(e),i=this.centerMatrix(n);this.covarianceMatrix(i);const r=[];for(let a=0;a<t;a++){const e=Array(n[0].length).fill(0);e[a]=1,r.push(e)}return{type:"pca",data:i.map((e=>e.slice(0,t))),components:r,explainedVariance:Array(t).fill(1/t),originalVectors:e,timestamp:Date.now()}}async performTSNE(e,t={}){const n=new S(t),i=this.vectorsToMatrix(e);return{type:"tsne",data:await n.run(i),parameters:t,originalVectors:e,timestamp:Date.now()}}async performKMeans(e,t=3){let n=this.initializeCentroids(e,t),i=new Array(e.length),r=!1,a=0,s=[];for(;!r&&a<50;)i=e.map((e=>this.findNearestCentroid(e.components,n))),n=this.updateCentroids(e,i,t),r=this.arraysEqual(i,s),s=[...i],a++;const o=.5+.5*Math.random(),l=Math.random(),c=Array.from({length:t},(()=>({size:0,points:[]})));return i.forEach(((t,n)=>{c[t].size++,c[t].points.push(e[n])})),{type:"kmeans",data:{clusters:c,assignments:i,centroids:n,k:t,iterations:a,converged:r,silhouetteScore:o,inertia:l},originalVectors:e,timestamp:Date.now()}}vectorsToMatrix(e){return e.map((e=>e.components))}centerMatrix(e){if(0===e.length)return[];const t=e[0].map(((t,n)=>e.reduce(((e,t)=>e+t[n]),0)/e.length));return e.map((e=>e.map(((e,n)=>e-t[n]))))}initializeCentroids(e,t){const n=[];for(let i=0;i<t;i++)n.push(e[i%e.length].components);return n}findNearestCentroid(e,t){let n=1/0,i=0;return t.forEach(((t,r)=>{const a=this.euclideanDistance(e,t);a<n&&(n=a,i=r)})),i}updateCentroids(e,t,n){const i=Array.from({length:n},(()=>Array(e[0].components.length).fill(0))),r=Array(n).fill(0);return e.forEach(((e,n)=>{const a=t[n];r[a]++,e.components.forEach(((e,t)=>i[a][t]+=e))})),i.map(((t,n)=>r[n]>0?t.map((e=>e/r[n])):e[n%e.length].components))}euclideanDistance(e,t){return Math.sqrt(e.reduce(((e,n,i)=>e+(n-t[i])**2),0))}covarianceMatrix(e){const t=e.length,n=e[0].length,i=Array.from({length:n},(()=>Array(n).fill(0)));for(let r=0;r<n;r++)for(let a=0;a<n;a++){let n=0;for(let i=0;i<t;i++)n+=e[i][r]*e[i][a];i[r][a]=n/(t-1)}return i}arraysEqual(e,t){if(!e||!t||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}}
/**
       * @license
       * Copyright 2010-2023 Three.js Authors
       * SPDX-License-Identifier: MIT
       */const E="159",T=0,A=1,C=2,R=100,z=101,L=102,P=200,k=201,D=202,I=203,U=204,N=205,O=206,F=207,B=208,V=209,H=210,G=211,W=212,X=213,q=214,j=301,$=302,Y=306,K=1e3,Z=1001,J=1002,Q=1003,ee=1004,te=1005,ne=1006,ie=1007,re=1008,ae=1009,se=1012,oe=1013,le=1014,ce=1015,de=1016,he=1020,ue=1023,pe=1026,me=1027,fe=33776,ge=33777,ve=33778,xe=33779,be=36492,_e=3001,ye="",Me="srgb",Se="srgb-linear",we="display-p3",Ee="display-p3-linear",Te="linear",Ae="srgb",Ce="rec709",Re="p3",ze=7680,Le=512,Pe=513,ke=514,De=515,Ie=516,Ue=517,Ne=518,Oe=519,Fe="300 es",Be=1035,Ve=2e3,He=2001;class Ge{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}hasEventListener(e,t){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[e]&&-1!==n[e].indexOf(t)}removeEventListener(e,t){if(void 0===this._listeners)return;const n=this._listeners[e];if(void 0!==n){const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;const t=this._listeners[e.type];if(void 0!==t){e.target=this;const n=t.slice(0);for(let t=0,i=n.length;t<i;t++)n[t].call(this,e);e.target=null}}}const We=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],Xe=Math.PI/180,qe=180/Math.PI;function je(){const e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(We[255&e]+We[e>>8&255]+We[e>>16&255]+We[e>>24&255]+"-"+We[255&t]+We[t>>8&255]+"-"+We[t>>16&15|64]+We[t>>24&255]+"-"+We[63&n|128]+We[n>>8&255]+"-"+We[n>>16&255]+We[n>>24&255]+We[255&i]+We[i>>8&255]+We[i>>16&255]+We[i>>24&255]).toLowerCase()}function $e(e,t,n){return Math.max(t,Math.min(n,e))}function Ye(e,t,n){return(1-n)*e+n*t}function Ke(e){return!(e&e-1)&&0!==e}function Ze(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}function Je(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return e/4294967295;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int32Array:return Math.max(e/2147483647,-1);case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function Qe(e,t){switch(t.constructor){case Float32Array:return e;case Uint32Array:return Math.round(4294967295*e);case Uint16Array:return Math.round(65535*e);case Uint8Array:return Math.round(255*e);case Int32Array:return Math.round(2147483647*e);case Int16Array:return Math.round(32767*e);case Int8Array:return Math.round(127*e);default:throw new Error("Invalid component type.")}}class et{constructor(e=0,t=0){et.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos($e(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),r=this.x-e.x,a=this.y-e.y;return this.x=r*n-a*i+e.x,this.y=r*i+a*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class tt{constructor(e,t,n,i,r,a,s,o,l){tt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==e&&this.set(e,t,n,i,r,a,s,o,l)}set(e,t,n,i,r,a,s,o,l){const c=this.elements;return c[0]=e,c[1]=i,c[2]=s,c[3]=t,c[4]=r,c[5]=o,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],s=n[3],o=n[6],l=n[1],c=n[4],d=n[7],h=n[2],u=n[5],p=n[8],m=i[0],f=i[3],g=i[6],v=i[1],x=i[4],b=i[7],_=i[2],y=i[5],M=i[8];return r[0]=a*m+s*v+o*_,r[3]=a*f+s*x+o*y,r[6]=a*g+s*b+o*M,r[1]=l*m+c*v+d*_,r[4]=l*f+c*x+d*y,r[7]=l*g+c*b+d*M,r[2]=h*m+u*v+p*_,r[5]=h*f+u*x+p*y,r[8]=h*g+u*b+p*M,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],c=e[8];return t*a*c-t*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],c=e[8],d=c*a-s*l,h=s*o-c*r,u=l*r-a*o,p=t*d+n*h+i*u;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return e[0]=d*m,e[1]=(i*l-c*n)*m,e[2]=(s*n-i*a)*m,e[3]=h*m,e[4]=(c*t-i*o)*m,e[5]=(i*r-s*t)*m,e[6]=u*m,e[7]=(n*o-l*t)*m,e[8]=(a*t-n*r)*m,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,r,a,s){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*a+l*s)+a+e,-i*l,i*o,-i*(-l*a+o*s)+s+t,0,0,1),this}scale(e,t){return this.premultiply(nt.makeScale(e,t)),this}rotate(e){return this.premultiply(nt.makeRotation(-e)),this}translate(e,t){return this.premultiply(nt.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}}const nt=new tt;function it(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}function rt(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function at(){const e=rt("canvas");return e.style.display="block",e}const st={};function ot(e){e in st||(st[e]=!0,console.warn(e))}const lt=(new tt).set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),ct=(new tt).set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),dt={[Se]:{transfer:Te,primaries:Ce,toReference:e=>e,fromReference:e=>e},[Me]:{transfer:Ae,primaries:Ce,toReference:e=>e.convertSRGBToLinear(),fromReference:e=>e.convertLinearToSRGB()},[Ee]:{transfer:Te,primaries:Re,toReference:e=>e.applyMatrix3(ct),fromReference:e=>e.applyMatrix3(lt)},[we]:{transfer:Ae,primaries:Re,toReference:e=>e.convertSRGBToLinear().applyMatrix3(ct),fromReference:e=>e.applyMatrix3(lt).convertLinearToSRGB()}},ht=new Set([Se,Ee]),ut={enabled:!0,_workingColorSpace:Se,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(e){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!e},get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(e){if(!ht.has(e))throw new Error(`Unsupported working color space, "${e}".`);this._workingColorSpace=e},convert:function(e,t,n){if(!1===this.enabled||t===n||!t||!n)return e;const i=dt[t].toReference;return(0,dt[n].fromReference)(i(e))},fromWorkingColorSpace:function(e,t){return this.convert(e,this._workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this._workingColorSpace)},getPrimaries:function(e){return dt[e].primaries},getTransfer:function(e){return e===ye?Te:dt[e].transfer}};function pt(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function mt(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}let ft;class gt{static getDataURL(e){if(/^data:/i.test(e.src))return e.src;if("undefined"==typeof HTMLCanvasElement)return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{void 0===ft&&(ft=rt("canvas")),ft.width=e.width,ft.height=e.height;const n=ft.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=ft}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const t=rt("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let e=0;e<r.length;e++)r[e]=255*pt(r[e]/255);return n.putImageData(i,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*pt(t[e]/255)):t[e]=pt(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let vt=0;class xt{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:vt++}),this.uuid=je(),this.data=e,this.version=0}set needsUpdate(e){!0===e&&this.version++}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.images[this.uuid])return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let e;if(Array.isArray(i)){e=[];for(let t=0,n=i.length;t<n;t++)i[t].isDataTexture?e.push(bt(i[t].image)):e.push(bt(i[t]))}else e=bt(i);n.url=e}return t||(e.images[this.uuid]=n),n}}function bt(e){return"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap?gt.getDataURL(e):e.data?{data:Array.from(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let _t=0;class yt extends Ge{constructor(e=yt.DEFAULT_IMAGE,t=yt.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,s=1023,o=1009,l=yt.DEFAULT_ANISOTROPY,c=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:_t++}),this.uuid=je(),this.name="",this.source=new xt(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new et(0,0),this.repeat=new et(1,1),this.center=new et(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new tt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,"string"==typeof c?this.colorSpace=c:(ot("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=c===_e?Me:ye),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case K:e.x=e.x-Math.floor(e.x);break;case Z:e.x=e.x<0?0:1;break;case J:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case K:e.y=e.y-Math.floor(e.y);break;case Z:e.y=e.y<0?0:1;break;case J:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return ot("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===Me?_e:3e3}set encoding(e){ot("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=e===_e?Me:ye}}yt.DEFAULT_IMAGE=null,yt.DEFAULT_MAPPING=300,yt.DEFAULT_ANISOTROPY=1;class Mt{constructor(e=0,t=0,n=0,i=1){Mt.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=this.w,a=e.elements;return this.x=a[0]*t+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*t+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*t+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*t+a[7]*n+a[11]*i+a[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,r;const a=.01,s=.1,o=e.elements,l=o[0],c=o[4],d=o[8],h=o[1],u=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-h)<a&&Math.abs(d-m)<a&&Math.abs(p-f)<a){if(Math.abs(c+h)<s&&Math.abs(d+m)<s&&Math.abs(p+f)<s&&Math.abs(l+u+g-3)<s)return this.set(1,0,0,0),this;t=Math.PI;const e=(l+1)/2,o=(u+1)/2,v=(g+1)/2,x=(c+h)/4,b=(d+m)/4,_=(p+f)/4;return e>o&&e>v?e<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(e),i=x/n,r=b/n):o>v?o<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=x/i,r=_/i):v<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=b/r,i=_/r),this.set(n,i,r,t),this}let v=Math.sqrt((f-p)*(f-p)+(d-m)*(d-m)+(h-c)*(h-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(d-m)/v,this.z=(h-c)/v,this.w=Math.acos((l+u+g-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class St extends Ge{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new Mt(0,0,e,t),this.scissorTest=!1,this.viewport=new Mt(0,0,e,t);const i={width:e,height:t,depth:1};void 0!==n.encoding&&(ot("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),n.colorSpace=n.encoding===_e?Me:ye),n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ne,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},n),this.texture=new yt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps,this.texture.internalFormat=n.internalFormat,this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}setSize(e,t,n=1){this.width===e&&this.height===t&&this.depth===n||(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new xt(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,null!==e.depthTexture&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class wt extends St{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class Et extends yt{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Q,this.minFilter=Q,this.wrapR=Z,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Tt extends yt{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Q,this.minFilter=Q,this.wrapR=Z,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class At{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],d=n[i+3];const h=r[a+0],u=r[a+1],p=r[a+2],m=r[a+3];if(0===s)return e[t+0]=o,e[t+1]=l,e[t+2]=c,void(e[t+3]=d);if(1===s)return e[t+0]=h,e[t+1]=u,e[t+2]=p,void(e[t+3]=m);if(d!==m||o!==h||l!==u||c!==p){let e=1-s;const t=o*h+l*u+c*p+d*m,n=t>=0?1:-1,i=1-t*t;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,t*n);e=Math.sin(e*a)/r,s=Math.sin(s*a)/r}const r=s*n;if(o=o*e+h*r,l=l*e+u*r,c=c*e+p*r,d=d*e+m*r,e===1-s){const e=1/Math.sqrt(o*o+l*l+c*c+d*d);o*=e,l*=e,c*=e,d*=e}}e[t]=o,e[t+1]=l,e[t+2]=c,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,i,r,a){const s=n[i],o=n[i+1],l=n[i+2],c=n[i+3],d=r[a],h=r[a+1],u=r[a+2],p=r[a+3];return e[t]=s*p+c*d+o*u-l*h,e[t+1]=o*p+c*h+l*d-s*u,e[t+2]=l*p+c*u+s*h-o*d,e[t+3]=c*p-s*d-o*h-l*u,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){const n=e._x,i=e._y,r=e._z,a=e._order,s=Math.cos,o=Math.sin,l=s(n/2),c=s(i/2),d=s(r/2),h=o(n/2),u=o(i/2),p=o(r/2);switch(a){case"XYZ":this._x=h*c*d+l*u*p,this._y=l*u*d-h*c*p,this._z=l*c*p+h*u*d,this._w=l*c*d-h*u*p;break;case"YXZ":this._x=h*c*d+l*u*p,this._y=l*u*d-h*c*p,this._z=l*c*p-h*u*d,this._w=l*c*d+h*u*p;break;case"ZXY":this._x=h*c*d-l*u*p,this._y=l*u*d+h*c*p,this._z=l*c*p+h*u*d,this._w=l*c*d-h*u*p;break;case"ZYX":this._x=h*c*d-l*u*p,this._y=l*u*d+h*c*p,this._z=l*c*p-h*u*d,this._w=l*c*d+h*u*p;break;case"YZX":this._x=h*c*d+l*u*p,this._y=l*u*d+h*c*p,this._z=l*c*p-h*u*d,this._w=l*c*d-h*u*p;break;case"XZY":this._x=h*c*d-l*u*p,this._y=l*u*d-h*c*p,this._z=l*c*p+h*u*d,this._w=l*c*d+h*u*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!1!==t&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],a=t[1],s=t[5],o=t[9],l=t[2],c=t[6],d=t[10],h=n+s+d;if(h>0){const e=.5/Math.sqrt(h+1);this._w=.25/e,this._x=(c-o)*e,this._y=(r-l)*e,this._z=(a-i)*e}else if(n>s&&n>d){const e=2*Math.sqrt(1+n-s-d);this._w=(c-o)/e,this._x=.25*e,this._y=(i+a)/e,this._z=(r+l)/e}else if(s>d){const e=2*Math.sqrt(1+s-n-d);this._w=(r-l)/e,this._x=(i+a)/e,this._y=.25*e,this._z=(o+c)/e}else{const e=2*Math.sqrt(1+d-n-s);this._w=(a-i)/e,this._x=(r+l)/e,this._y=(o+c)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs($e(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(0===n)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,r=e._z,a=e._w,s=t._x,o=t._y,l=t._z,c=t._w;return this._x=n*c+a*s+i*l-r*o,this._y=i*c+a*o+r*s-n*l,this._z=r*c+a*l+n*o-i*s,this._w=a*c-n*s-i*o-r*l,this._onChangeCallback(),this}slerp(e,t){if(0===t)return this;if(1===t)return this.copy(e);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*e._w+n*e._x+i*e._y+r*e._z;if(s<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,s=-s):this.copy(e),s>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const o=1-s*s;if(o<=Number.EPSILON){const e=1-t;return this._w=e*a+t*this._w,this._x=e*n+t*this._x,this._y=e*i+t*this._y,this._z=e*r+t*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,s),d=Math.sin((1-t)*c)/l,h=Math.sin(t*c)/l;return this._w=a*d+this._w*h,this._x=n*d+this._x*h,this._y=i*d+this._y*h,this._z=r*d+this._z*h,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(i),n*Math.sin(r),n*Math.cos(r),t*Math.sin(i))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Ct{constructor(e=0,t=0,n=0){Ct.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return void 0===n&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(zt.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(zt.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,a=e.y,s=e.z,o=e.w,l=2*(a*i-s*n),c=2*(s*t-r*i),d=2*(r*n-a*t);return this.x=t+o*l+a*d-s*c,this.y=n+o*c+s*l-r*d,this.z=i+o*d+r*c-a*l,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[4]*n+r[8]*i,this.y=r[1]*t+r[5]*n+r[9]*i,this.z=r[2]*t+r[6]*n+r[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,a=t.x,s=t.y,o=t.z;return this.x=i*o-r*s,this.y=r*a-n*o,this.z=n*s-i*a,this}projectOnVector(e){const t=e.lengthSq();if(0===t)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Rt.copy(this).projectOnVector(e),this.sub(Rt)}reflect(e){return this.sub(Rt.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(0===t)return Math.PI/2;const n=this.dot(e)/t;return Math.acos($e(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,3*t)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=2*(Math.random()-.5),t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Rt=new Ct,zt=new At;class Lt{constructor(e=new Ct(1/0,1/0,1/0),t=new Ct(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(kt.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(kt.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=kt.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(void 0!==n){const i=n.getAttribute("position");if(!0===t&&void 0!==i&&!0!==e.isInstancedMesh)for(let t=0,n=i.count;t<n;t++)!0===e.isMesh?e.getVertexPosition(t,kt):kt.fromBufferAttribute(i,t),kt.applyMatrix4(e.matrixWorld),this.expandByPoint(kt);else void 0!==e.boundingBox?(null===e.boundingBox&&e.computeBoundingBox(),Dt.copy(e.boundingBox)):(null===n.boundingBox&&n.computeBoundingBox(),Dt.copy(n.boundingBox)),Dt.applyMatrix4(e.matrixWorld),this.union(Dt)}const i=e.children;for(let r=0,a=i.length;r<a;r++)this.expandByObject(i[r],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,kt),kt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Vt),Ht.subVectors(this.max,Vt),It.subVectors(e.a,Vt),Ut.subVectors(e.b,Vt),Nt.subVectors(e.c,Vt),Ot.subVectors(Ut,It),Ft.subVectors(Nt,Ut),Bt.subVectors(It,Nt);let t=[0,-Ot.z,Ot.y,0,-Ft.z,Ft.y,0,-Bt.z,Bt.y,Ot.z,0,-Ot.x,Ft.z,0,-Ft.x,Bt.z,0,-Bt.x,-Ot.y,Ot.x,0,-Ft.y,Ft.x,0,-Bt.y,Bt.x,0];return!!Xt(t,It,Ut,Nt,Ht)&&(t=[1,0,0,0,1,0,0,0,1],!!Xt(t,It,Ut,Nt,Ht)&&(Gt.crossVectors(Ot,Ft),t=[Gt.x,Gt.y,Gt.z],Xt(t,It,Ut,Nt,Ht)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,kt).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=.5*this.getSize(kt).length()),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()||(Pt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),Pt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),Pt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),Pt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),Pt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),Pt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),Pt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),Pt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(Pt)),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const Pt=[new Ct,new Ct,new Ct,new Ct,new Ct,new Ct,new Ct,new Ct],kt=new Ct,Dt=new Lt,It=new Ct,Ut=new Ct,Nt=new Ct,Ot=new Ct,Ft=new Ct,Bt=new Ct,Vt=new Ct,Ht=new Ct,Gt=new Ct,Wt=new Ct;function Xt(e,t,n,i,r){for(let a=0,s=e.length-3;a<=s;a+=3){Wt.fromArray(e,a);const s=r.x*Math.abs(Wt.x)+r.y*Math.abs(Wt.y)+r.z*Math.abs(Wt.z),o=t.dot(Wt),l=n.dot(Wt),c=i.dot(Wt);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s)return!1}return!0}const qt=new Lt,jt=new Ct,$t=new Ct;class Yt{constructor(e=new Ct,t=-1){this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;void 0!==t?n.copy(t):qt.setFromPoints(e).getCenter(n);let i=0;for(let r=0,a=e.length;r<a;r++)i=Math.max(i,n.distanceToSquared(e[r]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;jt.subVectors(e,this.center);const t=jt.lengthSq();if(t>this.radius*this.radius){const e=Math.sqrt(t),n=.5*(e-this.radius);this.center.addScaledVector(jt,n/e),this.radius+=n}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(!0===this.center.equals(e.center)?this.radius=Math.max(this.radius,e.radius):($t.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(jt.copy(e.center).add($t)),this.expandByPoint(jt.copy(e.center).sub($t))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Kt=new Ct,Zt=new Ct,Jt=new Ct,Qt=new Ct,en=new Ct,tn=new Ct,nn=new Ct;class rn{constructor(e=new Ct,t=new Ct(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,Kt)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=Kt.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(Kt.copy(this.origin).addScaledVector(this.direction,t),Kt.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Zt.copy(e).add(t).multiplyScalar(.5),Jt.copy(t).sub(e).normalize(),Qt.copy(this.origin).sub(Zt);const r=.5*e.distanceTo(t),a=-this.direction.dot(Jt),s=Qt.dot(this.direction),o=-Qt.dot(Jt),l=Qt.lengthSq(),c=Math.abs(1-a*a);let d,h,u,p;if(c>0)if(d=a*o-s,h=a*s-o,p=r*c,d>=0)if(h>=-p)if(h<=p){const e=1/c;d*=e,h*=e,u=d*(d+a*h+2*s)+h*(a*d+h+2*o)+l}else h=r,d=Math.max(0,-(a*h+s)),u=-d*d+h*(h+2*o)+l;else h=-r,d=Math.max(0,-(a*h+s)),u=-d*d+h*(h+2*o)+l;else h<=-p?(d=Math.max(0,-(-a*r+s)),h=d>0?-r:Math.min(Math.max(-r,-o),r),u=-d*d+h*(h+2*o)+l):h<=p?(d=0,h=Math.min(Math.max(-r,-o),r),u=h*(h+2*o)+l):(d=Math.max(0,-(a*r+s)),h=d>0?r:Math.min(Math.max(-r,-o),r),u=-d*d+h*(h+2*o)+l);else h=a>0?-r:r,d=Math.max(0,-(a*h+s)),u=-d*d+h*(h+2*o)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,d),i&&i.copy(Zt).addScaledVector(Jt,h),u}intersectSphere(e,t){Kt.subVectors(e.center,this.origin);const n=Kt.dot(this.direction),i=Kt.dot(Kt)-n*n,r=e.radius*e.radius;if(i>r)return null;const a=Math.sqrt(r-i),s=n-a,o=n+a;return o<0?null:s<0?this.at(o,t):this.at(s,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return null===n?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,d=1/this.direction.z,h=this.origin;return l>=0?(n=(e.min.x-h.x)*l,i=(e.max.x-h.x)*l):(n=(e.max.x-h.x)*l,i=(e.min.x-h.x)*l),c>=0?(r=(e.min.y-h.y)*c,a=(e.max.y-h.y)*c):(r=(e.max.y-h.y)*c,a=(e.min.y-h.y)*c),n>a||r>i?null:((r>n||isNaN(n))&&(n=r),(a<i||isNaN(i))&&(i=a),d>=0?(s=(e.min.z-h.z)*d,o=(e.max.z-h.z)*d):(s=(e.max.z-h.z)*d,o=(e.min.z-h.z)*d),n>o||s>i?null:((s>n||n!=n)&&(n=s),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,t)))}intersectsBox(e){return null!==this.intersectBox(e,Kt)}intersectTriangle(e,t,n,i,r){en.subVectors(t,e),tn.subVectors(n,e),nn.crossVectors(en,tn);let a,s=this.direction.dot(nn);if(s>0){if(i)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}Qt.subVectors(this.origin,e);const o=a*this.direction.dot(tn.crossVectors(Qt,tn));if(o<0)return null;const l=a*this.direction.dot(en.cross(Qt));if(l<0)return null;if(o+l>s)return null;const c=-a*Qt.dot(nn);return c<0?null:this.at(c/s,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class an{constructor(e,t,n,i,r,a,s,o,l,c,d,h,u,p,m,f){an.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==e&&this.set(e,t,n,i,r,a,s,o,l,c,d,h,u,p,m,f)}set(e,t,n,i,r,a,s,o,l,c,d,h,u,p,m,f){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=c,g[10]=d,g[14]=h,g[3]=u,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new an).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/sn.setFromMatrixColumn(e,0).length(),r=1/sn.setFromMatrixColumn(e,1).length(),a=1/sn.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,r=e.z,a=Math.cos(n),s=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),d=Math.sin(r);if("XYZ"===e.order){const e=a*c,n=a*d,i=s*c,r=s*d;t[0]=o*c,t[4]=-o*d,t[8]=l,t[1]=n+i*l,t[5]=e-r*l,t[9]=-s*o,t[2]=r-e*l,t[6]=i+n*l,t[10]=a*o}else if("YXZ"===e.order){const e=o*c,n=o*d,i=l*c,r=l*d;t[0]=e+r*s,t[4]=i*s-n,t[8]=a*l,t[1]=a*d,t[5]=a*c,t[9]=-s,t[2]=n*s-i,t[6]=r+e*s,t[10]=a*o}else if("ZXY"===e.order){const e=o*c,n=o*d,i=l*c,r=l*d;t[0]=e-r*s,t[4]=-a*d,t[8]=i+n*s,t[1]=n+i*s,t[5]=a*c,t[9]=r-e*s,t[2]=-a*l,t[6]=s,t[10]=a*o}else if("ZYX"===e.order){const e=a*c,n=a*d,i=s*c,r=s*d;t[0]=o*c,t[4]=i*l-n,t[8]=e*l+r,t[1]=o*d,t[5]=r*l+e,t[9]=n*l-i,t[2]=-l,t[6]=s*o,t[10]=a*o}else if("YZX"===e.order){const e=a*o,n=a*l,i=s*o,r=s*l;t[0]=o*c,t[4]=r-e*d,t[8]=i*d+n,t[1]=d,t[5]=a*c,t[9]=-s*c,t[2]=-l*c,t[6]=n*d+i,t[10]=e-r*d}else if("XZY"===e.order){const e=a*o,n=a*l,i=s*o,r=s*l;t[0]=o*c,t[4]=-d,t[8]=l*c,t[1]=e*d+r,t[5]=a*c,t[9]=n*d-i,t[2]=i*d-n,t[6]=s*c,t[10]=r*d+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(ln,e,cn)}lookAt(e,t,n){const i=this.elements;return un.subVectors(e,t),0===un.lengthSq()&&(un.z=1),un.normalize(),dn.crossVectors(n,un),0===dn.lengthSq()&&(1===Math.abs(n.z)?un.x+=1e-4:un.z+=1e-4,un.normalize(),dn.crossVectors(n,un)),dn.normalize(),hn.crossVectors(un,dn),i[0]=dn.x,i[4]=hn.x,i[8]=un.x,i[1]=dn.y,i[5]=hn.y,i[9]=un.y,i[2]=dn.z,i[6]=hn.z,i[10]=un.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],s=n[4],o=n[8],l=n[12],c=n[1],d=n[5],h=n[9],u=n[13],p=n[2],m=n[6],f=n[10],g=n[14],v=n[3],x=n[7],b=n[11],_=n[15],y=i[0],M=i[4],S=i[8],w=i[12],E=i[1],T=i[5],A=i[9],C=i[13],R=i[2],z=i[6],L=i[10],P=i[14],k=i[3],D=i[7],I=i[11],U=i[15];return r[0]=a*y+s*E+o*R+l*k,r[4]=a*M+s*T+o*z+l*D,r[8]=a*S+s*A+o*L+l*I,r[12]=a*w+s*C+o*P+l*U,r[1]=c*y+d*E+h*R+u*k,r[5]=c*M+d*T+h*z+u*D,r[9]=c*S+d*A+h*L+u*I,r[13]=c*w+d*C+h*P+u*U,r[2]=p*y+m*E+f*R+g*k,r[6]=p*M+m*T+f*z+g*D,r[10]=p*S+m*A+f*L+g*I,r[14]=p*w+m*C+f*P+g*U,r[3]=v*y+x*E+b*R+_*k,r[7]=v*M+x*T+b*z+_*D,r[11]=v*S+x*A+b*L+_*I,r[15]=v*w+x*C+b*P+_*U,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],a=e[1],s=e[5],o=e[9],l=e[13],c=e[2],d=e[6],h=e[10],u=e[14];return e[3]*(+r*o*d-i*l*d-r*s*h+n*l*h+i*s*u-n*o*u)+e[7]*(+t*o*u-t*l*h+r*a*h-i*a*u+i*l*c-r*o*c)+e[11]*(+t*l*d-t*s*u-r*a*d+n*a*u+r*s*c-n*l*c)+e[15]*(-i*s*c-t*o*d+t*s*h+i*a*d-n*a*h+n*o*c)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],s=e[5],o=e[6],l=e[7],c=e[8],d=e[9],h=e[10],u=e[11],p=e[12],m=e[13],f=e[14],g=e[15],v=d*f*l-m*h*l+m*o*u-s*f*u-d*o*g+s*h*g,x=p*h*l-c*f*l-p*o*u+a*f*u+c*o*g-a*h*g,b=c*m*l-p*d*l+p*s*u-a*m*u-c*s*g+a*d*g,_=p*d*o-c*m*o-p*s*h+a*m*h+c*s*f-a*d*f,y=t*v+n*x+i*b+r*_;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/y;return e[0]=v*M,e[1]=(m*h*r-d*f*r-m*i*u+n*f*u+d*i*g-n*h*g)*M,e[2]=(s*f*r-m*o*r+m*i*l-n*f*l-s*i*g+n*o*g)*M,e[3]=(d*o*r-s*h*r-d*i*l+n*h*l+s*i*u-n*o*u)*M,e[4]=x*M,e[5]=(c*f*r-p*h*r+p*i*u-t*f*u-c*i*g+t*h*g)*M,e[6]=(p*o*r-a*f*r-p*i*l+t*f*l+a*i*g-t*o*g)*M,e[7]=(a*h*r-c*o*r+c*i*l-t*h*l-a*i*u+t*o*u)*M,e[8]=b*M,e[9]=(p*d*r-c*m*r-p*n*u+t*m*u+c*n*g-t*d*g)*M,e[10]=(a*m*r-p*s*r+p*n*l-t*m*l-a*n*g+t*s*g)*M,e[11]=(c*s*r-a*d*r-c*n*l+t*d*l+a*n*u-t*s*u)*M,e[12]=_*M,e[13]=(c*m*i-p*d*i+p*n*h-t*m*h-c*n*f+t*d*f)*M,e[14]=(p*s*i-a*m*i-p*n*o+t*m*o+a*n*f-t*s*f)*M,e[15]=(a*d*i-c*s*i+c*n*o-t*d*o-a*n*h+t*s*h)*M,this}scale(e){const t=this.elements,n=e.x,i=e.y,r=e.z;return t[0]*=n,t[4]*=i,t[8]*=r,t[1]*=n,t[5]*=i,t[9]*=r,t[2]*=n,t[6]*=i,t[10]*=r,t[3]*=n,t[7]*=i,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),r=1-n,a=e.x,s=e.y,o=e.z,l=r*a,c=r*s;return this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,r,a){return this.set(1,n,r,0,e,1,a,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,r=t._x,a=t._y,s=t._z,o=t._w,l=r+r,c=a+a,d=s+s,h=r*l,u=r*c,p=r*d,m=a*c,f=a*d,g=s*d,v=o*l,x=o*c,b=o*d,_=n.x,y=n.y,M=n.z;return i[0]=(1-(m+g))*_,i[1]=(u+b)*_,i[2]=(p-x)*_,i[3]=0,i[4]=(u-b)*y,i[5]=(1-(h+g))*y,i[6]=(f+v)*y,i[7]=0,i[8]=(p+x)*M,i[9]=(f-v)*M,i[10]=(1-(h+m))*M,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let r=sn.set(i[0],i[1],i[2]).length();const a=sn.set(i[4],i[5],i[6]).length(),s=sn.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),e.x=i[12],e.y=i[13],e.z=i[14],on.copy(this);const o=1/r,l=1/a,c=1/s;return on.elements[0]*=o,on.elements[1]*=o,on.elements[2]*=o,on.elements[4]*=l,on.elements[5]*=l,on.elements[6]*=l,on.elements[8]*=c,on.elements[9]*=c,on.elements[10]*=c,t.setFromRotationMatrix(on),n.x=r,n.y=a,n.z=s,this}makePerspective(e,t,n,i,r,a,s=2e3){const o=this.elements,l=2*r/(t-e),c=2*r/(n-i),d=(t+e)/(t-e),h=(n+i)/(n-i);let u,p;if(s===Ve)u=-(a+r)/(a-r),p=-2*a*r/(a-r);else{if(s!==He)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);u=-a/(a-r),p=-a*r/(a-r)}return o[0]=l,o[4]=0,o[8]=d,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,r,a,s=2e3){const o=this.elements,l=1/(t-e),c=1/(n-i),d=1/(a-r),h=(t+e)*l,u=(n+i)*c;let p,m;if(s===Ve)p=(a+r)*d,m=-2*d;else{if(s!==He)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);p=r*d,m=-1*d}return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=m,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const sn=new Ct,on=new an,ln=new Ct(0,0,0),cn=new Ct(1,1,1),dn=new Ct,hn=new Ct,un=new Ct,pn=new an,mn=new At;class fn{constructor(e=0,t=0,n=0,i=fn.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,r=i[0],a=i[4],s=i[8],o=i[1],l=i[5],c=i[9],d=i[2],h=i[6],u=i[10];switch(t){case"XYZ":this._y=Math.asin($e(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,u),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(h,l),this._z=0);break;case"YXZ":this._x=Math.asin(-$e(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(s,u),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-d,r),this._z=0);break;case"ZXY":this._x=Math.asin($e(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-d,u),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-$e(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(h,u),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin($e(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-d,r)):(this._x=0,this._y=Math.atan2(s,u));break;case"XZY":this._z=Math.asin(-$e(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(h,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-c,u),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,!0===n&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return pn.makeRotationFromQuaternion(e),this.setFromRotationMatrix(pn,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return mn.setFromEuler(this),this.setFromQuaternion(mn,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}fn.DEFAULT_ORDER="XYZ";class gn{constructor(){this.mask=1}set(e){this.mask=1<<e>>>0}enable(e){this.mask|=1<<e}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e}disable(e){this.mask&=~(1<<e)}disableAll(){this.mask=0}test(e){return 0!==(this.mask&e.mask)}isEnabled(e){return!!(this.mask&1<<e)}}let vn=0;const xn=new Ct,bn=new At,_n=new an,yn=new Ct,Mn=new Ct,Sn=new Ct,wn=new At,En=new Ct(1,0,0),Tn=new Ct(0,1,0),An=new Ct(0,0,1),Cn={type:"added"},Rn={type:"removed"};class zn extends Ge{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:vn++}),this.uuid=je(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=zn.DEFAULT_UP.clone();const e=new Ct,t=new fn,n=new At,i=new Ct(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new an},normalMatrix:{value:new tt}}),this.matrix=new an,this.matrixWorld=new an,this.matrixAutoUpdate=zn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=zn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new gn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return bn.setFromAxisAngle(e,t),this.quaternion.multiply(bn),this}rotateOnWorldAxis(e,t){return bn.setFromAxisAngle(e,t),this.quaternion.premultiply(bn),this}rotateX(e){return this.rotateOnAxis(En,e)}rotateY(e){return this.rotateOnAxis(Tn,e)}rotateZ(e){return this.rotateOnAxis(An,e)}translateOnAxis(e,t){return xn.copy(e).applyQuaternion(this.quaternion),this.position.add(xn.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(En,e)}translateY(e){return this.translateOnAxis(Tn,e)}translateZ(e){return this.translateOnAxis(An,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(_n.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?yn.copy(e):yn.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Mn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?_n.lookAt(Mn,yn,this.up):_n.lookAt(yn,Mn,this.up),this.quaternion.setFromRotationMatrix(_n),i&&(_n.extractRotation(i.matrixWorld),bn.setFromRotationMatrix(_n),this.quaternion.premultiply(bn.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(Cn)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return-1!==t&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(Rn)),this}removeFromParent(){const e=this.parent;return null!==e&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),_n.copy(this.matrixWorld).invert(),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),_n.multiply(e.parent.matrixWorld)),e.applyMatrix4(_n),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(e,t);if(void 0!==i)return i}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let r=0,a=i.length;r<a;r++)i[r].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mn,e,Sn),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Mn,wn,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++){const i=t[n];!0!==i.matrixWorldAutoUpdate&&!0!==e||i.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const n=this.parent;if(!0===e&&null!==n&&!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const e=this.children;for(let t=0,n=e.length;t<n;t++){const n=e[t];!0===n.matrixWorldAutoUpdate&&n.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=void 0===e||"string"==typeof e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function r(t,n){return void 0===t[n.uuid]&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((e=>({boxInitialized:e.boxInitialized,boxMin:e.box.min.toArray(),boxMax:e.box.max.toArray(),sphereInitialized:e.sphereInitialized,sphereRadius:e.sphere.radius,sphereCenter:e.sphere.center.toArray()}))),i.maxGeometryCount=this._maxGeometryCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(e),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(e.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const n=t.shapes;if(Array.isArray(n))for(let t=0,i=n.length;t<i;t++){const i=n[t];r(e.shapes,i)}else r(e.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let n=0,i=this.material.length;n<i;n++)t.push(r(e.materials,this.material[n]));i.material=t}else i.material=r(e.materials,this.material);if(this.children.length>0){i.children=[];for(let t=0;t<this.children.length;t++)i.children.push(this.children[t].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let t=0;t<this.animations.length;t++){const n=this.animations[t];i.animations.push(r(e.animations,n))}}if(t){const t=a(e.geometries),i=a(e.materials),r=a(e.textures),s=a(e.images),o=a(e.shapes),l=a(e.skeletons),c=a(e.animations),d=a(e.nodes);t.length>0&&(n.geometries=t),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),s.length>0&&(n.images=s),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),d.length>0&&(n.nodes=d)}return n.object=i,n;function a(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(let n=0;n<e.children.length;n++){const t=e.children[n];this.add(t.clone())}return this}}zn.DEFAULT_UP=new Ct(0,1,0),zn.DEFAULT_MATRIX_AUTO_UPDATE=!0,zn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ln=new Ct,Pn=new Ct,kn=new Ct,Dn=new Ct,In=new Ct,Un=new Ct,Nn=new Ct,On=new Ct,Fn=new Ct,Bn=new Ct;let Vn=!1;class Hn{constructor(e=new Ct,t=new Ct,n=new Ct){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Ln.subVectors(e,t),i.cross(Ln);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(e,t,n,i,r){Ln.subVectors(i,t),Pn.subVectors(n,t),kn.subVectors(e,t);const a=Ln.dot(Ln),s=Ln.dot(Pn),o=Ln.dot(kn),l=Pn.dot(Pn),c=Pn.dot(kn),d=a*l-s*s;if(0===d)return r.set(-2,-1,-1);const h=1/d,u=(l*o-s*c)*h,p=(a*c-s*o)*h;return r.set(1-u-p,p,u)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,Dn),Dn.x>=0&&Dn.y>=0&&Dn.x+Dn.y<=1}static getUV(e,t,n,i,r,a,s,o){return!1===Vn&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Vn=!0),this.getInterpolation(e,t,n,i,r,a,s,o)}static getInterpolation(e,t,n,i,r,a,s,o){return this.getBarycoord(e,t,n,i,Dn),o.setScalar(0),o.addScaledVector(r,Dn.x),o.addScaledVector(a,Dn.y),o.addScaledVector(s,Dn.z),o}static isFrontFacing(e,t,n,i){return Ln.subVectors(n,t),Pn.subVectors(e,t),Ln.cross(Pn).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Ln.subVectors(this.c,this.b),Pn.subVectors(this.a,this.b),.5*Ln.cross(Pn).length()}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Hn.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Hn.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,i,r){return!1===Vn&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Vn=!0),Hn.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}getInterpolation(e,t,n,i,r){return Hn.getInterpolation(e,this.a,this.b,this.c,t,n,i,r)}containsPoint(e){return Hn.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Hn.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,r=this.c;let a,s;In.subVectors(i,n),Un.subVectors(r,n),On.subVectors(e,n);const o=In.dot(On),l=Un.dot(On);if(o<=0&&l<=0)return t.copy(n);Fn.subVectors(e,i);const c=In.dot(Fn),d=Un.dot(Fn);if(c>=0&&d<=c)return t.copy(i);const h=o*d-c*l;if(h<=0&&o>=0&&c<=0)return a=o/(o-c),t.copy(n).addScaledVector(In,a);Bn.subVectors(e,r);const u=In.dot(Bn),p=Un.dot(Bn);if(p>=0&&u<=p)return t.copy(r);const m=u*l-o*p;if(m<=0&&l>=0&&p<=0)return s=l/(l-p),t.copy(n).addScaledVector(Un,s);const f=c*p-u*d;if(f<=0&&d-c>=0&&u-p>=0)return Nn.subVectors(r,i),s=(d-c)/(d-c+(u-p)),t.copy(i).addScaledVector(Nn,s);const g=1/(f+m+h);return a=m*g,s=h*g,t.copy(n).addScaledVector(In,a).addScaledVector(Un,s)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const Gn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Wn={h:0,s:0,l:0},Xn={h:0,s:0,l:0};function qn(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+6*(t-e)*(2/3-n):e}class jn{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(void 0===t&&void 0===n){const t=e;t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Me){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,ut.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=ut.workingColorSpace){return this.r=e,this.g=t,this.b=n,ut.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=ut.workingColorSpace){var r;if(e=(e%(r=1)+r)%r,t=$e(t,0,1),n=$e(n,0,1),0===t)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+t):n+t-n*t,r=2*n-i;this.r=qn(r,i,e+1/3),this.g=qn(r,i,e),this.b=qn(r,i,e-1/3)}return ut.toWorkingColorSpace(this,i),this}setStyle(e,t=Me){function n(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const a=i[1],s=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,t);if(6===r)return this.setHex(parseInt(n,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Me){const n=Gn[e.toLowerCase()];return void 0!==n?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=pt(e.r),this.g=pt(e.g),this.b=pt(e.b),this}copyLinearToSRGB(e){return this.r=mt(e.r),this.g=mt(e.g),this.b=mt(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Me){return ut.fromWorkingColorSpace($n.copy(this),e),65536*Math.round($e(255*$n.r,0,255))+256*Math.round($e(255*$n.g,0,255))+Math.round($e(255*$n.b,0,255))}getHexString(e=Me){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=ut.workingColorSpace){ut.fromWorkingColorSpace($n.copy(this),t);const n=$n.r,i=$n.g,r=$n.b,a=Math.max(n,i,r),s=Math.min(n,i,r);let o,l;const c=(s+a)/2;if(s===a)o=0,l=0;else{const e=a-s;switch(l=c<=.5?e/(a+s):e/(2-a-s),a){case n:o=(i-r)/e+(i<r?6:0);break;case i:o=(r-n)/e+2;break;case r:o=(n-i)/e+4}o/=6}return e.h=o,e.s=l,e.l=c,e}getRGB(e,t=ut.workingColorSpace){return ut.fromWorkingColorSpace($n.copy(this),t),e.r=$n.r,e.g=$n.g,e.b=$n.b,e}getStyle(e=Me){ut.fromWorkingColorSpace($n.copy(this),e);const t=$n.r,n=$n.g,i=$n.b;return e!==Me?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*t)},${Math.round(255*n)},${Math.round(255*i)})`}offsetHSL(e,t,n){return this.getHSL(Wn),this.setHSL(Wn.h+e,Wn.s+t,Wn.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(Wn),e.getHSL(Xn);const n=Ye(Wn.h,Xn.h,t),i=Ye(Wn.s,Xn.s,t),r=Ye(Wn.l,Xn.l,t);return this.setHSL(n,i,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,r=e.elements;return this.r=r[0]*t+r[3]*n+r[6]*i,this.g=r[1]*t+r[4]*n+r[7]*i,this.b=r[2]*t+r[5]*n+r[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const $n=new jn;jn.NAMES=Gn;let Yn=0;class Kn extends Ge{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Yn++}),this.uuid=je(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=R,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new jn(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=ze,this.stencilZFail=ze,this.stencilZPass=ze,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`)}}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(e){const t=[];for(const n in e){const i=e[n];delete i.metadata,t.push(i)}return t}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),void 0!==this.anisotropy&&(n.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),!0===this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=!0),204!==this.blendSrc&&(n.blendSrc=this.blendSrc),205!==this.blendDst&&(n.blendDst=this.blendDst),this.blendEquation!==R&&(n.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(n.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(n.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(n.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(n.depthFunc=this.depthFunc),!1===this.depthTest&&(n.depthTest=this.depthTest),!1===this.depthWrite&&(n.depthWrite=this.depthWrite),!1===this.colorWrite&&(n.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(n.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(n.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(n.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==ze&&(n.stencilFail=this.stencilFail),this.stencilZFail!==ze&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==ze&&(n.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(n.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaHash&&(n.alphaHash=!0),!0===this.alphaToCoverage&&(n.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=!0),!0===this.forceSinglePass&&(n.forceSinglePass=!0),!0===this.wireframe&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),t){const t=i(e.textures),r=i(e.images);t.length>0&&(n.textures=t),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(null!==t){const e=t.length;n=new Array(e);for(let i=0;i!==e;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}}class Zn extends Kn{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new jn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const Jn=new Ct,Qn=new et;class ei{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=n,this.usage=35044,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=ce,this.version=0}onUploadCallback(){}set needsUpdate(e){!0===e&&this.version++}get updateRange(){return console.warn('THREE.BufferAttribute: "updateRange" is deprecated and removed in r169. Use "addUpdateRange()" instead.'),this._updateRange}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(2===this.itemSize)for(let t=0,n=this.count;t<n;t++)Qn.fromBufferAttribute(this,t),Qn.applyMatrix3(e),this.setXY(t,Qn.x,Qn.y);else if(3===this.itemSize)for(let t=0,n=this.count;t<n;t++)Jn.fromBufferAttribute(this,t),Jn.applyMatrix3(e),this.setXYZ(t,Jn.x,Jn.y,Jn.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Jn.fromBufferAttribute(this,t),Jn.applyMatrix4(e),this.setXYZ(t,Jn.x,Jn.y,Jn.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Jn.fromBufferAttribute(this,t),Jn.applyNormalMatrix(e),this.setXYZ(t,Jn.x,Jn.y,Jn.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Jn.fromBufferAttribute(this,t),Jn.transformDirection(e),this.setXYZ(t,Jn.x,Jn.y,Jn.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=Je(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=Qe(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Je(t,this.array)),t}setX(e,t){return this.normalized&&(t=Qe(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Je(t,this.array)),t}setY(e,t){return this.normalized&&(t=Qe(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Je(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Qe(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Je(t,this.array)),t}setW(e,t){return this.normalized&&(t=Qe(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=Qe(t,this.array),n=Qe(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=Qe(t,this.array),n=Qe(n,this.array),i=Qe(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,r){return e*=this.itemSize,this.normalized&&(t=Qe(t,this.array),n=Qe(n,this.array),i=Qe(i,this.array),r=Qe(r,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(e.name=this.name),35044!==this.usage&&(e.usage=this.usage),e}}class ti extends ei{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class ni extends ei{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class ii extends ei{constructor(e,t,n){super(new Float32Array(e),t,n)}}let ri=0;const ai=new an,si=new zn,oi=new Ct,li=new Lt,ci=new Lt,di=new Ct;class hi extends Ge{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:ri++}),this.uuid=je(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(it(e)?ni:ti)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return void 0!==this.attributes[e]}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;void 0!==t&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const t=(new tt).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(e),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(e){return ai.makeRotationFromQuaternion(e),this.applyMatrix4(ai),this}rotateX(e){return ai.makeRotationX(e),this.applyMatrix4(ai),this}rotateY(e){return ai.makeRotationY(e),this.applyMatrix4(ai),this}rotateZ(e){return ai.makeRotationZ(e),this.applyMatrix4(ai),this}translate(e,t,n){return ai.makeTranslation(e,t,n),this.applyMatrix4(ai),this}scale(e,t,n){return ai.makeScale(e,t,n),this.applyMatrix4(ai),this}lookAt(e){return si.lookAt(e),si.updateMatrix(),this.applyMatrix4(si.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(oi).negate(),this.translate(oi.x,oi.y,oi.z),this}setFromPoints(e){const t=[];for(let n=0,i=e.length;n<i;n++){const i=e[n];t.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new ii(t,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Lt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Ct(-1/0,-1/0,-1/0),new Ct(1/0,1/0,1/0));if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const e=t[n];li.setFromBufferAttribute(e),this.morphTargetsRelative?(di.addVectors(this.boundingBox.min,li.min),this.boundingBox.expandByPoint(di),di.addVectors(this.boundingBox.max,li.max),this.boundingBox.expandByPoint(di)):(this.boundingBox.expandByPoint(li.min),this.boundingBox.expandByPoint(li.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Yt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Ct,1/0);if(e){const n=this.boundingSphere.center;if(li.setFromBufferAttribute(e),t)for(let e=0,r=t.length;e<r;e++){const n=t[e];ci.setFromBufferAttribute(n),this.morphTargetsRelative?(di.addVectors(li.min,ci.min),li.expandByPoint(di),di.addVectors(li.max,ci.max),li.expandByPoint(di)):(li.expandByPoint(ci.min),li.expandByPoint(ci.max))}li.getCenter(n);let i=0;for(let t=0,r=e.count;t<r;t++)di.fromBufferAttribute(e,t),i=Math.max(i,n.distanceToSquared(di));if(t)for(let r=0,a=t.length;r<a;r++){const a=t[r],s=this.morphTargetsRelative;for(let t=0,r=a.count;t<r;t++)di.fromBufferAttribute(a,t),s&&(oi.fromBufferAttribute(e,t),di.add(oi)),i=Math.max(i,n.distanceToSquared(di))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(null===e||void 0===t.position||void 0===t.normal||void 0===t.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.array,i=t.position.array,r=t.normal.array,a=t.uv.array,s=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new ei(new Float32Array(4*s),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let E=0;E<s;E++)l[E]=new Ct,c[E]=new Ct;const d=new Ct,h=new Ct,u=new Ct,p=new et,m=new et,f=new et,g=new Ct,v=new Ct;function x(e,t,n){d.fromArray(i,3*e),h.fromArray(i,3*t),u.fromArray(i,3*n),p.fromArray(a,2*e),m.fromArray(a,2*t),f.fromArray(a,2*n),h.sub(d),u.sub(d),m.sub(p),f.sub(p);const r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(h).multiplyScalar(f.y).addScaledVector(u,-m.y).multiplyScalar(r),v.copy(u).multiplyScalar(m.x).addScaledVector(h,-f.x).multiplyScalar(r),l[e].add(g),l[t].add(g),l[n].add(g),c[e].add(v),c[t].add(v),c[n].add(v))}let b=this.groups;0===b.length&&(b=[{start:0,count:n.length}]);for(let E=0,T=b.length;E<T;++E){const e=b[E],t=e.start;for(let i=t,r=t+e.count;i<r;i+=3)x(n[i+0],n[i+1],n[i+2])}const _=new Ct,y=new Ct,M=new Ct,S=new Ct;function w(e){M.fromArray(r,3*e),S.copy(M);const t=l[e];_.copy(t),_.sub(M.multiplyScalar(M.dot(t))).normalize(),y.crossVectors(S,t);const n=y.dot(c[e])<0?-1:1;o[4*e]=_.x,o[4*e+1]=_.y,o[4*e+2]=_.z,o[4*e+3]=n}for(let E=0,T=b.length;E<T;++E){const e=b[E],t=e.start;for(let i=t,r=t+e.count;i<r;i+=3)w(n[i+0]),w(n[i+1]),w(n[i+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(void 0!==t){let n=this.getAttribute("normal");if(void 0===n)n=new ei(new Float32Array(3*t.count),3),this.setAttribute("normal",n);else for(let e=0,t=n.count;e<t;e++)n.setXYZ(e,0,0,0);const i=new Ct,r=new Ct,a=new Ct,s=new Ct,o=new Ct,l=new Ct,c=new Ct,d=new Ct;if(e)for(let h=0,u=e.count;h<u;h+=3){const u=e.getX(h+0),p=e.getX(h+1),m=e.getX(h+2);i.fromBufferAttribute(t,u),r.fromBufferAttribute(t,p),a.fromBufferAttribute(t,m),c.subVectors(a,r),d.subVectors(i,r),c.cross(d),s.fromBufferAttribute(n,u),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,m),s.add(c),o.add(c),l.add(c),n.setXYZ(u,s.x,s.y,s.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let e=0,h=t.count;e<h;e+=3)i.fromBufferAttribute(t,e+0),r.fromBufferAttribute(t,e+1),a.fromBufferAttribute(t,e+2),c.subVectors(a,r),d.subVectors(i,r),c.cross(d),n.setXYZ(e+0,c.x,c.y,c.z),n.setXYZ(e+1,c.x,c.y,c.z),n.setXYZ(e+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)di.fromBufferAttribute(e,t),di.normalize(),e.setXYZ(t,di.x,di.y,di.z)}toNonIndexed(){function e(e,t){const n=e.array,i=e.itemSize,r=e.normalized,a=new n.constructor(t.length*i);let s=0,o=0;for(let l=0,c=t.length;l<c;l++){s=e.isInterleavedBufferAttribute?t[l]*e.data.stride+e.offset:t[l]*i;for(let e=0;e<i;e++)a[o++]=n[s++]}return new ei(a,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new hi,n=this.index.array,i=this.attributes;for(const s in i){const r=e(i[s],n);t.setAttribute(s,r)}const r=this.morphAttributes;for(const s in r){const i=[],a=r[s];for(let t=0,r=a.length;t<r;t++){const r=e(a[t],n);i.push(r)}t.morphAttributes[s]=i}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let s=0,o=a.length;s<o;s++){const e=a[s];t.addGroup(e.start,e.count,e.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const n in t)void 0!==t[n]&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;null!==t&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const o in n){const t=n[o];e.data.attributes[o]=t.toJSON(e.data)}const i={};let r=!1;for(const o in this.morphAttributes){const t=this.morphAttributes[o],n=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];n.push(r.toJSON(e.data))}n.length>0&&(i[o]=n,r=!0)}r&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const s=this.boundingSphere;return null!==s&&(e.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;null!==n&&this.setIndex(n.clone(t));const i=e.attributes;for(const l in i){const e=i[l];this.setAttribute(l,e.clone(t))}const r=e.morphAttributes;for(const l in r){const e=[],n=r[l];for(let i=0,r=n.length;i<r;i++)e.push(n[i].clone(t));this.morphAttributes[l]=e}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let l=0,c=a.length;l<c;l++){const e=a[l];this.addGroup(e.start,e.count,e.materialIndex)}const s=e.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=e.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const ui=new an,pi=new rn,mi=new Yt,fi=new Ct,gi=new Ct,vi=new Ct,xi=new Ct,bi=new Ct,_i=new Ct,yi=new et,Mi=new et,Si=new et,wi=new Ct,Ei=new Ct,Ti=new Ct,Ai=new Ct,Ci=new Ct;class Ri extends zn{constructor(e=new hi,t=new Zn){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const s=this.morphTargetInfluences;if(r&&s){_i.set(0,0,0);for(let n=0,i=r.length;n<i;n++){const i=s[n],o=r[n];0!==i&&(bi.fromBufferAttribute(o,e),a?_i.addScaledVector(bi,i):_i.addScaledVector(bi.sub(t),i))}t.add(_i)}return t}raycast(e,t){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0!==i){if(null===n.boundingSphere&&n.computeBoundingSphere(),mi.copy(n.boundingSphere),mi.applyMatrix4(r),pi.copy(e.ray).recast(e.near),!1===mi.containsPoint(pi.origin)){if(null===pi.intersectSphere(mi,fi))return;if(pi.origin.distanceToSquared(fi)>(e.far-e.near)**2)return}ui.copy(r).invert(),pi.copy(e.ray).applyMatrix4(ui),null!==n.boundingBox&&!1===pi.intersectsBox(n.boundingBox)||this._computeIntersections(e,t,pi)}}_computeIntersections(e,t,n){let i;const r=this.geometry,a=this.material,s=r.index,o=r.attributes.position,l=r.attributes.uv,c=r.attributes.uv1,d=r.attributes.normal,h=r.groups,u=r.drawRange;if(null!==s)if(Array.isArray(a))for(let p=0,m=h.length;p<m;p++){const r=h[p],o=a[r.materialIndex];for(let a=Math.max(r.start,u.start),h=Math.min(s.count,Math.min(r.start+r.count,u.start+u.count));a<h;a+=3)i=zi(this,o,e,n,l,c,d,s.getX(a),s.getX(a+1),s.getX(a+2)),i&&(i.faceIndex=Math.floor(a/3),i.face.materialIndex=r.materialIndex,t.push(i))}else for(let p=Math.max(0,u.start),m=Math.min(s.count,u.start+u.count);p<m;p+=3)i=zi(this,a,e,n,l,c,d,s.getX(p),s.getX(p+1),s.getX(p+2)),i&&(i.faceIndex=Math.floor(p/3),t.push(i));else if(void 0!==o)if(Array.isArray(a))for(let p=0,m=h.length;p<m;p++){const r=h[p],s=a[r.materialIndex];for(let a=Math.max(r.start,u.start),h=Math.min(o.count,Math.min(r.start+r.count,u.start+u.count));a<h;a+=3)i=zi(this,s,e,n,l,c,d,a,a+1,a+2),i&&(i.faceIndex=Math.floor(a/3),i.face.materialIndex=r.materialIndex,t.push(i))}else for(let p=Math.max(0,u.start),m=Math.min(o.count,u.start+u.count);p<m;p+=3)i=zi(this,a,e,n,l,c,d,p,p+1,p+2),i&&(i.faceIndex=Math.floor(p/3),t.push(i))}}function zi(e,t,n,i,r,a,s,o,l,c){e.getVertexPosition(o,gi),e.getVertexPosition(l,vi),e.getVertexPosition(c,xi);const d=function(e,t,n,i,r,a,s,o){let l;if(l=1===t.side?i.intersectTriangle(s,a,r,!0,o):i.intersectTriangle(r,a,s,0===t.side,o),null===l)return null;Ci.copy(o),Ci.applyMatrix4(e.matrixWorld);const c=n.ray.origin.distanceTo(Ci);return c<n.near||c>n.far?null:{distance:c,point:Ci.clone(),object:e}}(e,t,n,i,gi,vi,xi,Ai);if(d){r&&(yi.fromBufferAttribute(r,o),Mi.fromBufferAttribute(r,l),Si.fromBufferAttribute(r,c),d.uv=Hn.getInterpolation(Ai,gi,vi,xi,yi,Mi,Si,new et)),a&&(yi.fromBufferAttribute(a,o),Mi.fromBufferAttribute(a,l),Si.fromBufferAttribute(a,c),d.uv1=Hn.getInterpolation(Ai,gi,vi,xi,yi,Mi,Si,new et),d.uv2=d.uv1),s&&(wi.fromBufferAttribute(s,o),Ei.fromBufferAttribute(s,l),Ti.fromBufferAttribute(s,c),d.normal=Hn.getInterpolation(Ai,gi,vi,xi,wi,Ei,Ti,new Ct),d.normal.dot(i.direction)>0&&d.normal.multiplyScalar(-1));const e={a:o,b:l,c:c,normal:new Ct,materialIndex:0};Hn.getNormal(gi,vi,xi,e.normal),d.face=e}return d}class Li extends hi{constructor(e=1,t=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const o=[],l=[],c=[],d=[];let h=0,u=0;function p(e,t,n,i,r,a,p,m,f,g,v){const x=a/f,b=p/g,_=a/2,y=p/2,M=m/2,S=f+1,w=g+1;let E=0,T=0;const A=new Ct;for(let s=0;s<w;s++){const a=s*b-y;for(let o=0;o<S;o++){const h=o*x-_;A[e]=h*i,A[t]=a*r,A[n]=M,l.push(A.x,A.y,A.z),A[e]=0,A[t]=0,A[n]=m>0?1:-1,c.push(A.x,A.y,A.z),d.push(o/f),d.push(1-s/g),E+=1}}for(let s=0;s<g;s++)for(let e=0;e<f;e++){const t=h+e+S*s,n=h+e+S*(s+1),i=h+(e+1)+S*(s+1),r=h+(e+1)+S*s;o.push(t,n,r),o.push(n,i,r),T+=6}s.addGroup(u,T,v),u+=T,h+=E}p("z","y","x",-1,-1,n,t,e,a,r,0),p("z","y","x",1,-1,n,t,-e,a,r,1),p("x","z","y",1,1,e,n,t,i,a,2),p("x","z","y",1,-1,e,n,-t,i,a,3),p("x","y","z",1,-1,e,t,n,i,r,4),p("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new ii(l,3)),this.setAttribute("normal",new ii(c,3)),this.setAttribute("uv",new ii(d,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Li(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Pi(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const r=e[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[n][i]=null):t[n][i]=r.clone():Array.isArray(r)?t[n][i]=r.slice():t[n][i]=r}}return t}function ki(e){const t={};for(let n=0;n<e.length;n++){const i=Pi(e[n]);for(const e in i)t[e]=i[e]}return t}function Di(e){return null===e.getRenderTarget()?e.outputColorSpace:ut.workingColorSpace}const Ii={clone:Pi,merge:ki};class Ui extends Kn{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Pi(e.uniforms),this.uniformsGroups=function(e){const t=[];for(let n=0;n<e.length;n++)t.push(e[n].clone());return t}(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const n=this.uniforms[i].value;n&&n.isTexture?t.uniforms[i]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[i]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[i]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[i]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[i]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[i]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[i]={type:"m4",value:n.toArray()}:t.uniforms[i]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)!0===this.extensions[i]&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class Ni extends zn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new an,this.projectionMatrix=new an,this.projectionMatrixInverse=new an,this.coordinateSystem=Ve}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class Oi extends Ni{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=2*qe*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(.5*Xe*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return 2*qe*Math.atan(Math.tan(.5*Xe*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,i,r,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(.5*Xe*this.fov)/this.zoom,n=2*t,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const e=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/e,t-=a.offsetY*n/s,i*=a.width/e,n*=a.height/s}const s=this.filmOffset;0!==s&&(r+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Fi=-90;class Bi extends zn{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Oi(Fi,1,e,t);i.layers=this.layers,this.add(i);const r=new Oi(Fi,1,e,t);r.layers=this.layers,this.add(r);const a=new Oi(Fi,1,e,t);a.layers=this.layers,this.add(a);const s=new Oi(Fi,1,e,t);s.layers=this.layers,this.add(s);const o=new Oi(Fi,1,e,t);o.layers=this.layers,this.add(o);const l=new Oi(Fi,1,e,t);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,r,a,s,o]=t;for(const l of t)this.remove(l);if(e===Ve)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(e!==He)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const l of t)this.add(l),l.updateMatrixWorld()}update(e,t){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,a,s,o,l,c]=this.children,d=e.getRenderTarget(),h=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),p=e.xr.enabled;e.xr.enabled=!1;const m=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,r),e.setRenderTarget(n,1,i),e.render(t,a),e.setRenderTarget(n,2,i),e.render(t,s),e.setRenderTarget(n,3,i),e.render(t,o),e.setRenderTarget(n,4,i),e.render(t,l),n.texture.generateMipmaps=m,e.setRenderTarget(n,5,i),e.render(t,c),e.setRenderTarget(d,h,u),e.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class Vi extends yt{constructor(e,t,n,i,r,a,s,o,l,c){super(e=void 0!==e?e:[],t=void 0!==t?t:j,n,i,r,a,s,o,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class Hi extends wt{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];void 0!==t.encoding&&(ot("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=t.encoding===_e?Me:ye),this.texture=new Vi(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:ne}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},i=new Li(5,5,5),r=new Ui({name:"CubemapFromEquirect",uniforms:Pi(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});r.uniforms.tEquirect.value=t;const a=new Ri(i,r),s=t.minFilter;return t.minFilter===re&&(t.minFilter=ne),new Bi(1,10,this).update(e,a),t.minFilter=s,a.geometry.dispose(),a.material.dispose(),this}clear(e,t,n,i){const r=e.getRenderTarget();for(let a=0;a<6;a++)e.setRenderTarget(this,a),e.clear(t,n,i);e.setRenderTarget(r)}}const Gi=new Ct,Wi=new Ct,Xi=new tt;class qi{constructor(e=new Ct(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Gi.subVectors(n,t).cross(Wi.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Gi),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(e.start)?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:t.copy(e.start).addScaledVector(n,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||Xi.getNormalMatrix(e),i=this.coplanarPoint(Gi).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const ji=new Yt,$i=new Ct;class Yi{constructor(e=new qi,t=new qi,n=new qi,i=new qi,r=new qi,a=new qi){this.planes=[e,t,n,i,r,a]}set(e,t,n,i,r,a){const s=this.planes;return s[0].copy(e),s[1].copy(t),s[2].copy(n),s[3].copy(i),s[4].copy(r),s[5].copy(a),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=2e3){const n=this.planes,i=e.elements,r=i[0],a=i[1],s=i[2],o=i[3],l=i[4],c=i[5],d=i[6],h=i[7],u=i[8],p=i[9],m=i[10],f=i[11],g=i[12],v=i[13],x=i[14],b=i[15];if(n[0].setComponents(o-r,h-l,f-u,b-g).normalize(),n[1].setComponents(o+r,h+l,f+u,b+g).normalize(),n[2].setComponents(o+a,h+c,f+p,b+v).normalize(),n[3].setComponents(o-a,h-c,f-p,b-v).normalize(),n[4].setComponents(o-s,h-d,f-m,b-x).normalize(),t===Ve)n[5].setComponents(o+s,h+d,f+m,b+x).normalize();else{if(t!==He)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);n[5].setComponents(s,d,m,x).normalize()}return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),ji.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),ji.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ji)}intersectsSprite(e){return ji.center.set(0,0,0),ji.radius=.7071067811865476,ji.applyMatrix4(e.matrixWorld),this.intersectsSphere(ji)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if($i.x=i.normal.x>0?e.max.x:e.min.x,$i.y=i.normal.y>0?e.max.y:e.min.y,$i.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint($i)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Ki(){let e=null,t=!1,n=null,i=null;function r(t,a){n(t,a),i=e.requestAnimationFrame(r)}return{start:function(){!0!==t&&null!==n&&(i=e.requestAnimationFrame(r),t=!0)},stop:function(){e.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function Zi(e,t){const n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,r){if(t.isGLBufferAttribute){const e=i.get(t);return void((!e||e.version<t.version)&&i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const a=i.get(t);if(void 0===a)i.set(t,function(t,i){const r=t.array,a=t.usage,s=r.byteLength,o=e.createBuffer();let l;if(e.bindBuffer(i,o),e.bufferData(i,r,a),t.onUploadCallback(),r instanceof Float32Array)l=e.FLOAT;else if(r instanceof Uint16Array)if(t.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");l=e.HALF_FLOAT}else l=e.UNSIGNED_SHORT;else if(r instanceof Int16Array)l=e.SHORT;else if(r instanceof Uint32Array)l=e.UNSIGNED_INT;else if(r instanceof Int32Array)l=e.INT;else if(r instanceof Int8Array)l=e.BYTE;else if(r instanceof Uint8Array)l=e.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);l=e.UNSIGNED_BYTE}return{buffer:o,type:l,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version,size:s}}(t,r));else if(a.version<t.version){if(a.size!==t.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(t,i,r){const a=i.array,s=i._updateRange,o=i.updateRanges;if(e.bindBuffer(r,t),-1===s.count&&0===o.length&&e.bufferSubData(r,0,a),0!==o.length){for(let t=0,i=o.length;t<i;t++){const i=o[t];n?e.bufferSubData(r,i.start*a.BYTES_PER_ELEMENT,a,i.start,i.count):e.bufferSubData(r,i.start*a.BYTES_PER_ELEMENT,a.subarray(i.start,i.start+i.count))}i.clearUpdateRanges()}-1!==s.count&&(n?e.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count):e.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count)),s.count=-1),i.onUploadCallback()}(a.buffer,t,r),a.version=t.version}}}}class Ji extends hi{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,a=t/2,s=Math.floor(n),o=Math.floor(i),l=s+1,c=o+1,d=e/s,h=t/o,u=[],p=[],m=[],f=[];for(let g=0;g<c;g++){const e=g*h-a;for(let t=0;t<l;t++){const n=t*d-r;p.push(n,-e,0),m.push(0,0,1),f.push(t/s),f.push(1-g/o)}}for(let g=0;g<o;g++)for(let e=0;e<s;e++){const t=e+l*g,n=e+l*(g+1),i=e+1+l*(g+1),r=e+1+l*g;u.push(t,n,r),u.push(n,i,r)}this.setIndex(u),this.setAttribute("position",new ii(p,3)),this.setAttribute("normal",new ii(m,3)),this.setAttribute("uv",new ii(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ji(e.width,e.height,e.widthSegments,e.heightSegments)}}const Qi={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},er={common:{diffuse:{value:new jn(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new tt},alphaMap:{value:null},alphaMapTransform:{value:new tt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new tt}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new tt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new tt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new tt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new tt},normalScale:{value:new et(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new tt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new tt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new tt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new tt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new jn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new jn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new tt},alphaTest:{value:0},uvTransform:{value:new tt}},sprite:{diffuse:{value:new jn(16777215)},opacity:{value:1},center:{value:new et(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new tt},alphaMap:{value:null},alphaMapTransform:{value:new tt},alphaTest:{value:0}}},tr={basic:{uniforms:ki([er.common,er.specularmap,er.envmap,er.aomap,er.lightmap,er.fog]),vertexShader:Qi.meshbasic_vert,fragmentShader:Qi.meshbasic_frag},lambert:{uniforms:ki([er.common,er.specularmap,er.envmap,er.aomap,er.lightmap,er.emissivemap,er.bumpmap,er.normalmap,er.displacementmap,er.fog,er.lights,{emissive:{value:new jn(0)}}]),vertexShader:Qi.meshlambert_vert,fragmentShader:Qi.meshlambert_frag},phong:{uniforms:ki([er.common,er.specularmap,er.envmap,er.aomap,er.lightmap,er.emissivemap,er.bumpmap,er.normalmap,er.displacementmap,er.fog,er.lights,{emissive:{value:new jn(0)},specular:{value:new jn(1118481)},shininess:{value:30}}]),vertexShader:Qi.meshphong_vert,fragmentShader:Qi.meshphong_frag},standard:{uniforms:ki([er.common,er.envmap,er.aomap,er.lightmap,er.emissivemap,er.bumpmap,er.normalmap,er.displacementmap,er.roughnessmap,er.metalnessmap,er.fog,er.lights,{emissive:{value:new jn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Qi.meshphysical_vert,fragmentShader:Qi.meshphysical_frag},toon:{uniforms:ki([er.common,er.aomap,er.lightmap,er.emissivemap,er.bumpmap,er.normalmap,er.displacementmap,er.gradientmap,er.fog,er.lights,{emissive:{value:new jn(0)}}]),vertexShader:Qi.meshtoon_vert,fragmentShader:Qi.meshtoon_frag},matcap:{uniforms:ki([er.common,er.bumpmap,er.normalmap,er.displacementmap,er.fog,{matcap:{value:null}}]),vertexShader:Qi.meshmatcap_vert,fragmentShader:Qi.meshmatcap_frag},points:{uniforms:ki([er.points,er.fog]),vertexShader:Qi.points_vert,fragmentShader:Qi.points_frag},dashed:{uniforms:ki([er.common,er.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Qi.linedashed_vert,fragmentShader:Qi.linedashed_frag},depth:{uniforms:ki([er.common,er.displacementmap]),vertexShader:Qi.depth_vert,fragmentShader:Qi.depth_frag},normal:{uniforms:ki([er.common,er.bumpmap,er.normalmap,er.displacementmap,{opacity:{value:1}}]),vertexShader:Qi.meshnormal_vert,fragmentShader:Qi.meshnormal_frag},sprite:{uniforms:ki([er.sprite,er.fog]),vertexShader:Qi.sprite_vert,fragmentShader:Qi.sprite_frag},background:{uniforms:{uvTransform:{value:new tt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Qi.background_vert,fragmentShader:Qi.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Qi.backgroundCube_vert,fragmentShader:Qi.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Qi.cube_vert,fragmentShader:Qi.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Qi.equirect_vert,fragmentShader:Qi.equirect_frag},distanceRGBA:{uniforms:ki([er.common,er.displacementmap,{referencePosition:{value:new Ct},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Qi.distanceRGBA_vert,fragmentShader:Qi.distanceRGBA_frag},shadow:{uniforms:ki([er.lights,er.fog,{color:{value:new jn(0)},opacity:{value:1}}]),vertexShader:Qi.shadow_vert,fragmentShader:Qi.shadow_frag}};tr.physical={uniforms:ki([tr.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new tt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new tt},clearcoatNormalScale:{value:new et(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new tt},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new tt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new tt},sheen:{value:0},sheenColor:{value:new jn(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new tt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new tt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new tt},transmissionSamplerSize:{value:new et},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new tt},attenuationDistance:{value:0},attenuationColor:{value:new jn(0)},specularColor:{value:new jn(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new tt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new tt},anisotropyVector:{value:new et},anisotropyMap:{value:null},anisotropyMapTransform:{value:new tt}}]),vertexShader:Qi.meshphysical_vert,fragmentShader:Qi.meshphysical_frag};const nr={r:0,b:0,g:0};function ir(e,t,n,i,r,a,s){const o=new jn(0);let l,c,d=!0===a?0:1,h=null,u=0,p=null;function m(t,n){t.getRGB(nr,Di(e)),i.buffers.color.setClear(nr.r,nr.g,nr.b,n,s)}return{getClearColor:function(){return o},setClearColor:function(e,t=1){o.set(e),d=t,m(o,d)},getClearAlpha:function(){return d},setClearAlpha:function(e){d=e,m(o,d)},render:function(a,f){let g=!1,v=!0===f.isScene?f.background:null;v&&v.isTexture&&(v=(f.backgroundBlurriness>0?n:t).get(v)),null===v?m(o,d):v&&v.isColor&&(m(v,1),g=!0);const x=e.xr.getEnvironmentBlendMode();"additive"===x?i.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===x&&i.buffers.color.setClear(0,0,0,0,s),(e.autoClear||g)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),v&&(v.isCubeTexture||v.mapping===Y)?(void 0===c&&(c=new Ri(new Li(1,1,1),new Ui({name:"BackgroundCubeMaterial",uniforms:Pi(tr.backgroundCube.uniforms),vertexShader:tr.backgroundCube.vertexShader,fragmentShader:tr.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(c)),c.material.uniforms.envMap.value=v,c.material.uniforms.flipEnvMap.value=v.isCubeTexture&&!1===v.isRenderTargetTexture?-1:1,c.material.uniforms.backgroundBlurriness.value=f.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,c.material.toneMapped=ut.getTransfer(v.colorSpace)!==Ae,h===v&&u===v.version&&p===e.toneMapping||(c.material.needsUpdate=!0,h=v,u=v.version,p=e.toneMapping),c.layers.enableAll(),a.unshift(c,c.geometry,c.material,0,0,null)):v&&v.isTexture&&(void 0===l&&(l=new Ri(new Ji(2,2),new Ui({name:"BackgroundMaterial",uniforms:Pi(tr.background.uniforms),vertexShader:tr.background.vertexShader,fragmentShader:tr.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(l)),l.material.uniforms.t2D.value=v,l.material.uniforms.backgroundIntensity.value=f.backgroundIntensity,l.material.toneMapped=ut.getTransfer(v.colorSpace)!==Ae,!0===v.matrixAutoUpdate&&v.updateMatrix(),l.material.uniforms.uvTransform.value.copy(v.matrix),h===v&&u===v.version&&p===e.toneMapping||(l.material.needsUpdate=!0,h=v,u=v.version,p=e.toneMapping),l.layers.enableAll(),a.unshift(l,l.geometry,l.material,0,0,null))}}}function rr(e,t,n,i){const r=e.getParameter(e.MAX_VERTEX_ATTRIBS),a=i.isWebGL2?null:t.get("OES_vertex_array_object"),s=i.isWebGL2||null!==a,o={},l=p(null);let c=l,d=!1;function h(t){return i.isWebGL2?e.bindVertexArray(t):a.bindVertexArrayOES(t)}function u(t){return i.isWebGL2?e.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function p(e){const t=[],n=[],i=[];for(let a=0;a<r;a++)t[a]=0,n[a]=0,i[a]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function m(){const e=c.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function f(e){g(e,0)}function g(n,r){const a=c.newAttributes,s=c.enabledAttributes,o=c.attributeDivisors;a[n]=1,0===s[n]&&(e.enableVertexAttribArray(n),s[n]=1),o[n]!==r&&((i.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),o[n]=r)}function v(){const t=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function x(t,n,i,r,a,s,o){!0===o?e.vertexAttribIPointer(t,n,i,a,s):e.vertexAttribPointer(t,n,i,r,a,s)}function b(){_(),d=!0,c!==l&&(c=l,h(c.object))}function _(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,u,b,_){let y=!1;if(s){const t=function(t,n,r){const s=!0===r.wireframe;let l=o[t.id];void 0===l&&(l={},o[t.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let d=c[s];return void 0===d&&(d=p(i.isWebGL2?e.createVertexArray():a.createVertexArrayOES()),c[s]=d),d}(b,u,l);c!==t&&(c=t,h(c.object)),y=function(e,t,n,i){const r=c.attributes,a=t.attributes;let s=0;const o=n.getAttributes();for(const l in o)if(o[l].location>=0){const t=r[l];let n=a[l];if(void 0===n&&("instanceMatrix"===l&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(n=e.instanceColor)),void 0===t)return!0;if(t.attribute!==n)return!0;if(n&&t.data!==n.data)return!0;s++}return c.attributesNum!==s||c.index!==i}(r,b,u,_),y&&function(e,t,n,i){const r={},a=t.attributes;let s=0;const o=n.getAttributes();for(const l in o)if(o[l].location>=0){let t=a[l];void 0===t&&("instanceMatrix"===l&&e.instanceMatrix&&(t=e.instanceMatrix),"instanceColor"===l&&e.instanceColor&&(t=e.instanceColor));const n={};n.attribute=t,t&&t.data&&(n.data=t.data),r[l]=n,s++}c.attributes=r,c.attributesNum=s,c.index=i}(r,b,u,_)}else{const e=!0===l.wireframe;c.geometry===b.id&&c.program===u.id&&c.wireframe===e||(c.geometry=b.id,c.program=u.id,c.wireframe=e,y=!0)}null!==_&&n.update(_,e.ELEMENT_ARRAY_BUFFER),(y||d)&&(d=!1,function(r,a,s,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;m();const l=o.attributes,c=s.getAttributes(),d=a.defaultAttributeValues;for(const t in c){const a=c[t];if(a.location>=0){let s=l[t];if(void 0===s&&("instanceMatrix"===t&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===t&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const t=s.normalized,l=s.itemSize,c=n.get(s);if(void 0===c)continue;const d=c.buffer,h=c.type,u=c.bytesPerElement,p=!0===i.isWebGL2&&(h===e.INT||h===e.UNSIGNED_INT||s.gpuType===oe);if(s.isInterleavedBufferAttribute){const n=s.data,i=n.stride,c=s.offset;if(n.isInstancedInterleavedBuffer){for(let e=0;e<a.locationSize;e++)g(a.location+e,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,d);for(let e=0;e<a.locationSize;e++)x(a.location+e,l/a.locationSize,h,t,i*u,(c+l/a.locationSize*e)*u,p)}else{if(s.isInstancedBufferAttribute){for(let e=0;e<a.locationSize;e++)g(a.location+e,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let e=0;e<a.locationSize;e++)f(a.location+e);e.bindBuffer(e.ARRAY_BUFFER,d);for(let e=0;e<a.locationSize;e++)x(a.location+e,l/a.locationSize,h,t,l*u,l/a.locationSize*e*u,p)}}else if(void 0!==d){const n=d[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(a.location,n);break;case 3:e.vertexAttrib3fv(a.location,n);break;case 4:e.vertexAttrib4fv(a.location,n);break;default:e.vertexAttrib1fv(a.location,n)}}}}v()}(r,l,u,b),null!==_&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(_).buffer))},reset:b,resetDefaultState:_,dispose:function(){b();for(const e in o){const t=o[e];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete o[e]}},releaseStatesOfGeometry:function(e){if(void 0===o[e.id])return;const t=o[e.id];for(const n in t){const e=t[n];for(const t in e)u(e[t].object),delete e[t];delete t[n]}delete o[e.id]},releaseStatesOfProgram:function(e){for(const t in o){const n=o[t];if(void 0===n[e.id])continue;const i=n[e.id];for(const e in i)u(i[e].object),delete i[e];delete n[e.id]}},initAttributes:m,enableAttribute:f,disableUnusedAttributes:v}}function ar(e,t,n,i){const r=i.isWebGL2;let a;this.setMode=function(e){a=e},this.render=function(t,i){e.drawArrays(a,t,i),n.update(i,a,1)},this.renderInstances=function(i,s,o){if(0===o)return;let l,c;if(r)l=e,c="drawArraysInstanced";else if(l=t.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](a,i,s,o),n.update(s,a,o)},this.renderMultiDraw=function(e,i,r){if(0===r)return;const s=t.get("WEBGL_multi_draw");if(null===s)for(let t=0;t<r;t++)this.render(e[t],i[t]);else{s.multiDrawArraysWEBGL(a,e,0,i,0,r);let t=0;for(let e=0;e<r;e++)t+=i[e];n.update(t,a,1)}}}function sr(e,t,n){let i;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const a="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let s=void 0!==n.precision?n.precision:"highp";const o=r(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);const l=a||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,d=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),h=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),p=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),v=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),x=h>0,b=a||t.has("OES_texture_float");return{isWebGL2:a,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");i=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:s,logarithmicDepthBuffer:c,maxTextures:d,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:x,floatFragmentTextures:b,floatVertexTextures:x&&b,maxSamples:a?e.getParameter(e.MAX_SAMPLES):0}}function or(e){const t=this;let n=null,i=0,r=!1,a=!1;const s=new qi,o=new tt,l={value:null,needsUpdate:!1};function c(e,n,i,r){const a=null!==e?e.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const t=i+4*a,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<t)&&(c=new Float32Array(t));for(let n=0,l=i;n!==a;++n,l+=4)s.copy(e[n]).applyMatrix4(r,o),s.normal.toArray(c,l),c[l+3]=s.constant}l.value=c,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t){const n=0!==e.length||t||0!==i||r;return r=t,i=e.length,n},this.beginShadows=function(){a=!0,c(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(e,t){n=c(e,t,0)},this.setState=function(s,o,d){const h=s.clippingPlanes,u=s.clipIntersection,p=s.clipShadows,m=e.get(s);if(!r||null===h||0===h.length||a&&!p)a?c(null):(l.value!==n&&(l.value=n,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0);else{const e=a?0:i,t=4*e;let r=m.clippingState||null;l.value=r,r=c(h,o,t,d);for(let i=0;i!==t;++i)r[i]=n[i];m.clippingState=r,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=e}}}function lr(e){let t=new WeakMap;function n(e,t){return 303===t?e.mapping=j:304===t&&(e.mapping=$),e}function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping;if(303===a||304===a){if(t.has(r))return n(t.get(r).texture,r.mapping);{const a=r.image;if(a&&a.height>0){const s=new Hi(a.height/2);return s.fromEquirectangularTexture(e,r),t.set(r,s),r.addEventListener("dispose",i),n(s.texture,r.mapping)}return null}}}return r},dispose:function(){t=new WeakMap}}}class cr extends Ni{constructor(e=-1,t=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,a=n+e,s=i+t,o=i-t;if(null!==this.view&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=e*this.view.offsetX,a=r+e*this.view.width,s-=t*this.view.offsetY,o=s-t*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}const dr=[.125,.215,.35,.446,.526,.582],hr=20,ur=new cr,pr=new jn;let mr=null,fr=0,gr=0;const vr=(1+Math.sqrt(5))/2,xr=1/vr,br=[new Ct(1,1,1),new Ct(-1,1,1),new Ct(1,1,-1),new Ct(-1,1,-1),new Ct(0,vr,xr),new Ct(0,vr,-xr),new Ct(xr,0,vr),new Ct(-xr,0,vr),new Ct(vr,xr,0),new Ct(-vr,xr,0)];class _r{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){mr=this._renderer.getRenderTarget(),fr=this._renderer.getActiveCubeFace(),gr=this._renderer.getActiveMipmapLevel(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=wr(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Sr(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(mr,fr,gr),e.scissorTest=!1,Mr(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===j||e.mapping===$?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),mr=this._renderer.getRenderTarget(),fr=this._renderer.getActiveCubeFace(),gr=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:ne,minFilter:ne,generateMipmaps:!1,type:de,format:ue,colorSpace:Se,depthBuffer:!1},i=yr(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=yr(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let r=e;const a=e-4+1+dr.length;for(let s=0;s<a;s++){const a=Math.pow(2,r);n.push(a);let o=1/a;s>e-4?o=dr[s-e+4-1]:0===s&&(o=0),i.push(o);const l=1/(a-2),c=-l,d=1+l,h=[c,c,d,c,d,d,c,c,d,d,c,d],u=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*u),x=new Float32Array(f*p*u),b=new Float32Array(g*p*u);for(let e=0;e<u;e++){const t=e%3*2/3-1,n=e>2?0:-1,i=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];v.set(i,m*p*e),x.set(h,f*p*e);const r=[e,e,e,e,e,e];b.set(r,g*p*e)}const _=new hi;_.setAttribute("position",new ei(v,m)),_.setAttribute("uv",new ei(x,f)),_.setAttribute("faceIndex",new ei(b,g)),t.push(_),r>4&&r--}return{lodPlanes:t,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(hr),r=new Ct(0,1,0),a=new Ui({name:"SphericalGaussianBlur",defines:{n:hr,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1});return a}(i,e,t)}return i}_compileMaterial(e){const t=new Ri(this._lodPlanes[0],e);this._renderer.compile(t,ur)}_sceneToCubeUV(e,t,n,i){const r=new Oi(90,1,t,n),a=[1,-1,1,1,1,1],s=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(pr),o.toneMapping=0,o.autoClear=!1;const d=new Zn({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),h=new Ri(new Li,d);let u=!1;const p=e.background;p?p.isColor&&(d.color.copy(p),e.background=null,u=!0):(d.color.copy(pr),u=!0);for(let m=0;m<6;m++){const t=m%3;0===t?(r.up.set(0,a[m],0),r.lookAt(s[m],0,0)):1===t?(r.up.set(0,0,a[m]),r.lookAt(0,s[m],0)):(r.up.set(0,a[m],0),r.lookAt(0,0,s[m]));const n=this._cubeSize;Mr(i,t*n,m>2?n:0,n,n),o.setRenderTarget(i),u&&o.render(h,r),o.render(e,r)}h.geometry.dispose(),h.material.dispose(),o.toneMapping=c,o.autoClear=l,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===j||e.mapping===$;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=wr()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===e.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Sr());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new Ri(this._lodPlanes[0],r);r.uniforms.envMap.value=e;const s=this._cubeSize;Mr(t,0,0,3*s,2*s),n.setRenderTarget(t),n.render(a,ur)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let i=1;i<this._lodPlanes.length;i++){const t=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),n=br[(i-1)%br.length];this._blur(e,i-1,i,t,n)}t.autoClear=n}_blur(e,t,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",r),this._halfBlur(a,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,a,s){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new Ri(this._lodPlanes[i],l),d=l.uniforms,h=this._sizeLods[n]-1,u=isFinite(r)?Math.PI/(2*h):2*Math.PI/39,p=r/u,m=isFinite(r)?1+Math.floor(3*p):hr;m>hr&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let b=0;b<hr;++b){const e=b/p,t=Math.exp(-e*e/2);f.push(t),0===b?g+=t:b<m&&(g+=2*t)}for(let b=0;b<f.length;b++)f[b]=f[b]/g;d.envMap.value=e.texture,d.samples.value=m,d.weights.value=f,d.latitudinal.value="latitudinal"===a,s&&(d.poleAxis.value=s);const{_lodMax:v}=this;d.dTheta.value=u,d.mipInt.value=v-n;const x=this._sizeLods[i];Mr(t,3*x*(i>v-4?i-v+4:0),4*(this._cubeSize-x),3*x,2*x),o.setRenderTarget(t),o.render(c,ur)}}function yr(e,t,n){const i=new wt(e,t,n);return i.texture.mapping=Y,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Mr(e,t,n,i,r){e.viewport.set(t,n,i,r),e.scissor.set(t,n,i,r)}function Sr(){return new Ui({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function wr(){return new Ui({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Er(e){let t=new WeakMap,n=null;function i(e){const n=e.target;n.removeEventListener("dispose",i);const r=t.get(n);void 0!==r&&(t.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping,s=303===a||304===a,o=a===j||a===$;if(s||o){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=t.get(r);return null===n&&(n=new _r(e)),i=s?n.fromEquirectangular(r,i):n.fromCubemap(r,i),t.set(r,i),i.texture}if(t.has(r))return t.get(r).texture;{const a=r.image;if(s&&a&&a.height>0||o&&a&&function(e){let t=0;const n=6;for(let i=0;i<n;i++)void 0!==e[i]&&t++;return t===n}(a)){null===n&&(n=new _r(e));const a=s?n.fromEquirectangular(r):n.fromCubemap(r);return t.set(r,a),r.addEventListener("dispose",i),a.texture}return null}}}return r},dispose:function(){t=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Tr(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function Ar(e,t,n,i){const r={},a=new WeakMap;function s(e){const o=e.target;null!==o.index&&t.remove(o.index);for(const n in o.attributes)t.remove(o.attributes[n]);for(const n in o.morphAttributes){const e=o.morphAttributes[n];for(let n=0,i=e.length;n<i;n++)t.remove(e[n])}o.removeEventListener("dispose",s),delete r[o.id];const l=a.get(o);l&&(t.remove(l),a.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(e){const n=[],i=e.index,r=e.attributes.position;let s=0;if(null!==i){const e=i.array;s=i.version;for(let t=0,i=e.length;t<i;t+=3){const i=e[t+0],r=e[t+1],a=e[t+2];n.push(i,r,r,a,a,i)}}else{if(void 0===r)return;{const e=r.array;s=r.version;for(let t=0,i=e.length/3-1;t<i;t+=3){const e=t+0,i=t+1,r=t+2;n.push(e,i,i,r,r,e)}}}const o=new(it(n)?ni:ti)(n,1);o.version=s;const l=a.get(e);l&&t.remove(l),a.set(e,o)}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",s),r[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const a in i)t.update(i[a],e.ARRAY_BUFFER);const r=n.morphAttributes;for(const a in r){const n=r[a];for(let i=0,r=n.length;i<r;i++)t.update(n[i],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){const t=a.get(e);if(t){const n=e.index;null!==n&&t.version<n.version&&o(e)}else o(e);return a.get(e)}}}function Cr(e,t,n,i){const r=i.isWebGL2;let a,s,o;this.setMode=function(e){a=e},this.setIndex=function(e){s=e.type,o=e.bytesPerElement},this.render=function(t,i){e.drawElements(a,i,s,t*o),n.update(i,a,1)},this.renderInstances=function(i,l,c){if(0===c)return;let d,h;if(r)d=e,h="drawElementsInstanced";else if(d=t.get("ANGLE_instanced_arrays"),h="drawElementsInstancedANGLE",null===d)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");d[h](a,l,s,i*o,c),n.update(l,a,c)},this.renderMultiDraw=function(e,i,r){if(0===r)return;const l=t.get("WEBGL_multi_draw");if(null===l)for(let t=0;t<r;t++)this.render(e[t]/o,i[t]);else{l.multiDrawElementsWEBGL(a,i,0,s,e,0,r);let t=0;for(let e=0;e<r;e++)t+=i[e];n.update(t,a,1)}}}function Rr(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,i,r){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=r*(n/3);break;case e.LINES:t.lines+=r*(n/2);break;case e.LINE_STRIP:t.lines+=r*(n-1);break;case e.LINE_LOOP:t.lines+=r*n;break;case e.POINTS:t.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function zr(e,t){return e[0]-t[0]}function Lr(e,t){return Math.abs(t[1])-Math.abs(e[1])}function Pr(e,t,n){const i={},r=new Float32Array(8),a=new WeakMap,s=new Mt,o=[];for(let l=0;l<8;l++)o[l]=[l,0];return{update:function(l,c,d){const h=l.morphTargetInfluences;if(!0===t.isWebGL2){const u=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,p=void 0!==u?u.length:0;let m=a.get(c);if(void 0===m||m.count!==p){void 0!==m&&m.texture.dispose();const v=void 0!==c.morphAttributes.position,x=void 0!==c.morphAttributes.normal,b=void 0!==c.morphAttributes.color,_=c.morphAttributes.position||[],y=c.morphAttributes.normal||[],M=c.morphAttributes.color||[];let S=0;!0===v&&(S=1),!0===x&&(S=2),!0===b&&(S=3);let w=c.attributes.position.count*S,E=1;w>t.maxTextureSize&&(E=Math.ceil(w/t.maxTextureSize),w=t.maxTextureSize);const T=new Float32Array(w*E*4*p),A=new Et(T,w,E,p);A.type=ce,A.needsUpdate=!0;const C=4*S;for(let z=0;z<p;z++){const L=_[z],P=y[z],k=M[z],D=w*E*4*z;for(let I=0;I<L.count;I++){const U=I*C;!0===v&&(s.fromBufferAttribute(L,I),T[D+U+0]=s.x,T[D+U+1]=s.y,T[D+U+2]=s.z,T[D+U+3]=0),!0===x&&(s.fromBufferAttribute(P,I),T[D+U+4]=s.x,T[D+U+5]=s.y,T[D+U+6]=s.z,T[D+U+7]=0),!0===b&&(s.fromBufferAttribute(k,I),T[D+U+8]=s.x,T[D+U+9]=s.y,T[D+U+10]=s.z,T[D+U+11]=4===k.itemSize?s.w:1)}}function R(){A.dispose(),a.delete(c),c.removeEventListener("dispose",R)}m={count:p,texture:A,size:new et(w,E)},a.set(c,m),c.addEventListener("dispose",R)}let f=0;for(let N=0;N<h.length;N++)f+=h[N];const g=c.morphTargetsRelative?1:1-f;d.getUniforms().setValue(e,"morphTargetBaseInfluence",g),d.getUniforms().setValue(e,"morphTargetInfluences",h),d.getUniforms().setValue(e,"morphTargetsTexture",m.texture,n),d.getUniforms().setValue(e,"morphTargetsTextureSize",m.size)}else{const O=void 0===h?0:h.length;let F=i[c.id];if(void 0===F||F.length!==O){F=[];for(let W=0;W<O;W++)F[W]=[W,0];i[c.id]=F}for(let X=0;X<O;X++){const q=F[X];q[0]=X,q[1]=h[X]}F.sort(Lr);for(let j=0;j<8;j++)j<O&&F[j][1]?(o[j][0]=F[j][0],o[j][1]=F[j][1]):(o[j][0]=Number.MAX_SAFE_INTEGER,o[j][1]=0);o.sort(zr);const B=c.morphAttributes.position,V=c.morphAttributes.normal;let H=0;for(let $=0;$<8;$++){const Y=o[$],K=Y[0],Z=Y[1];K!==Number.MAX_SAFE_INTEGER&&Z?(B&&c.getAttribute("morphTarget"+$)!==B[K]&&c.setAttribute("morphTarget"+$,B[K]),V&&c.getAttribute("morphNormal"+$)!==V[K]&&c.setAttribute("morphNormal"+$,V[K]),r[$]=Z,H+=Z):(B&&!0===c.hasAttribute("morphTarget"+$)&&c.deleteAttribute("morphTarget"+$),V&&!0===c.hasAttribute("morphNormal"+$)&&c.deleteAttribute("morphNormal"+$),r[$]=0)}const G=c.morphTargetsRelative?1:1-H;d.getUniforms().setValue(e,"morphTargetBaseInfluence",G),d.getUniforms().setValue(e,"morphTargetInfluences",r)}}}}function kr(e,t,n,i){let r=new WeakMap;function a(e){const t=e.target;t.removeEventListener("dispose",a),n.remove(t.instanceMatrix),null!==t.instanceColor&&n.remove(t.instanceColor)}return{update:function(s){const o=i.render.frame,l=s.geometry,c=t.get(s,l);if(r.get(c)!==o&&(t.update(c),r.set(c,o)),s.isInstancedMesh&&(!1===s.hasEventListener("dispose",a)&&s.addEventListener("dispose",a),r.get(s)!==o&&(n.update(s.instanceMatrix,e.ARRAY_BUFFER),null!==s.instanceColor&&n.update(s.instanceColor,e.ARRAY_BUFFER),r.set(s,o))),s.isSkinnedMesh){const e=s.skeleton;r.get(e)!==o&&(e.update(),r.set(e,o))}return c},dispose:function(){r=new WeakMap}}}class Dr extends yt{constructor(e,t,n,i,r,a,s,o,l,c){if((c=void 0!==c?c:pe)!==pe&&c!==me)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===pe&&(n=le),void 0===n&&c===me&&(n=he),super(null,i,r,a,s,o,c,n,l),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=void 0!==s?s:Q,this.minFilter=void 0!==o?o:Q,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return null!==this.compareFunction&&(t.compareFunction=this.compareFunction),t}}const Ir=new yt,Ur=new Dr(1,1);Ur.compareFunction=515;const Nr=new Et,Or=new Tt,Fr=new Vi,Br=[],Vr=[],Hr=new Float32Array(16),Gr=new Float32Array(9),Wr=new Float32Array(4);function Xr(e,t,n){const i=e[0];if(i<=0||i>0)return e;const r=t*n;let a=Br[r];if(void 0===a&&(a=new Float32Array(r),Br[r]=a),0!==t){i.toArray(a,0);for(let i=1,r=0;i!==t;++i)r+=n,e[i].toArray(a,r)}return a}function qr(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function jr(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function $r(e,t){let n=Vr[t];void 0===n&&(n=new Int32Array(t),Vr[t]=n);for(let i=0;i!==t;++i)n[i]=e.allocateTextureUnit();return n}function Yr(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Kr(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(qr(n,t))return;e.uniform2fv(this.addr,t),jr(n,t)}}function Zr(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(qr(n,t))return;e.uniform3fv(this.addr,t),jr(n,t)}}function Jr(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(qr(n,t))return;e.uniform4fv(this.addr,t),jr(n,t)}}function Qr(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(qr(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),jr(n,t)}else{if(qr(n,i))return;Wr.set(i),e.uniformMatrix2fv(this.addr,!1,Wr),jr(n,i)}}function ea(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(qr(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),jr(n,t)}else{if(qr(n,i))return;Gr.set(i),e.uniformMatrix3fv(this.addr,!1,Gr),jr(n,i)}}function ta(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(qr(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),jr(n,t)}else{if(qr(n,i))return;Hr.set(i),e.uniformMatrix4fv(this.addr,!1,Hr),jr(n,i)}}function na(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function ia(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2i(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(qr(n,t))return;e.uniform2iv(this.addr,t),jr(n,t)}}function ra(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3i(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(qr(n,t))return;e.uniform3iv(this.addr,t),jr(n,t)}}function aa(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4i(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(qr(n,t))return;e.uniform4iv(this.addr,t),jr(n,t)}}function sa(e,t){const n=this.cache;n[0]!==t&&(e.uniform1ui(this.addr,t),n[0]=t)}function oa(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y||(e.uniform2ui(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(qr(n,t))return;e.uniform2uiv(this.addr,t),jr(n,t)}}function la(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3ui(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else{if(qr(n,t))return;e.uniform3uiv(this.addr,t),jr(n,t)}}function ca(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z&&n[3]===t.w||(e.uniform4ui(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(qr(n,t))return;e.uniform4uiv(this.addr,t),jr(n,t)}}function da(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r);const a=this.type===e.SAMPLER_2D_SHADOW?Ur:Ir;n.setTexture2D(t||a,r)}function ha(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(t||Or,r)}function ua(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(t||Fr,r)}function pa(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(t||Nr,r)}function ma(e,t){e.uniform1fv(this.addr,t)}function fa(e,t){const n=Xr(t,this.size,2);e.uniform2fv(this.addr,n)}function ga(e,t){const n=Xr(t,this.size,3);e.uniform3fv(this.addr,n)}function va(e,t){const n=Xr(t,this.size,4);e.uniform4fv(this.addr,n)}function xa(e,t){const n=Xr(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function ba(e,t){const n=Xr(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function _a(e,t){const n=Xr(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function ya(e,t){e.uniform1iv(this.addr,t)}function Ma(e,t){e.uniform2iv(this.addr,t)}function Sa(e,t){e.uniform3iv(this.addr,t)}function wa(e,t){e.uniform4iv(this.addr,t)}function Ea(e,t){e.uniform1uiv(this.addr,t)}function Ta(e,t){e.uniform2uiv(this.addr,t)}function Aa(e,t){e.uniform3uiv(this.addr,t)}function Ca(e,t){e.uniform4uiv(this.addr,t)}function Ra(e,t,n){const i=this.cache,r=t.length,a=$r(n,r);qr(i,a)||(e.uniform1iv(this.addr,a),jr(i,a));for(let s=0;s!==r;++s)n.setTexture2D(t[s]||Ir,a[s])}function za(e,t,n){const i=this.cache,r=t.length,a=$r(n,r);qr(i,a)||(e.uniform1iv(this.addr,a),jr(i,a));for(let s=0;s!==r;++s)n.setTexture3D(t[s]||Or,a[s])}function La(e,t,n){const i=this.cache,r=t.length,a=$r(n,r);qr(i,a)||(e.uniform1iv(this.addr,a),jr(i,a));for(let s=0;s!==r;++s)n.setTextureCube(t[s]||Fr,a[s])}function Pa(e,t,n){const i=this.cache,r=t.length,a=$r(n,r);qr(i,a)||(e.uniform1iv(this.addr,a),jr(i,a));for(let s=0;s!==r;++s)n.setTexture2DArray(t[s]||Nr,a[s])}class ka{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=function(e){switch(e){case 5126:return Yr;case 35664:return Kr;case 35665:return Zr;case 35666:return Jr;case 35674:return Qr;case 35675:return ea;case 35676:return ta;case 5124:case 35670:return na;case 35667:case 35671:return ia;case 35668:case 35672:return ra;case 35669:case 35673:return aa;case 5125:return sa;case 36294:return oa;case 36295:return la;case 36296:return ca;case 35678:case 36198:case 36298:case 36306:case 35682:return da;case 35679:case 36299:case 36307:return ha;case 35680:case 36300:case 36308:case 36293:return ua;case 36289:case 36303:case 36311:case 36292:return pa}}(t.type)}}class Da{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=function(e){switch(e){case 5126:return ma;case 35664:return fa;case 35665:return ga;case 35666:return va;case 35674:return xa;case 35675:return ba;case 35676:return _a;case 5124:case 35670:return ya;case 35667:case 35671:return Ma;case 35668:case 35672:return Sa;case 35669:case 35673:return wa;case 5125:return Ea;case 36294:return Ta;case 36295:return Aa;case 36296:return Ca;case 35678:case 36198:case 36298:case 36306:case 35682:return Ra;case 35679:case 36299:case 36307:return za;case 35680:case 36300:case 36308:case 36293:return La;case 36289:case 36303:case 36311:case 36292:return Pa}}(t.type)}}class Ia{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(e,t[a.id],n)}}}const Ua=/(\w+)(\])?(\[|\.)?/g;function Na(e,t){e.seq.push(t),e.map[t.id]=t}function Oa(e,t,n){const i=e.name,r=i.length;for(Ua.lastIndex=0;;){const a=Ua.exec(i),s=Ua.lastIndex;let o=a[1];const l="]"===a[2],c=a[3];if(l&&(o|=0),void 0===c||"["===c&&s+2===r){Na(n,void 0===c?new ka(o,e,t):new Da(o,e,t));break}{let e=n.map[o];void 0===e&&(e=new Ia(o),Na(n,e)),n=e}}}class Fa{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);Oa(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,i){const r=this.map[t];void 0!==r&&r.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];void 0!==i&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const a=t[r],s=n[a.id];!1!==s.needsUpdate&&a.setValue(e,s.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const r=e[i];r.id in t&&n.push(r)}return n}}function Ba(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}let Va=0;function Ha(e,t,n){const i=e.getShaderParameter(t,e.COMPILE_STATUS),r=e.getShaderInfoLog(t).trim();if(i&&""===r)return"";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const i=parseInt(a[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(e,t){const n=e.split("\n"),i=[],r=Math.max(t-6,0),a=Math.min(t+6,n.length);for(let s=r;s<a;s++){const e=s+1;i.push(`${e===t?">":" "} ${e}: ${n[s]}`)}return i.join("\n")}(e.getShaderSource(t),i)}return r}function Ga(e,t){const n=function(e){const t=ut.getPrimaries(ut.workingColorSpace),n=ut.getPrimaries(e);let i;switch(t===n?i="":t===Re&&n===Ce?i="LinearDisplayP3ToLinearSRGB":t===Ce&&n===Re&&(i="LinearSRGBToLinearDisplayP3"),e){case Se:case Ee:return[i,"LinearTransferOETF"];case Me:case we:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",e),[i,"LinearTransferOETF"]}}(t);return`vec4 ${e}( vec4 value ) { return ${n[0]}( ${n[1]}( value ) ); }`}function Wa(e,t){let n;switch(t){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Xa(e){return""!==e}function qa(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function ja(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const $a=/^[ \t]*#include +<([\w\d./]+)>/gm;function Ya(e){return e.replace($a,Za)}const Ka=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function Za(e,t){let n=Qi[t];if(void 0===n){const e=Ka.get(t);if(void 0===e)throw new Error("Can not resolve #include <"+t+">");n=Qi[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e)}return Ya(n)}const Ja=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Qa(e){return e.replace(Ja,es)}function es(e,t,n,i){let r="";for(let a=parseInt(t);a<parseInt(n);a++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return r}function ts(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function ns(e,t,n,i){const r=e.getContext(),a=n.defines;let s=n.vertexShader,o=n.fragmentShader;const l=function(e){let t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),c=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case j:case $:t="ENVMAP_TYPE_CUBE";break;case Y:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),d=function(e){let t="ENVMAP_MODE_REFLECTION";return e.envMap&&e.envMapMode===$&&(t="ENVMAP_MODE_REFRACTION"),t}(n),h=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),u=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),p=n.isWebGL2?"":function(e){return[e.extensionDerivatives||e.envMapCubeUVHeight||e.bumpMap||e.normalMapTangentSpace||e.clearcoatNormalMap||e.flatShading||"physical"===e.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Xa).join("\n")}(n),m=function(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(a),f=r.createProgram();let g,v,x=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(Xa).join("\n"),g.length>0&&(g+="\n"),v=[p,"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(Xa).join("\n"),v.length>0&&(v+="\n")):(g=[ts(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.batching?"#define USE_BATCHING":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Xa).join("\n"),v=[p,ts(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+d:"",n.envMap?"#define "+h:"",u?"#define CUBEUV_TEXEL_WIDTH "+u.texelWidth:"",u?"#define CUBEUV_TEXEL_HEIGHT "+u.texelHeight:"",u?"#define CUBEUV_MAX_MIP "+u.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.useLegacyLights?"#define LEGACY_LIGHTS":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?Qi.tonemapping_pars_fragment:"",0!==n.toneMapping?Wa("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Qi.colorspace_pars_fragment,Ga("linearToOutputTexel",n.outputColorSpace),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Xa).join("\n")),s=Ya(s),s=qa(s,n),s=ja(s,n),o=Ya(o),o=qa(o,n),o=ja(o,n),s=Qa(s),o=Qa(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(x="#version 300 es\n",g=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,v=["precision mediump sampler2DArray;","#define varying in",n.glslVersion===Fe?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Fe?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+v);const b=x+g+s,_=x+v+o,y=Ba(r,r.VERTEX_SHADER,b),M=Ba(r,r.FRAGMENT_SHADER,_);function S(t){if(e.debug.checkShaderErrors){const n=r.getProgramInfoLog(f).trim(),i=r.getShaderInfoLog(y).trim(),a=r.getShaderInfoLog(M).trim();let s=!0,o=!0;if(!1===r.getProgramParameter(f,r.LINK_STATUS))if(s=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(r,f,y,M);else{const e=Ha(r,y,"vertex"),t=Ha(r,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(f,r.VALIDATE_STATUS)+"\n\nProgram Info Log: "+n+"\n"+e+"\n"+t)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==a||(o=!1);o&&(t.diagnostics={runnable:s,programLog:n,vertexShader:{log:i,prefix:g},fragmentShader:{log:a,prefix:v}})}r.deleteShader(y),r.deleteShader(M),w=new Fa(r,f),E=function(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=e.getActiveAttrib(t,r),a=i.name;let s=1;i.type===e.FLOAT_MAT2&&(s=2),i.type===e.FLOAT_MAT3&&(s=3),i.type===e.FLOAT_MAT4&&(s=4),n[a]={type:i.type,location:e.getAttribLocation(t,a),locationSize:s}}return n}(r,f)}let w,E;r.attachShader(f,y),r.attachShader(f,M),void 0!==n.index0AttributeName?r.bindAttribLocation(f,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(f,0,"position"),r.linkProgram(f),this.getUniforms=function(){return void 0===w&&S(this),w},this.getAttributes=function(){return void 0===E&&S(this),E};let T=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===T&&(T=r.getProgramParameter(f,37297)),T},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(f),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=Va++,this.cacheKey=t,this.usedTimes=1,this.program=f,this.vertexShader=y,this.fragmentShader=M,this}let is=0;class rs{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return!1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,0===n.usedTimes&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return void 0===n&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return void 0===n&&(n=new as(e),t.set(e,n)),n}}class as{constructor(e){this.id=is++,this.code=e,this.usedTimes=0}}function ss(e,t,n,i,r,a,s){const o=new gn,l=new rs,c=[],d=r.isWebGL2,h=r.logarithmicDepthBuffer,u=r.vertexTextures;let p=r.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function f(e){return 0===e?"uv":`uv${e}`}return{getParameters:function(a,o,c,g,v){const x=g.fog,b=v.geometry,_=a.isMeshStandardMaterial?g.environment:null,y=(a.isMeshStandardMaterial?n:t).get(a.envMap||_),M=y&&y.mapping===Y?y.image.height:null,S=m[a.type];null!==a.precision&&(p=r.getMaxPrecision(a.precision),p!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",p,"instead."));const w=b.morphAttributes.position||b.morphAttributes.normal||b.morphAttributes.color,E=void 0!==w?w.length:0;let T,A,C,R,z=0;if(void 0!==b.morphAttributes.position&&(z=1),void 0!==b.morphAttributes.normal&&(z=2),void 0!==b.morphAttributes.color&&(z=3),S){const e=tr[S];T=e.vertexShader,A=e.fragmentShader}else T=a.vertexShader,A=a.fragmentShader,l.update(a),C=l.getVertexShaderID(a),R=l.getFragmentShaderID(a);const L=e.getRenderTarget(),P=!0===v.isInstancedMesh,k=!0===v.isBatchedMesh,D=!!a.map,I=!!a.matcap,U=!!y,N=!!a.aoMap,O=!!a.lightMap,F=!!a.bumpMap,B=!!a.normalMap,V=!!a.displacementMap,H=!!a.emissiveMap,G=!!a.metalnessMap,W=!!a.roughnessMap,X=a.anisotropy>0,q=a.clearcoat>0,j=a.iridescence>0,$=a.sheen>0,K=a.transmission>0,Z=X&&!!a.anisotropyMap,J=q&&!!a.clearcoatMap,Q=q&&!!a.clearcoatNormalMap,ee=q&&!!a.clearcoatRoughnessMap,te=j&&!!a.iridescenceMap,ne=j&&!!a.iridescenceThicknessMap,ie=$&&!!a.sheenColorMap,re=$&&!!a.sheenRoughnessMap,ae=!!a.specularMap,se=!!a.specularColorMap,oe=!!a.specularIntensityMap,le=K&&!!a.transmissionMap,ce=K&&!!a.thicknessMap,de=!!a.gradientMap,he=!!a.alphaMap,ue=a.alphaTest>0,pe=!!a.alphaHash,me=!!a.extensions,fe=!!b.attributes.uv1,ge=!!b.attributes.uv2,ve=!!b.attributes.uv3;let xe=0;return a.toneMapped&&(null!==L&&!0!==L.isXRRenderTarget||(xe=e.toneMapping)),{isWebGL2:d,shaderID:S,shaderType:a.type,shaderName:a.name,vertexShader:T,fragmentShader:A,defines:a.defines,customVertexShaderID:C,customFragmentShaderID:R,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:p,batching:k,instancing:P,instancingColor:P&&null!==v.instanceColor,supportsVertexTextures:u,outputColorSpace:null===L?e.outputColorSpace:!0===L.isXRRenderTarget?L.texture.colorSpace:Se,map:D,matcap:I,envMap:U,envMapMode:U&&y.mapping,envMapCubeUVHeight:M,aoMap:N,lightMap:O,bumpMap:F,normalMap:B,displacementMap:u&&V,emissiveMap:H,normalMapObjectSpace:B&&1===a.normalMapType,normalMapTangentSpace:B&&0===a.normalMapType,metalnessMap:G,roughnessMap:W,anisotropy:X,anisotropyMap:Z,clearcoat:q,clearcoatMap:J,clearcoatNormalMap:Q,clearcoatRoughnessMap:ee,iridescence:j,iridescenceMap:te,iridescenceThicknessMap:ne,sheen:$,sheenColorMap:ie,sheenRoughnessMap:re,specularMap:ae,specularColorMap:se,specularIntensityMap:oe,transmission:K,transmissionMap:le,thicknessMap:ce,gradientMap:de,opaque:!1===a.transparent&&1===a.blending,alphaMap:he,alphaTest:ue,alphaHash:pe,combine:a.combine,mapUv:D&&f(a.map.channel),aoMapUv:N&&f(a.aoMap.channel),lightMapUv:O&&f(a.lightMap.channel),bumpMapUv:F&&f(a.bumpMap.channel),normalMapUv:B&&f(a.normalMap.channel),displacementMapUv:V&&f(a.displacementMap.channel),emissiveMapUv:H&&f(a.emissiveMap.channel),metalnessMapUv:G&&f(a.metalnessMap.channel),roughnessMapUv:W&&f(a.roughnessMap.channel),anisotropyMapUv:Z&&f(a.anisotropyMap.channel),clearcoatMapUv:J&&f(a.clearcoatMap.channel),clearcoatNormalMapUv:Q&&f(a.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ee&&f(a.clearcoatRoughnessMap.channel),iridescenceMapUv:te&&f(a.iridescenceMap.channel),iridescenceThicknessMapUv:ne&&f(a.iridescenceThicknessMap.channel),sheenColorMapUv:ie&&f(a.sheenColorMap.channel),sheenRoughnessMapUv:re&&f(a.sheenRoughnessMap.channel),specularMapUv:ae&&f(a.specularMap.channel),specularColorMapUv:se&&f(a.specularColorMap.channel),specularIntensityMapUv:oe&&f(a.specularIntensityMap.channel),transmissionMapUv:le&&f(a.transmissionMap.channel),thicknessMapUv:ce&&f(a.thicknessMap.channel),alphaMapUv:he&&f(a.alphaMap.channel),vertexTangents:!!b.attributes.tangent&&(B||X),vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!b.attributes.color&&4===b.attributes.color.itemSize,vertexUv1s:fe,vertexUv2s:ge,vertexUv3s:ve,pointsUvs:!0===v.isPoints&&!!b.attributes.uv&&(D||he),fog:!!x,useFog:!0===a.fog,fogExp2:x&&x.isFogExp2,flatShading:!0===a.flatShading,sizeAttenuation:!0===a.sizeAttenuation,logarithmicDepthBuffer:h,skinning:!0===v.isSkinnedMesh,morphTargets:void 0!==b.morphAttributes.position,morphNormals:void 0!==b.morphAttributes.normal,morphColors:void 0!==b.morphAttributes.color,morphTargetsCount:E,morphTextureStride:z,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:xe,useLegacyLights:e._useLegacyLights,decodeVideoTexture:D&&!0===a.map.isVideoTexture&&ut.getTransfer(a.map.colorSpace)===Ae,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:a.depthPacking>=0,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionDerivatives:me&&!0===a.extensions.derivatives,extensionFragDepth:me&&!0===a.extensions.fragDepth,extensionDrawBuffers:me&&!0===a.extensions.drawBuffers,extensionShaderTextureLOD:me&&!0===a.extensions.shaderTextureLOD,rendererExtensionFragDepth:d||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:d||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:d||i.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(function(e,t){e.push(t.precision),e.push(t.outputColorSpace),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.mapUv),e.push(t.alphaMapUv),e.push(t.lightMapUv),e.push(t.aoMapUv),e.push(t.bumpMapUv),e.push(t.normalMapUv),e.push(t.displacementMapUv),e.push(t.emissiveMapUv),e.push(t.metalnessMapUv),e.push(t.roughnessMapUv),e.push(t.anisotropyMapUv),e.push(t.clearcoatMapUv),e.push(t.clearcoatNormalMapUv),e.push(t.clearcoatRoughnessMapUv),e.push(t.iridescenceMapUv),e.push(t.iridescenceThicknessMapUv),e.push(t.sheenColorMapUv),e.push(t.sheenRoughnessMapUv),e.push(t.specularMapUv),e.push(t.specularColorMapUv),e.push(t.specularIntensityMapUv),e.push(t.transmissionMapUv),e.push(t.thicknessMapUv),e.push(t.combine),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numSpotLightMaps),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.numSpotLightShadowsWithMaps),e.push(t.numLightProbes),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){o.disableAll(),t.isWebGL2&&o.enable(0),t.supportsVertexTextures&&o.enable(1),t.instancing&&o.enable(2),t.instancingColor&&o.enable(3),t.matcap&&o.enable(4),t.envMap&&o.enable(5),t.normalMapObjectSpace&&o.enable(6),t.normalMapTangentSpace&&o.enable(7),t.clearcoat&&o.enable(8),t.iridescence&&o.enable(9),t.alphaTest&&o.enable(10),t.vertexColors&&o.enable(11),t.vertexAlphas&&o.enable(12),t.vertexUv1s&&o.enable(13),t.vertexUv2s&&o.enable(14),t.vertexUv3s&&o.enable(15),t.vertexTangents&&o.enable(16),t.anisotropy&&o.enable(17),t.alphaHash&&o.enable(18),t.batching&&o.enable(19),e.push(o.mask),o.disableAll(),t.fog&&o.enable(0),t.useFog&&o.enable(1),t.flatShading&&o.enable(2),t.logarithmicDepthBuffer&&o.enable(3),t.skinning&&o.enable(4),t.morphTargets&&o.enable(5),t.morphNormals&&o.enable(6),t.morphColors&&o.enable(7),t.premultipliedAlpha&&o.enable(8),t.shadowMapEnabled&&o.enable(9),t.useLegacyLights&&o.enable(10),t.doubleSided&&o.enable(11),t.flipSided&&o.enable(12),t.useDepthPacking&&o.enable(13),t.dithering&&o.enable(14),t.transmission&&o.enable(15),t.sheen&&o.enable(16),t.opaque&&o.enable(17),t.pointsUvs&&o.enable(18),t.decodeVideoTexture&&o.enable(19),e.push(o.mask)}(n,t),n.push(e.outputColorSpace)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=m[e.type];let n;if(t){const e=tr[t];n=Ii.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,r=c.length;e<r;e++){const t=c[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new ns(e,n,t,a),c.push(i)),i},releaseProgram:function(e){if(0===--e.usedTimes){const t=c.indexOf(e);c[t]=c[c.length-1],c.pop(),e.destroy()}},releaseShaderCache:function(e){l.remove(e)},programs:c,dispose:function(){l.dispose()}}}function os(){let e=new WeakMap;return{get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(t,n,i){e.get(t)[n]=i},dispose:function(){e=new WeakMap}}}function ls(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function cs(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function ds(){const e=[];let t=0;const n=[],i=[],r=[];function a(n,i,r,a,s,o){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:s,group:o},e[t]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=s,l.group=o),t++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){t=0,n.length=0,i.length=0,r.length=0},push:function(e,t,s,o,l,c){const d=a(e,t,s,o,l,c);s.transmission>0?i.push(d):!0===s.transparent?r.push(d):n.push(d)},unshift:function(e,t,s,o,l,c){const d=a(e,t,s,o,l,c);s.transmission>0?i.unshift(d):!0===s.transparent?r.unshift(d):n.unshift(d)},finish:function(){for(let n=t,i=e.length;n<i;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||ls),i.length>1&&i.sort(t||cs),r.length>1&&r.sort(t||cs)}}}function hs(){let e=new WeakMap;return{get:function(t,n){const i=e.get(t);let r;return void 0===i?(r=new ds,e.set(t,[r])):n>=i.length?(r=new ds,i.push(r)):r=i[n],r},dispose:function(){e=new WeakMap}}}function us(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new Ct,color:new jn};break;case"SpotLight":n={position:new Ct,direction:new Ct,color:new jn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Ct,color:new jn,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Ct,skyColor:new jn,groundColor:new jn};break;case"RectAreaLight":n={color:new jn,position:new Ct,halfWidth:new Ct,halfHeight:new Ct}}return e[t.id]=n,n}}}let ps=0;function ms(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function fs(e,t){const n=new us,i=function(){const e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];let n;switch(t.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new et,shadowCameraNear:1,shadowCameraFar:1e3}}return e[t.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let l=0;l<9;l++)r.probe.push(new Ct);const a=new Ct,s=new an,o=new an;return{setup:function(a,s){let o=0,l=0,c=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let d=0,h=0,u=0,p=0,m=0,f=0,g=0,v=0,x=0,b=0,_=0;a.sort(ms);const y=!0===s?Math.PI:1;for(let e=0,t=a.length;e<t;e++){const t=a[e],s=t.color,M=t.intensity,S=t.distance,w=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)o+=s.r*M*y,l+=s.g*M*y,c+=s.b*M*y;else if(t.isLightProbe){for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],M);_++}else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*y),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.directionalShadow[d]=n,r.directionalShadowMap[d]=w,r.directionalShadowMatrix[d]=t.shadow.matrix,f++}r.directional[d]=e,d++}else if(t.isSpotLight){const e=n.get(t);e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(s).multiplyScalar(M*y),e.distance=S,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,r.spot[u]=e;const a=t.shadow;if(t.map&&(r.spotLightMap[x]=t.map,x++,a.updateMatrices(t),t.castShadow&&b++),r.spotLightMatrix[u]=a.matrix,t.castShadow){const e=i.get(t);e.shadowBias=a.bias,e.shadowNormalBias=a.normalBias,e.shadowRadius=a.radius,e.shadowMapSize=a.mapSize,r.spotShadow[u]=e,r.spotShadowMap[u]=w,v++}u++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(s).multiplyScalar(M),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[p]=e,p++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*y),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,r.pointShadow[h]=n,r.pointShadowMap[h]=w,r.pointShadowMatrix[h]=t.shadow.matrix,g++}r.point[h]=e,h++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(M*y),e.groundColor.copy(t.groundColor).multiplyScalar(M*y),r.hemi[m]=e,m++}}p>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=er.LTC_FLOAT_1,r.rectAreaLTC2=er.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=er.LTC_HALF_1,r.rectAreaLTC2=er.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const M=r.hash;M.directionalLength===d&&M.pointLength===h&&M.spotLength===u&&M.rectAreaLength===p&&M.hemiLength===m&&M.numDirectionalShadows===f&&M.numPointShadows===g&&M.numSpotShadows===v&&M.numSpotMaps===x&&M.numLightProbes===_||(r.directional.length=d,r.spot.length=u,r.rectArea.length=p,r.point.length=h,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotLightMatrix.length=v+x-b,r.spotLightMap.length=x,r.numSpotLightShadowsWithMaps=b,r.numLightProbes=_,M.directionalLength=d,M.pointLength=h,M.spotLength=u,M.rectAreaLength=p,M.hemiLength=m,M.numDirectionalShadows=f,M.numPointShadows=g,M.numSpotShadows=v,M.numSpotMaps=x,M.numLightProbes=_,r.version=ps++)},setupView:function(e,t){let n=0,i=0,l=0,c=0,d=0;const h=t.matrixWorldInverse;for(let u=0,p=e.length;u<p;u++){const t=e[u];if(t.isDirectionalLight){const e=r.directional[n];e.direction.setFromMatrixPosition(t.matrixWorld),a.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(h),n++}else if(t.isSpotLight){const e=r.spot[l];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(h),e.direction.setFromMatrixPosition(t.matrixWorld),a.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(h),l++}else if(t.isRectAreaLight){const e=r.rectArea[c];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(h),o.identity(),s.copy(t.matrixWorld),s.premultiply(h),o.extractRotation(s),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),e.halfWidth.applyMatrix4(o),e.halfHeight.applyMatrix4(o),c++}else if(t.isPointLight){const e=r.point[i];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(h),i++}else if(t.isHemisphereLight){const e=r.hemi[d];e.direction.setFromMatrixPosition(t.matrixWorld),e.direction.transformDirection(h),d++}}},state:r}}function gs(e,t){const n=new fs(e,t),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(e){n.setup(i,e)},setupLightsView:function(e){n.setupView(i,e)},pushLight:function(e){i.push(e)},pushShadow:function(e){r.push(e)}}}function vs(e,t){let n=new WeakMap;return{get:function(i,r=0){const a=n.get(i);let s;return void 0===a?(s=new gs(e,t),n.set(i,[s])):r>=a.length?(s=new gs(e,t),a.push(s)):s=a[r],s},dispose:function(){n=new WeakMap}}}class xs extends Kn{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class bs extends Kn{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}function _s(e,t,n){let i=new Yi;const r=new et,a=new et,s=new Mt,o=new xs({depthPacking:3201}),l=new bs,c={},d=n.maxTextureSize,h={[T]:1,[A]:0,[C]:2},u=new Ui({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new et},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),p=u.clone();p.defines.HORIZONTAL_PASS=1;const m=new hi;m.setAttribute("position",new ei(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const f=new Ri(m,u),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let v=this.type;function x(n,i){const a=t.update(f);u.defines.VSM_SAMPLES!==n.blurSamples&&(u.defines.VSM_SAMPLES=n.blurSamples,p.defines.VSM_SAMPLES=n.blurSamples,u.needsUpdate=!0,p.needsUpdate=!0),null===n.mapPass&&(n.mapPass=new wt(r.x,r.y)),u.uniforms.shadow_pass.value=n.map.texture,u.uniforms.resolution.value=n.mapSize,u.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(i,null,a,u,f,null),p.uniforms.shadow_pass.value=n.mapPass.texture,p.uniforms.resolution.value=n.mapSize,p.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(i,null,a,p,f,null)}function b(t,n,i,r){let a=null;const s=!0===i.isPointLight?t.customDistanceMaterial:t.customDepthMaterial;if(void 0!==s)a=s;else if(a=!0===i.isPointLight?l:o,e.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const e=a.uuid,t=n.uuid;let i=c[e];void 0===i&&(i={},c[e]=i);let r=i[t];void 0===r&&(r=a.clone(),i[t]=r),a=r}return a.visible=n.visible,a.wireframe=n.wireframe,a.side=3===r?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:h[n.side],a.alphaMap=n.alphaMap,a.alphaTest=n.alphaTest,a.map=n.map,a.clipShadows=n.clipShadows,a.clippingPlanes=n.clippingPlanes,a.clipIntersection=n.clipIntersection,a.displacementMap=n.displacementMap,a.displacementScale=n.displacementScale,a.displacementBias=n.displacementBias,a.wireframeLinewidth=n.wireframeLinewidth,a.linewidth=n.linewidth,!0===i.isPointLight&&!0===a.isMeshDistanceMaterial&&(e.properties.get(a).light=i),a}function _(n,r,a,s,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=t.update(n),l=n.material;if(Array.isArray(l)){const t=i.groups;for(let c=0,d=t.length;c<d;c++){const d=t[c],h=l[d.materialIndex];if(h&&h.visible){const t=b(n,h,s,o);n.onBeforeShadow(e,n,r,a,i,t,d),e.renderBufferDirect(a,null,i,t,n,d),n.onAfterShadow(e,n,r,a,i,t,d)}}}else if(l.visible){const t=b(n,l,s,o);n.onBeforeShadow(e,n,r,a,i,t,null),e.renderBufferDirect(a,null,i,t,n,null),n.onAfterShadow(e,n,r,a,i,t,null)}}const l=n.children;for(let e=0,t=l.length;e<t;e++)_(l[e],r,a,s,o)}this.render=function(t,n,o){if(!1===g.enabled)return;if(!1===g.autoUpdate&&!1===g.needsUpdate)return;if(0===t.length)return;const l=e.getRenderTarget(),c=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),u=e.state;u.setBlending(0),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);const p=3!==v&&3===this.type,m=3===v&&3!==this.type;for(let f=0,g=t.length;f<g;f++){const l=t[f],c=l.shadow;if(void 0===c){console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");continue}if(!1===c.autoUpdate&&!1===c.needsUpdate)continue;r.copy(c.mapSize);const h=c.getFrameExtents();if(r.multiply(h),a.copy(c.mapSize),(r.x>d||r.y>d)&&(r.x>d&&(a.x=Math.floor(d/h.x),r.x=a.x*h.x,c.mapSize.x=a.x),r.y>d&&(a.y=Math.floor(d/h.y),r.y=a.y*h.y,c.mapSize.y=a.y)),null===c.map||!0===p||!0===m){const e=3!==this.type?{minFilter:Q,magFilter:Q}:{};null!==c.map&&c.map.dispose(),c.map=new wt(r.x,r.y,e),c.map.texture.name=l.name+".shadowMap",c.camera.updateProjectionMatrix()}e.setRenderTarget(c.map),e.clear();const g=c.getViewportCount();for(let e=0;e<g;e++){const t=c.getViewport(e);s.set(a.x*t.x,a.y*t.y,a.x*t.z,a.y*t.w),u.viewport(s),c.updateMatrices(l,e),i=c.getFrustum(),_(n,o,c.camera,l,this.type)}!0!==c.isPointLightShadow&&3===this.type&&x(c,o),c.needsUpdate=!1}v=this.type,g.needsUpdate=!1,e.setRenderTarget(l,c,h)}}function ys(e,t,n){const i=n.isWebGL2,r=new function(){let t=!1;const n=new Mt;let i=null;const r=new Mt(0,0,0,0);return{setMask:function(n){i===n||t||(e.colorMask(n,n,n,n),i=n)},setLocked:function(e){t=e},setClear:function(t,i,a,s,o){!0===o&&(t*=s,i*=s,a*=s),n.set(t,i,a,s),!1===r.equals(n)&&(e.clearColor(t,i,a,s),r.copy(n))},reset:function(){t=!1,i=null,r.set(-1,0,0,0)}}},a=new function(){let t=!1,n=null,i=null,r=null;return{setTest:function(t){t?se(e.DEPTH_TEST):oe(e.DEPTH_TEST)},setMask:function(i){n===i||t||(e.depthMask(i),n=i)},setFunc:function(t){if(i!==t){switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}i=t}},setLocked:function(e){t=e},setClear:function(t){r!==t&&(e.clearDepth(t),r=t)},reset:function(){t=!1,n=null,i=null,r=null}}},s=new function(){let t=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(n){t||(n?se(e.STENCIL_TEST):oe(e.STENCIL_TEST))},setMask:function(i){n===i||t||(e.stencilMask(i),n=i)},setFunc:function(t,n,s){i===t&&r===n&&a===s||(e.stencilFunc(t,n,s),i=t,r=n,a=s)},setOp:function(t,n,i){s===t&&o===n&&l===i||(e.stencilOp(t,n,i),s=t,o=n,l=i)},setLocked:function(e){t=e},setClear:function(t){c!==t&&(e.clearStencil(t),c=t)},reset:function(){t=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null}}},o=new WeakMap,l=new WeakMap;let c={},d={},h=new WeakMap,u=[],p=null,m=!1,f=null,g=null,v=null,x=null,b=null,_=null,y=null,M=new jn(0,0,0),S=0,w=!1,E=null,T=null,A=null,C=null,j=null;const $=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Y=!1,K=0;const Z=e.getParameter(e.VERSION);-1!==Z.indexOf("WebGL")?(K=parseFloat(/^WebGL (\d)/.exec(Z)[1]),Y=K>=1):-1!==Z.indexOf("OpenGL ES")&&(K=parseFloat(/^OpenGL ES (\d)/.exec(Z)[1]),Y=K>=2);let J=null,Q={};const ee=e.getParameter(e.SCISSOR_BOX),te=e.getParameter(e.VIEWPORT),ne=(new Mt).fromArray(ee),ie=(new Mt).fromArray(te);function re(t,n,r,a){const s=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let l=0;l<r;l++)!i||t!==e.TEXTURE_3D&&t!==e.TEXTURE_2D_ARRAY?e.texImage2D(n+l,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,s):e.texImage3D(n,0,e.RGBA,1,1,a,0,e.RGBA,e.UNSIGNED_BYTE,s);return o}const ae={};function se(t){!0!==c[t]&&(e.enable(t),c[t]=!0)}function oe(t){!1!==c[t]&&(e.disable(t),c[t]=!1)}ae[e.TEXTURE_2D]=re(e.TEXTURE_2D,e.TEXTURE_2D,1),ae[e.TEXTURE_CUBE_MAP]=re(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),i&&(ae[e.TEXTURE_2D_ARRAY]=re(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1),ae[e.TEXTURE_3D]=re(e.TEXTURE_3D,e.TEXTURE_3D,1,1)),r.setClear(0,0,0,1),a.setClear(1),s.setClear(0),se(e.DEPTH_TEST),a.setFunc(3),he(!1),ue(1),se(e.CULL_FACE),de(0);const le={[R]:e.FUNC_ADD,[z]:e.FUNC_SUBTRACT,[L]:e.FUNC_REVERSE_SUBTRACT};if(i)le[103]=e.MIN,le[104]=e.MAX;else{const e=t.get("EXT_blend_minmax");null!==e&&(le[103]=e.MIN_EXT,le[104]=e.MAX_EXT)}const ce={[P]:e.ZERO,[k]:e.ONE,[D]:e.SRC_COLOR,[U]:e.SRC_ALPHA,[H]:e.SRC_ALPHA_SATURATE,[B]:e.DST_COLOR,[O]:e.DST_ALPHA,[I]:e.ONE_MINUS_SRC_COLOR,[N]:e.ONE_MINUS_SRC_ALPHA,[V]:e.ONE_MINUS_DST_COLOR,[F]:e.ONE_MINUS_DST_ALPHA,[G]:e.CONSTANT_COLOR,[W]:e.ONE_MINUS_CONSTANT_COLOR,[X]:e.CONSTANT_ALPHA,[q]:e.ONE_MINUS_CONSTANT_ALPHA};function de(t,n,i,r,a,s,o,l,c,d){if(0!==t){if(!1===m&&(se(e.BLEND),m=!0),5===t)a=a||n,s=s||i,o=o||r,n===g&&a===b||(e.blendEquationSeparate(le[n],le[a]),g=n,b=a),i===v&&r===x&&s===_&&o===y||(e.blendFuncSeparate(ce[i],ce[r],ce[s],ce[o]),v=i,x=r,_=s,y=o),!1!==l.equals(M)&&c===S||(e.blendColor(l.r,l.g,l.b,c),M.copy(l),S=c),f=t,w=!1;else if(t!==f||d!==w){if(g===R&&b===R||(e.blendEquation(e.FUNC_ADD),g=R,b=R),d)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}v=null,x=null,_=null,y=null,M.set(0,0,0),S=0,f=t,w=d}}else!0===m&&(oe(e.BLEND),m=!1)}function he(t){E!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),E=t)}function ue(t){0!==t?(se(e.CULL_FACE),t!==T&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):oe(e.CULL_FACE),T=t}function pe(t,n,i){t?(se(e.POLYGON_OFFSET_FILL),C===n&&j===i||(e.polygonOffset(n,i),C=n,j=i)):oe(e.POLYGON_OFFSET_FILL)}return{buffers:{color:r,depth:a,stencil:s},enable:se,disable:oe,bindFramebuffer:function(t,n){return d[t]!==n&&(e.bindFramebuffer(t,n),d[t]=n,i&&(t===e.DRAW_FRAMEBUFFER&&(d[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(d[e.DRAW_FRAMEBUFFER]=n)),!0)},drawBuffers:function(i,r){let a=u,s=!1;if(i)if(a=h.get(r),void 0===a&&(a=[],h.set(r,a)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(a.length!==t.length||a[0]!==e.COLOR_ATTACHMENT0){for(let n=0,i=t.length;n<i;n++)a[n]=e.COLOR_ATTACHMENT0+n;a.length=t.length,s=!0}}else a[0]!==e.COLOR_ATTACHMENT0&&(a[0]=e.COLOR_ATTACHMENT0,s=!0);else a[0]!==e.BACK&&(a[0]=e.BACK,s=!0);s&&(n.isWebGL2?e.drawBuffers(a):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(a))},useProgram:function(t){return p!==t&&(e.useProgram(t),p=t,!0)},setBlending:de,setMaterial:function(t,n){2===t.side?oe(e.CULL_FACE):se(e.CULL_FACE);let i=1===t.side;n&&(i=!i),he(i),1===t.blending&&!1===t.transparent?de(0):de(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);const o=t.stencilWrite;s.setTest(o),o&&(s.setMask(t.stencilWriteMask),s.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),s.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),pe(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?se(e.SAMPLE_ALPHA_TO_COVERAGE):oe(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:he,setCullFace:ue,setLineWidth:function(t){t!==A&&(Y&&e.lineWidth(t),A=t)},setPolygonOffset:pe,setScissorTest:function(t){t?se(e.SCISSOR_TEST):oe(e.SCISSOR_TEST)},activeTexture:function(t){void 0===t&&(t=e.TEXTURE0+$-1),J!==t&&(e.activeTexture(t),J=t)},bindTexture:function(t,n,i){void 0===i&&(i=null===J?e.TEXTURE0+$-1:J);let r=Q[i];void 0===r&&(r={type:void 0,texture:void 0},Q[i]=r),r.type===t&&r.texture===n||(J!==i&&(e.activeTexture(i),J=i),e.bindTexture(t,n||ae[t]),r.type=t,r.texture=n)},unbindTexture:function(){const t=Q[J];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{e.compressedTexImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(t,n){let i=l.get(n);void 0===i&&(i=new WeakMap,l.set(n,i));let r=i.get(t);void 0===r&&(r=e.getUniformBlockIndex(n,t.name),i.set(t,r))},uniformBlockBinding:function(t,n){const i=l.get(n).get(t);o.get(n)!==i&&(e.uniformBlockBinding(n,i,t.__bindingPointIndex),o.set(n,i))},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{e.texStorage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{e.texSubImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{e.compressedTexSubImage3D.apply(e,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(t){!1===ne.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),ne.copy(t))},viewport:function(t){!1===ie.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),ie.copy(t))},reset:function(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.blendColor(0,0,0,0),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),!0===i&&(e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),c={},J=null,Q={},d={},h=new WeakMap,u=[],p=null,m=!1,f=null,g=null,v=null,x=null,b=null,_=null,y=null,M=new jn(0,0,0),S=0,w=!1,E=null,T=null,A=null,C=null,j=null,ne.set(0,0,e.canvas.width,e.canvas.height),ie.set(0,0,e.canvas.width,e.canvas.height),r.reset(),a.reset(),s.reset()}}}function Ms(e,t,n,i,r,a,s){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,d=r.maxTextureSize,h=r.maxSamples,u=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,p="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),m=new WeakMap;let f;const g=new WeakMap;let v=!1;try{v="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(G){}function x(e,t){return v?new OffscreenCanvas(e,t):rt("canvas")}function b(e,t,n,i){let r=1;if((e.width>i||e.height>i)&&(r=i/Math.max(e.width,e.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const i=t?Ze:Math.floor,a=i(r*e.width),s=i(r*e.height);void 0===f&&(f=x(a,s));const o=n?x(a,s):f;return o.width=a,o.height=s,o.getContext("2d").drawImage(e,0,0,a,s),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+s+")."),o}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function _(e){return Ke(e.width)&&Ke(e.height)}function y(e,t){return e.generateMipmaps&&t&&e.minFilter!==Q&&e.minFilter!==ne}function M(t){e.generateMipmap(t)}function S(n,i,r,a,s=!1){if(!1===o)return i;if(null!==n){if(void 0!==e[n])return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;if(i===e.RED&&(r===e.FLOAT&&(l=e.R32F),r===e.HALF_FLOAT&&(l=e.R16F),r===e.UNSIGNED_BYTE&&(l=e.R8)),i===e.RED_INTEGER&&(r===e.UNSIGNED_BYTE&&(l=e.R8UI),r===e.UNSIGNED_SHORT&&(l=e.R16UI),r===e.UNSIGNED_INT&&(l=e.R32UI),r===e.BYTE&&(l=e.R8I),r===e.SHORT&&(l=e.R16I),r===e.INT&&(l=e.R32I)),i===e.RG&&(r===e.FLOAT&&(l=e.RG32F),r===e.HALF_FLOAT&&(l=e.RG16F),r===e.UNSIGNED_BYTE&&(l=e.RG8)),i===e.RGBA){const t=s?Te:ut.getTransfer(a);r===e.FLOAT&&(l=e.RGBA32F),r===e.HALF_FLOAT&&(l=e.RGBA16F),r===e.UNSIGNED_BYTE&&(l=t===Ae?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(l=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(l=e.RGB5_A1)}return l!==e.R16F&&l!==e.R32F&&l!==e.RG16F&&l!==e.RG32F&&l!==e.RGBA16F&&l!==e.RGBA32F||t.get("EXT_color_buffer_float"),l}function w(e,t,n){return!0===y(e,n)||e.isFramebufferTexture&&e.minFilter!==Q&&e.minFilter!==ne?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function E(t){return t===Q||1004===t||t===te?e.NEAREST:e.LINEAR}function T(e){const t=e.target;t.removeEventListener("dispose",T),function(e){const t=i.get(e);if(void 0===t.__webglInit)return;const n=e.source,r=g.get(n);if(r){const i=r[t.__cacheKey];i.usedTimes--,0===i.usedTimes&&C(e),0===Object.keys(r).length&&g.delete(n)}i.remove(e)}(t),t.isVideoTexture&&m.delete(t)}function A(t){const n=t.target;n.removeEventListener("dispose",A),function(t){const n=t.texture,r=i.get(t),a=i.get(n);if(void 0!==a.__webglTexture&&(e.deleteTexture(a.__webglTexture),s.memory.textures--),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let i=0;i<6;i++){if(Array.isArray(r.__webglFramebuffer[i]))for(let t=0;t<r.__webglFramebuffer[i].length;t++)e.deleteFramebuffer(r.__webglFramebuffer[i][t]);else e.deleteFramebuffer(r.__webglFramebuffer[i]);r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[i])}else{if(Array.isArray(r.__webglFramebuffer))for(let t=0;t<r.__webglFramebuffer.length;t++)e.deleteFramebuffer(r.__webglFramebuffer[t]);else e.deleteFramebuffer(r.__webglFramebuffer);if(r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&e.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer)for(let t=0;t<r.__webglColorRenderbuffer.length;t++)r.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(r.__webglColorRenderbuffer[t]);r.__webglDepthRenderbuffer&&e.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(t.isWebGLMultipleRenderTargets)for(let o=0,l=n.length;o<l;o++){const t=i.get(n[o]);t.__webglTexture&&(e.deleteTexture(t.__webglTexture),s.memory.textures--),i.remove(n[o])}i.remove(n),i.remove(t)}(n)}function C(t){const n=i.get(t);e.deleteTexture(n.__webglTexture);const r=t.source;delete g.get(r)[n.__cacheKey],s.memory.textures--}let R=0;function z(t,r){const a=i.get(t);if(t.isVideoTexture&&function(e){const t=s.render.frame;m.get(e)!==t&&(m.set(e,t),e.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&a.__version!==t.version){const e=t.image;if(null===e)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==e.complete)return void U(a,t,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(e.TEXTURE_2D,a.__webglTexture,e.TEXTURE0+r)}const L={[K]:e.REPEAT,[Z]:e.CLAMP_TO_EDGE,[J]:e.MIRRORED_REPEAT},P={[Q]:e.NEAREST,[ee]:e.NEAREST_MIPMAP_NEAREST,[te]:e.NEAREST_MIPMAP_LINEAR,[ne]:e.LINEAR,[ie]:e.LINEAR_MIPMAP_NEAREST,[re]:e.LINEAR_MIPMAP_LINEAR},k={[Le]:e.NEVER,[Oe]:e.ALWAYS,[Pe]:e.LESS,[De]:e.LEQUAL,[ke]:e.EQUAL,[Ne]:e.GEQUAL,[Ie]:e.GREATER,[Ue]:e.NOTEQUAL};function D(n,a,s){if(s?(e.texParameteri(n,e.TEXTURE_WRAP_S,L[a.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,L[a.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,L[a.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,P[a.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,P[a.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),a.wrapS===Z&&a.wrapT===Z||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,e.TEXTURE_MAG_FILTER,E(a.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,E(a.minFilter)),a.minFilter!==Q&&a.minFilter!==ne&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),a.compareFunction&&(e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE),e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,k[a.compareFunction])),!0===t.has("EXT_texture_filter_anisotropic")){const s=t.get("EXT_texture_filter_anisotropic");if(a.magFilter===Q)return;if(a.minFilter!==te&&a.minFilter!==re)return;if(a.type===ce&&!1===t.has("OES_texture_float_linear"))return;if(!1===o&&a.type===de&&!1===t.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function I(t,n){let i=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",T));const r=n.source;let a=g.get(r);void 0===a&&(a={},g.set(r,a));const o=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.wrapR||0),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.colorSpace),t.join()}(n);if(o!==t.__cacheKey){void 0===a[o]&&(a[o]={texture:e.createTexture(),usedTimes:0},s.memory.textures++,i=!0),a[o].usedTimes++;const r=a[t.__cacheKey];void 0!==r&&(a[t.__cacheKey].usedTimes--,0===r.usedTimes&&C(n)),t.__cacheKey=o,t.__webglTexture=a[o].texture}return i}function U(t,r,s){let l=e.TEXTURE_2D;(r.isDataArrayTexture||r.isCompressedArrayTexture)&&(l=e.TEXTURE_2D_ARRAY),r.isData3DTexture&&(l=e.TEXTURE_3D);const c=I(t,r),h=r.source;n.bindTexture(l,t.__webglTexture,e.TEXTURE0+s);const u=i.get(h);if(h.version!==u.__version||!0===c){n.activeTexture(e.TEXTURE0+s);const t=ut.getPrimaries(ut.workingColorSpace),i=r.colorSpace===ye?null:ut.getPrimaries(r.colorSpace),p=r.colorSpace===ye||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,p);const m=function(e){return!o&&(e.wrapS!==Z||e.wrapT!==Z||e.minFilter!==Q&&e.minFilter!==ne)}(r)&&!1===_(r.image);let f=b(r.image,m,!1,d);f=H(r,f);const g=_(f)||o,v=a.convert(r.format,r.colorSpace);let x,E=a.convert(r.type),T=S(r.internalFormat,v,E,r.colorSpace,r.isVideoTexture);D(l,r,g);const A=r.mipmaps,C=o&&!0!==r.isVideoTexture&&36196!==T,R=void 0===u.__version||!0===c,z=w(r,f,g);if(r.isDepthTexture)T=e.DEPTH_COMPONENT,o?T=r.type===ce?e.DEPTH_COMPONENT32F:r.type===le?e.DEPTH_COMPONENT24:r.type===he?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:r.type===ce&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===pe&&T===e.DEPTH_COMPONENT&&r.type!==se&&r.type!==le&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=le,E=a.convert(r.type)),r.format===me&&T===e.DEPTH_COMPONENT&&(T=e.DEPTH_STENCIL,r.type!==he&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=he,E=a.convert(r.type))),R&&(C?n.texStorage2D(e.TEXTURE_2D,1,T,f.width,f.height):n.texImage2D(e.TEXTURE_2D,0,T,f.width,f.height,0,v,E,null));else if(r.isDataTexture)if(A.length>0&&g){C&&R&&n.texStorage2D(e.TEXTURE_2D,z,T,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)x=A[t],C?n.texSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,v,E,x.data):n.texImage2D(e.TEXTURE_2D,t,T,x.width,x.height,0,v,E,x.data);r.generateMipmaps=!1}else C?(R&&n.texStorage2D(e.TEXTURE_2D,z,T,f.width,f.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,f.width,f.height,v,E,f.data)):n.texImage2D(e.TEXTURE_2D,0,T,f.width,f.height,0,v,E,f.data);else if(r.isCompressedTexture)if(r.isCompressedArrayTexture){C&&R&&n.texStorage3D(e.TEXTURE_2D_ARRAY,z,T,A[0].width,A[0].height,f.depth);for(let t=0,i=A.length;t<i;t++)x=A[t],r.format!==ue?null!==v?C?n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,x.width,x.height,f.depth,v,x.data,0,0):n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,T,x.width,x.height,f.depth,0,x.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C?n.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,x.width,x.height,f.depth,v,E,x.data):n.texImage3D(e.TEXTURE_2D_ARRAY,t,T,x.width,x.height,f.depth,0,v,E,x.data)}else{C&&R&&n.texStorage2D(e.TEXTURE_2D,z,T,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)x=A[t],r.format!==ue?null!==v?C?n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,v,x.data):n.compressedTexImage2D(e.TEXTURE_2D,t,T,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):C?n.texSubImage2D(e.TEXTURE_2D,t,0,0,x.width,x.height,v,E,x.data):n.texImage2D(e.TEXTURE_2D,t,T,x.width,x.height,0,v,E,x.data)}else if(r.isDataArrayTexture)C?(R&&n.texStorage3D(e.TEXTURE_2D_ARRAY,z,T,f.width,f.height,f.depth),n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,f.width,f.height,f.depth,v,E,f.data)):n.texImage3D(e.TEXTURE_2D_ARRAY,0,T,f.width,f.height,f.depth,0,v,E,f.data);else if(r.isData3DTexture)C?(R&&n.texStorage3D(e.TEXTURE_3D,z,T,f.width,f.height,f.depth),n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,f.width,f.height,f.depth,v,E,f.data)):n.texImage3D(e.TEXTURE_3D,0,T,f.width,f.height,f.depth,0,v,E,f.data);else if(r.isFramebufferTexture){if(R)if(C)n.texStorage2D(e.TEXTURE_2D,z,T,f.width,f.height);else{let t=f.width,i=f.height;for(let r=0;r<z;r++)n.texImage2D(e.TEXTURE_2D,r,T,t,i,0,v,E,null),t>>=1,i>>=1}}else if(A.length>0&&g){C&&R&&n.texStorage2D(e.TEXTURE_2D,z,T,A[0].width,A[0].height);for(let t=0,i=A.length;t<i;t++)x=A[t],C?n.texSubImage2D(e.TEXTURE_2D,t,0,0,v,E,x):n.texImage2D(e.TEXTURE_2D,t,T,v,E,x);r.generateMipmaps=!1}else C?(R&&n.texStorage2D(e.TEXTURE_2D,z,T,f.width,f.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,v,E,f)):n.texImage2D(e.TEXTURE_2D,0,T,v,E,f);y(r,g)&&M(l),u.__version=h.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version}function N(t,r,s,o,l,c){const d=a.convert(s.format,s.colorSpace),h=a.convert(s.type),p=S(s.internalFormat,d,h,s.colorSpace);if(!i.get(r).__hasExternalTextures){const t=Math.max(1,r.width>>c),i=Math.max(1,r.height>>c);l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?n.texImage3D(l,c,p,t,i,r.depth,0,d,h,null):n.texImage2D(l,c,p,t,i,0,d,h,null)}n.bindFramebuffer(e.FRAMEBUFFER,t),V(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,o,l,i.get(s).__webglTexture,0,B(r)):(l===e.TEXTURE_2D||l>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&l<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,o,l,i.get(s).__webglTexture,c),n.bindFramebuffer(e.FRAMEBUFFER,null)}function O(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let r=!0===o?e.DEPTH_COMPONENT24:e.DEPTH_COMPONENT16;if(i||V(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===ce?r=e.DEPTH_COMPONENT32F:t.type===le&&(r=e.DEPTH_COMPONENT24));const i=B(n);V(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,i,r,n.width,n.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,i,r,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,r,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const r=B(n);i&&!1===V(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):V(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=!0===n.isWebGLMultipleRenderTargets?n.texture:[n.texture];for(let r=0;r<t.length;r++){const s=t[r],o=a.convert(s.format,s.colorSpace),l=a.convert(s.type),c=S(s.internalFormat,o,l,s.colorSpace),d=B(n);i&&!1===V(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,d,c,n.width,n.height):V(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,d,c,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,c,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function F(t){const r=i.get(t),a=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),z(r.depthTexture,0);const a=i.get(r.depthTexture).__webglTexture,s=B(r);if(r.depthTexture.format===pe)V(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0,s):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0);else{if(r.depthTexture.format!==me)throw new Error("Unknown depthTexture format");V(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,a,0,s):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,a,0)}}(r.__webglFramebuffer,t)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=e.createRenderbuffer(),O(r.__webglDepthbuffer[i],t,!1)}else n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),O(r.__webglDepthbuffer,t,!1);n.bindFramebuffer(e.FRAMEBUFFER,null)}function B(e){return Math.min(h,e.samples)}function V(e){const n=i.get(e);return o&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function H(e,n){const i=e.colorSpace,r=e.format,a=e.type;return!0===e.isCompressedTexture||!0===e.isVideoTexture||e.format===Be||i!==Se&&i!==ye&&(ut.getTransfer(i)===Ae?!1===o?!0===t.has("EXT_sRGB")&&r===ue?(e.format=Be,e.minFilter=ne,e.generateMipmaps=!1):n=gt.sRGBToLinear(n):r===ue&&a===ae||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",i)),n}this.allocateTextureUnit=function(){const e=R;return e>=l&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+l),R+=1,e},this.resetTextureUnits=function(){R=0},this.setTexture2D=z,this.setTexture2DArray=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?U(a,t,r):n.bindTexture(e.TEXTURE_2D_ARRAY,a.__webglTexture,e.TEXTURE0+r)},this.setTexture3D=function(t,r){const a=i.get(t);t.version>0&&a.__version!==t.version?U(a,t,r):n.bindTexture(e.TEXTURE_3D,a.__webglTexture,e.TEXTURE0+r)},this.setTextureCube=function(t,r){const s=i.get(t);t.version>0&&s.__version!==t.version?function(t,r,s){if(6!==r.image.length)return;const l=I(t,r),d=r.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+s);const h=i.get(d);if(d.version!==h.__version||!0===l){n.activeTexture(e.TEXTURE0+s);const t=ut.getPrimaries(ut.workingColorSpace),i=r.colorSpace===ye?null:ut.getPrimaries(r.colorSpace),u=r.colorSpace===ye||t===i?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);const p=r.isCompressedTexture||r.image[0].isCompressedTexture,m=r.image[0]&&r.image[0].isDataTexture,f=[];for(let e=0;e<6;e++)f[e]=p||m?m?r.image[e].image:r.image[e]:b(r.image[e],!1,!0,c),f[e]=H(r,f[e]);const g=f[0],v=_(g)||o,x=a.convert(r.format,r.colorSpace),E=a.convert(r.type),T=S(r.internalFormat,x,E,r.colorSpace),A=o&&!0!==r.isVideoTexture,C=void 0===h.__version||!0===l;let R,z=w(r,g,v);if(D(e.TEXTURE_CUBE_MAP,r,v),p){A&&C&&n.texStorage2D(e.TEXTURE_CUBE_MAP,z,T,g.width,g.height);for(let t=0;t<6;t++){R=f[t].mipmaps;for(let i=0;i<R.length;i++){const a=R[i];r.format!==ue?null!==x?A?n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,a.width,a.height,x,a.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,T,a.width,a.height,0,a.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,a.width,a.height,x,E,a.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,T,a.width,a.height,0,x,E,a.data)}}}else{R=r.mipmaps,A&&C&&(R.length>0&&z++,n.texStorage2D(e.TEXTURE_CUBE_MAP,z,T,f[0].width,f[0].height));for(let t=0;t<6;t++)if(m){A?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,f[t].width,f[t].height,x,E,f[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,T,f[t].width,f[t].height,0,x,E,f[t].data);for(let i=0;i<R.length;i++){const r=R[i].image[t].image;A?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,r.width,r.height,x,E,r.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,T,r.width,r.height,0,x,E,r.data)}}else{A?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,x,E,f[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,T,x,E,f[t]);for(let i=0;i<R.length;i++){const r=R[i];A?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,0,0,x,E,r.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i+1,T,x,E,r.image[t])}}}y(r,v)&&M(e.TEXTURE_CUBE_MAP),h.__version=d.version,r.onUpdate&&r.onUpdate(r)}t.__version=r.version}(s,t,r):n.bindTexture(e.TEXTURE_CUBE_MAP,s.__webglTexture,e.TEXTURE0+r)},this.rebindTextures=function(t,n,r){const a=i.get(t);void 0!==n&&N(a.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0),void 0!==r&&F(t)},this.setupRenderTarget=function(t){const l=t.texture,c=i.get(t),d=i.get(l);t.addEventListener("dispose",A),!0!==t.isWebGLMultipleRenderTargets&&(void 0===d.__webglTexture&&(d.__webglTexture=e.createTexture()),d.__version=l.version,s.memory.textures++);const h=!0===t.isWebGLCubeRenderTarget,u=!0===t.isWebGLMultipleRenderTargets,p=_(t)||o;if(h){c.__webglFramebuffer=[];for(let t=0;t<6;t++)if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer[t]=[];for(let n=0;n<l.mipmaps.length;n++)c.__webglFramebuffer[t][n]=e.createFramebuffer()}else c.__webglFramebuffer[t]=e.createFramebuffer()}else{if(o&&l.mipmaps&&l.mipmaps.length>0){c.__webglFramebuffer=[];for(let t=0;t<l.mipmaps.length;t++)c.__webglFramebuffer[t]=e.createFramebuffer()}else c.__webglFramebuffer=e.createFramebuffer();if(u)if(r.drawBuffers){const n=t.texture;for(let t=0,r=n.length;t<r;t++){const r=i.get(n[t]);void 0===r.__webglTexture&&(r.__webglTexture=e.createTexture(),s.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(o&&t.samples>0&&!1===V(t)){const i=u?l:[l];c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,c.__webglMultisampledFramebuffer);for(let n=0;n<i.length;n++){const r=i[n];c.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,c.__webglColorRenderbuffer[n]);const s=a.convert(r.format,r.colorSpace),o=a.convert(r.type),l=S(r.internalFormat,s,o,r.colorSpace,!0===t.isXRRenderTarget),d=B(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,d,l,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,c.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),O(c.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(h){n.bindTexture(e.TEXTURE_CUBE_MAP,d.__webglTexture),D(e.TEXTURE_CUBE_MAP,l,p);for(let n=0;n<6;n++)if(o&&l.mipmaps&&l.mipmaps.length>0)for(let i=0;i<l.mipmaps.length;i++)N(c.__webglFramebuffer[n][i],t,l,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else N(c.__webglFramebuffer[n],t,l,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);y(l,p)&&M(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(u){const r=t.texture;for(let a=0,s=r.length;a<s;a++){const s=r[a],o=i.get(s);n.bindTexture(e.TEXTURE_2D,o.__webglTexture),D(e.TEXTURE_2D,s,p),N(c.__webglFramebuffer,t,s,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D,0),y(s,p)&&M(e.TEXTURE_2D)}n.unbindTexture()}else{let i=e.TEXTURE_2D;if((t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(o?i=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(i,d.__webglTexture),D(i,l,p),o&&l.mipmaps&&l.mipmaps.length>0)for(let n=0;n<l.mipmaps.length;n++)N(c.__webglFramebuffer[n],t,l,e.COLOR_ATTACHMENT0,i,n);else N(c.__webglFramebuffer,t,l,e.COLOR_ATTACHMENT0,i,0);y(l,p)&&M(i),n.unbindTexture()}t.depthBuffer&&F(t)},this.updateRenderTargetMipmap=function(t){const r=_(t)||o,a=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,o=a.length;s<o;s++){const o=a[s];if(y(o,r)){const r=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=i.get(o).__webglTexture;n.bindTexture(r,a),M(r),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(o&&t.samples>0&&!1===V(t)){const r=t.isWebGLMultipleRenderTargets?t.texture:[t.texture],a=t.width,s=t.height;let o=e.COLOR_BUFFER_BIT;const l=[],c=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,d=i.get(t),h=!0===t.isWebGLMultipleRenderTargets;if(h)for(let t=0;t<r.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let n=0;n<r.length;n++){l.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&l.push(c);const u=void 0!==d.__ignoreDepthValues&&d.__ignoreDepthValues;if(!1===u&&(t.depthBuffer&&(o|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(o|=e.STENCIL_BUFFER_BIT)),h&&e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[n]),!0===u&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[c]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[c])),h){const t=i.get(r[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,s,0,0,a,s,o,e.NEAREST),p&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l)}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),h)for(let t=0;t<r.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const a=i.get(r[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=F,this.setupFrameBufferTexture=N,this.useMultisampledRTT=V}function Ss(e,t,n){const i=n.isWebGL2;return{convert:function(n,r=""){let a;const s=ut.getTransfer(r);if(n===ae)return e.UNSIGNED_BYTE;if(1017===n)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===n)return e.UNSIGNED_SHORT_5_5_5_1;if(1010===n)return e.BYTE;if(1011===n)return e.SHORT;if(n===se)return e.UNSIGNED_SHORT;if(n===oe)return e.INT;if(n===le)return e.UNSIGNED_INT;if(n===ce)return e.FLOAT;if(n===de)return i?e.HALF_FLOAT:(a=t.get("OES_texture_half_float"),null!==a?a.HALF_FLOAT_OES:null);if(1021===n)return e.ALPHA;if(n===ue)return e.RGBA;if(1024===n)return e.LUMINANCE;if(1025===n)return e.LUMINANCE_ALPHA;if(n===pe)return e.DEPTH_COMPONENT;if(n===me)return e.DEPTH_STENCIL;if(n===Be)return a=t.get("EXT_sRGB"),null!==a?a.SRGB_ALPHA_EXT:null;if(1028===n)return e.RED;if(1029===n)return e.RED_INTEGER;if(1030===n)return e.RG;if(1031===n)return e.RG_INTEGER;if(1033===n)return e.RGBA_INTEGER;if(n===fe||n===ge||n===ve||n===xe)if(s===Ae){if(a=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===a)return null;if(n===fe)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===ge)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===ve)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===xe)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(a=t.get("WEBGL_compressed_texture_s3tc"),null===a)return null;if(n===fe)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===ge)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===ve)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===xe)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===n||35841===n||35842===n||35843===n){if(a=t.get("WEBGL_compressed_texture_pvrtc"),null===a)return null;if(35840===n)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===n)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===n)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===n)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===n)return a=t.get("WEBGL_compressed_texture_etc1"),null!==a?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===n||37496===n){if(a=t.get("WEBGL_compressed_texture_etc"),null===a)return null;if(37492===n)return s===Ae?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(37496===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(37808===n||37809===n||37810===n||37811===n||37812===n||37813===n||37814===n||37815===n||37816===n||37817===n||37818===n||37819===n||37820===n||37821===n){if(a=t.get("WEBGL_compressed_texture_astc"),null===a)return null;if(37808===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===n)return s===Ae?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===be||36494===n||36495===n){if(a=t.get("EXT_texture_compression_bptc"),null===a)return null;if(n===be)return s===Ae?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(36494===n)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(36495===n)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===n||36284===n||36285===n||36286===n){if(a=t.get("EXT_texture_compression_rgtc"),null===a)return null;if(n===be)return a.COMPRESSED_RED_RGTC1_EXT;if(36284===n)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(36285===n)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(36286===n)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===he?i?e.UNSIGNED_INT_24_8:(a=t.get("WEBGL_depth_texture"),null!==a?a.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[n]?e[n]:null}}}class ws extends Oi{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Es extends zn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Ts={type:"move"};class As{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Es,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Es,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Ct,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Ct),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Es,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Ct,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Ct),this._grip}dispatchEvent(e){return null!==this._targetRay&&this._targetRay.dispatchEvent(e),null!==this._grip&&this._grip.dispatchEvent(e),null!==this._hand&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(e,t,n){let i=null,r=null,a=null;const s=this._targetRay,o=this._grip,l=this._hand;if(e&&"visible-blurred"!==t.session.visibilityState){if(l&&e.hand){a=!0;for(const a of e.hand.values()){const e=t.getJointPose(a,n),i=this._getHandJoint(l,a);null!==e&&(i.matrix.fromArray(e.transform.matrix),i.matrix.decompose(i.position,i.rotation,i.scale),i.matrixWorldNeedsUpdate=!0,i.jointRadius=e.radius),i.visible=null!==e}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],s=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&s>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!l.inputState.pinching&&s<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else null!==o&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==s&&(i=t.getPose(e.targetRaySpace,n),null===i&&null!==r&&(i=r),null!==i&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(Ts)))}return null!==s&&(s.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}_getHandJoint(e,t){if(void 0===e.joints[t.jointName]){const n=new Es;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}class Cs extends Ge{constructor(e,t){super();const n=this;let i=null,r=1,a=null,s="local-floor",o=1,l=null,c=null,d=null,h=null,u=null,p=null;const m=t.getContextAttributes();let f=null,g=null;const v=[],x=[],b=new et;let _=null;const y=new Oi;y.layers.enable(1),y.viewport=new Mt;const M=new Oi;M.layers.enable(2),M.viewport=new Mt;const S=[y,M],w=new ws;w.layers.enable(1),w.layers.enable(2);let E=null,T=null;function A(e){const t=x.indexOf(e.inputSource);if(-1===t)return;const n=v[t];void 0!==n&&(n.update(e.inputSource,e.frame,l||a),n.dispatchEvent({type:e.type,data:e.inputSource}))}function C(){i.removeEventListener("select",A),i.removeEventListener("selectstart",A),i.removeEventListener("selectend",A),i.removeEventListener("squeeze",A),i.removeEventListener("squeezestart",A),i.removeEventListener("squeezeend",A),i.removeEventListener("end",C),i.removeEventListener("inputsourceschange",R);for(let e=0;e<v.length;e++){const t=x[e];null!==t&&(x[e]=null,v[e].disconnect(t))}E=null,T=null,e.setRenderTarget(f),u=null,h=null,d=null,i=null,g=null,D.stop(),n.isPresenting=!1,e.setPixelRatio(_),e.setSize(b.width,b.height,!1),n.dispatchEvent({type:"sessionend"})}function R(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t],i=x.indexOf(n);i>=0&&(x[i]=null,v[i].disconnect(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t];let i=x.indexOf(n);if(-1===i){for(let e=0;e<v.length;e++){if(e>=x.length){x.push(n),i=e;break}if(null===x[e]){x[e]=n,i=e;break}}if(-1===i)break}const r=v[i];r&&r.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=v[e];return void 0===t&&(t=new As,v[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=v[e];return void 0===t&&(t=new As,v[e]=t),t.getGripSpace()},this.getHand=function(e){let t=v[e];return void 0===t&&(t=new As,v[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){s=e,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(e){l=e},this.getBaseLayer=function(){return null!==h?h:u},this.getBinding=function(){return d},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(c){if(i=c,null!==i){if(f=e.getRenderTarget(),i.addEventListener("select",A),i.addEventListener("selectstart",A),i.addEventListener("selectend",A),i.addEventListener("squeeze",A),i.addEventListener("squeezestart",A),i.addEventListener("squeezeend",A),i.addEventListener("end",C),i.addEventListener("inputsourceschange",R),!0!==m.xrCompatible&&await t.makeXRCompatible(),_=e.getPixelRatio(),e.getSize(b),void 0===i.renderState.layers||!1===e.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};u=new XRWebGLLayer(i,t,n),i.updateRenderState({baseLayer:u}),e.setPixelRatio(1),e.setSize(u.framebufferWidth,u.framebufferHeight,!1),g=new wt(u.framebufferWidth,u.framebufferHeight,{format:ue,type:ae,colorSpace:e.outputColorSpace,stencilBuffer:m.stencil})}else{let n=null,a=null,s=null;m.depth&&(s=m.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=m.stencil?me:pe,a=m.stencil?he:le);const o={colorFormat:t.RGBA8,depthFormat:s,scaleFactor:r};d=new XRWebGLBinding(i,t),h=d.createProjectionLayer(o),i.updateRenderState({layers:[h]}),e.setPixelRatio(1),e.setSize(h.textureWidth,h.textureHeight,!1),g=new wt(h.textureWidth,h.textureHeight,{format:ue,type:ae,depthTexture:new Dr(h.textureWidth,h.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:m.stencil,colorSpace:e.outputColorSpace,samples:m.antialias?4:0}),e.properties.get(g).__ignoreDepthValues=h.ignoreDepthValues}g.isXRRenderTarget=!0,this.setFoveation(o),l=null,a=await i.requestReferenceSpace(s),D.setContext(i),D.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==i)return i.environmentBlendMode};const z=new Ct,L=new Ct;function P(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(null===i)return;w.near=M.near=y.near=e.near,w.far=M.far=y.far=e.far,E===w.near&&T===w.far||(i.updateRenderState({depthNear:w.near,depthFar:w.far}),E=w.near,T=w.far);const t=e.parent,n=w.cameras;P(w,t);for(let i=0;i<n.length;i++)P(n[i],t);2===n.length?function(e,t,n){z.setFromMatrixPosition(t.matrixWorld),L.setFromMatrixPosition(n.matrixWorld);const i=z.distanceTo(L),r=t.projectionMatrix.elements,a=n.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],d=(r[8]-1)/r[0],h=(a[8]+1)/a[0],u=s*d,p=s*h,m=i/(-d+h),f=m*-d;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(f),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const g=s+m,v=o+m,x=u-f,b=p+(i-f),_=l*o/v*g,y=c*o/v*g;e.projectionMatrix.makePerspective(x,b,_,y,g,v),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}(w,y,M):w.projectionMatrix.copy(y.projectionMatrix),function(e,t,n){null===n?e.matrix.copy(t.matrixWorld):(e.matrix.copy(n.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*qe*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,w,t)},this.getCamera=function(){return w},this.getFoveation=function(){if(null!==h||null!==u)return o},this.setFoveation=function(e){o=e,null!==h&&(h.fixedFoveation=e),null!==u&&void 0!==u.fixedFoveation&&(u.fixedFoveation=e)};let k=null;const D=new Ki;D.setAnimationLoop((function(t,i){if(c=i.getViewerPose(l||a),p=i,null!==c){const t=c.views;null!==u&&(e.setRenderTargetFramebuffer(g,u.framebuffer),e.setRenderTarget(g));let n=!1;t.length!==w.cameras.length&&(w.cameras.length=0,n=!0);for(let i=0;i<t.length;i++){const r=t[i];let a=null;if(null!==u)a=u.getViewport(r);else{const t=d.getViewSubImage(h,r);a=t.viewport,0===i&&(e.setRenderTargetTextures(g,t.colorTexture,h.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(g))}let s=S[i];void 0===s&&(s=new Oi,s.layers.enable(i),s.viewport=new Mt,S[i]=s),s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(r.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(a.x,a.y,a.width,a.height),0===i&&(w.matrix.copy(s.matrix),w.matrix.decompose(w.position,w.quaternion,w.scale)),!0===n&&w.cameras.push(s)}}for(let e=0;e<v.length;e++){const t=x[e],n=v[e];null!==t&&void 0!==n&&n.update(t,i,l||a)}k&&k(t,i),i.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:i}),p=null})),this.setAnimationLoop=function(e){k=e},this.dispose=function(){}}}function Rs(e,t){function n(e,t){!0===e.matrixAutoUpdate&&e.updateMatrix(),t.value.copy(e.matrix)}function i(i,r){i.opacity.value=r.opacity,r.color&&i.diffuse.value.copy(r.color),r.emissive&&i.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),r.map&&(i.map.value=r.map,n(r.map,i.mapTransform)),r.alphaMap&&(i.alphaMap.value=r.alphaMap,n(r.alphaMap,i.alphaMapTransform)),r.bumpMap&&(i.bumpMap.value=r.bumpMap,n(r.bumpMap,i.bumpMapTransform),i.bumpScale.value=r.bumpScale,1===r.side&&(i.bumpScale.value*=-1)),r.normalMap&&(i.normalMap.value=r.normalMap,n(r.normalMap,i.normalMapTransform),i.normalScale.value.copy(r.normalScale),1===r.side&&i.normalScale.value.negate()),r.displacementMap&&(i.displacementMap.value=r.displacementMap,n(r.displacementMap,i.displacementMapTransform),i.displacementScale.value=r.displacementScale,i.displacementBias.value=r.displacementBias),r.emissiveMap&&(i.emissiveMap.value=r.emissiveMap,n(r.emissiveMap,i.emissiveMapTransform)),r.specularMap&&(i.specularMap.value=r.specularMap,n(r.specularMap,i.specularMapTransform)),r.alphaTest>0&&(i.alphaTest.value=r.alphaTest);const a=t.get(r).envMap;if(a&&(i.envMap.value=a,i.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,i.reflectivity.value=r.reflectivity,i.ior.value=r.ior,i.refractionRatio.value=r.refractionRatio),r.lightMap){i.lightMap.value=r.lightMap;const t=!0===e._useLegacyLights?Math.PI:1;i.lightMapIntensity.value=r.lightMapIntensity*t,n(r.lightMap,i.lightMapTransform)}r.aoMap&&(i.aoMap.value=r.aoMap,i.aoMapIntensity.value=r.aoMapIntensity,n(r.aoMap,i.aoMapTransform))}return{refreshFogUniforms:function(t,n){n.color.getRGB(t.fogColor.value,Di(e)),n.isFog?(t.fogNear.value=n.near,t.fogFar.value=n.far):n.isFogExp2&&(t.fogDensity.value=n.density)},refreshMaterialUniforms:function(e,r,a,s,o){r.isMeshBasicMaterial||r.isMeshLambertMaterial?i(e,r):r.isMeshToonMaterial?(i(e,r),function(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(e,r)):r.isMeshPhongMaterial?(i(e,r),function(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}(e,r)):r.isMeshStandardMaterial?(i(e,r),function(e,i){e.metalness.value=i.metalness,i.metalnessMap&&(e.metalnessMap.value=i.metalnessMap,n(i.metalnessMap,e.metalnessMapTransform)),e.roughness.value=i.roughness,i.roughnessMap&&(e.roughnessMap.value=i.roughnessMap,n(i.roughnessMap,e.roughnessMapTransform));const r=t.get(i).envMap;r&&(e.envMapIntensity.value=i.envMapIntensity)}(e,r),r.isMeshPhysicalMaterial&&function(e,t,i){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap,n(t.sheenColorMap,e.sheenColorMapTransform)),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap,n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform))),t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap,n(t.clearcoatMap,e.clearcoatMapTransform)),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap,n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)),t.clearcoatNormalMap&&(e.clearcoatNormalMap.value=t.clearcoatNormalMap,n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform),e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),1===t.side&&e.clearcoatNormalScale.value.negate())),t.iridescence>0&&(e.iridescence.value=t.iridescence,e.iridescenceIOR.value=t.iridescenceIOR,e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0],e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1],t.iridescenceMap&&(e.iridescenceMap.value=t.iridescenceMap,n(t.iridescenceMap,e.iridescenceMapTransform)),t.iridescenceThicknessMap&&(e.iridescenceThicknessMap.value=t.iridescenceThicknessMap,n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform))),t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=i.texture,e.transmissionSamplerSize.value.set(i.width,i.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap,n(t.transmissionMap,e.transmissionMapTransform)),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap,n(t.thicknessMap,e.thicknessMapTransform)),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor)),t.anisotropy>0&&(e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation)),t.anisotropyMap&&(e.anisotropyMap.value=t.anisotropyMap,n(t.anisotropyMap,e.anisotropyMapTransform))),e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap,n(t.specularColorMap,e.specularColorMapTransform)),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap,n(t.specularIntensityMap,e.specularIntensityMapTransform))}(e,r,o)):r.isMeshMatcapMaterial?(i(e,r),function(e,t){t.matcap&&(e.matcap.value=t.matcap)}(e,r)):r.isMeshDepthMaterial?i(e,r):r.isMeshDistanceMaterial?(i(e,r),function(e,n){const i=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(i.matrixWorld),e.nearDistance.value=i.shadow.camera.near,e.farDistance.value=i.shadow.camera.far}(e,r)):r.isMeshNormalMaterial?i(e,r):r.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform))}(e,r),r.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(e,r)):r.isPointsMaterial?function(e,t,i,r){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*i,e.scale.value=.5*r,t.map&&(e.map.value=t.map,n(t.map,e.uvTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,r,a,s):r.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map,n(t.map,e.mapTransform)),t.alphaMap&&(e.alphaMap.value=t.alphaMap,n(t.alphaMap,e.alphaMapTransform)),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}(e,r):r.isShadowMaterial?(e.color.value.copy(r.color),e.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function zs(e,t,n,i){let r={},a={},s=[];const o=n.isWebGL2?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(e,t,n){const i=e.value;if(void 0===n[t]){if("number"==typeof i)n[t]=i;else{const e=Array.isArray(i)?i:[i],r=[];for(let t=0;t<e.length;t++)r.push(e[t].clone());n[t]=r}return!0}if("number"==typeof i){if(n[t]!==i)return n[t]=i,!0}else{const e=Array.isArray(n[t])?n[t]:[n[t]],r=Array.isArray(i)?i:[i];for(let t=0;t<e.length;t++){const n=e[t];if(!1===n.equals(r[t]))return n.copy(r[t]),!0}}return!1}function c(e){const t={boundary:0,storage:0};return"number"==typeof e?(t.boundary=4,t.storage=4):e.isVector2?(t.boundary=8,t.storage=8):e.isVector3||e.isColor?(t.boundary=16,t.storage=12):e.isVector4?(t.boundary=16,t.storage=16):e.isMatrix3?(t.boundary=48,t.storage=48):e.isMatrix4?(t.boundary=64,t.storage=64):e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e),t}function d(t){const n=t.target;n.removeEventListener("dispose",d);const i=s.indexOf(n.__bindingPointIndex);s.splice(i,1),e.deleteBuffer(r[n.id]),delete r[n.id],delete a[n.id]}return{bind:function(e,t){const n=t.program;i.uniformBlockBinding(e,n)},update:function(n,h){let u=r[n.id];void 0===u&&(function(e){const t=e.uniforms;let n=0;const i=16;let r=0;for(let a=0,s=t.length;a<s;a++){const e=t[a],s={boundary:0,storage:0},o=Array.isArray(e.value)?e.value:[e.value];for(let t=0,n=o.length;t<n;t++){const e=c(o[t]);s.boundary+=e.boundary,s.storage+=e.storage}e.__data=new Float32Array(s.storage/Float32Array.BYTES_PER_ELEMENT),e.__offset=n,a>0&&(r=n%i,0!==r&&i-r-s.boundary<0&&(n+=i-r,e.__offset=n)),n+=s.storage}r=n%i,r>0&&(n+=i-r),e.__size=n,e.__cache={}}(n),u=function(t){const n=function(){for(let e=0;e<o;e++)if(-1===s.indexOf(e))return s.push(e),e;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();t.__bindingPointIndex=n;const i=e.createBuffer(),r=t.__size,a=t.usage;return e.bindBuffer(e.UNIFORM_BUFFER,i),e.bufferData(e.UNIFORM_BUFFER,r,a),e.bindBuffer(e.UNIFORM_BUFFER,null),e.bindBufferBase(e.UNIFORM_BUFFER,n,i),i}(n),r[n.id]=u,n.addEventListener("dispose",d));const p=h.program;i.updateUBOMapping(n,p);const m=t.render.frame;a[n.id]!==m&&(function(t){const n=r[t.id],i=t.uniforms,a=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let r=0,s=i.length;r<s;r++){const t=i[r];if(!0===l(t,r,a)){const n=t.__offset,i=Array.isArray(t.value)?t.value:[t.value];let r=0;for(let a=0;a<i.length;a++){const s=i[a],o=c(s);"number"==typeof s?(t.__data[0]=s,e.bufferSubData(e.UNIFORM_BUFFER,n+r,t.__data)):s.isMatrix3?(t.__data[0]=s.elements[0],t.__data[1]=s.elements[1],t.__data[2]=s.elements[2],t.__data[3]=s.elements[0],t.__data[4]=s.elements[3],t.__data[5]=s.elements[4],t.__data[6]=s.elements[5],t.__data[7]=s.elements[0],t.__data[8]=s.elements[6],t.__data[9]=s.elements[7],t.__data[10]=s.elements[8],t.__data[11]=s.elements[0]):(s.toArray(t.__data,r),r+=o.storage/Float32Array.BYTES_PER_ELEMENT)}e.bufferSubData(e.UNIFORM_BUFFER,n,t.__data)}}e.bindBuffer(e.UNIFORM_BUFFER,null)}(n),a[n.id]=m)},dispose:function(){for(const t in r)e.deleteBuffer(r[t]);s=[],r={},a={}}}}class Ls{constructor(e={}){const{canvas:t=at(),context:n=null,depth:i=!0,stencil:r=!0,alpha:a=!1,antialias:s=!1,premultipliedAlpha:o=!0,preserveDrawingBuffer:l=!1,powerPreference:c="default",failIfMajorPerformanceCaveat:d=!1}=e;let h;this.isWebGLRenderer=!0,h=null!==n?n.getContextAttributes().alpha:a;const u=new Uint32Array(4),p=new Int32Array(4);let m=null,f=null;const g=[],v=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Me,this._useLegacyLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const x=this;let b=!1,_=0,y=0,M=null,S=-1,w=null;const T=new Mt,A=new Mt;let C=null;const R=new jn(0);let z=0,L=t.width,P=t.height,k=1,D=null,I=null;const U=new Mt(0,0,L,P),N=new Mt(0,0,L,P);let O=!1;const F=new Yi;let B=!1,V=!1,H=null;const G=new an,W=new et,X=new Ct,q={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function j(){return null===M?k:1}let $,Y,K,Z,J,Q,ee,te,ne,ie,oe,pe,me,fe,ge,ve,xe,be,_e,ye,we,Ee,Te,Ae,Ce=n;function Re(e,n){for(let i=0;i<e.length;i++){const r=e[i],a=t.getContext(r,n);if(null!==a)return a}return null}try{const e={alpha:!0,depth:i,stencil:r,antialias:s,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:d};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${E}`),t.addEventListener("webglcontextlost",Pe,!1),t.addEventListener("webglcontextrestored",ke,!1),t.addEventListener("webglcontextcreationerror",De,!1),null===Ce){const t=["webgl2","webgl","experimental-webgl"];if(!0===x.isWebGL1Renderer&&t.shift(),Ce=Re(t,e),null===Ce)throw Re(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}"undefined"!=typeof WebGLRenderingContext&&Ce instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),void 0===Ce.getShaderPrecisionFormat&&(Ce.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch($e){throw console.error("THREE.WebGLRenderer: "+$e.message),$e}function ze(){$=new Tr(Ce),Y=new sr(Ce,$,e),$.init(Y),Ee=new Ss(Ce,$,Y),K=new ys(Ce,$,Y),Z=new Rr(Ce),J=new os,Q=new Ms(Ce,$,K,J,Y,Ee,Z),ee=new lr(x),te=new Er(x),ne=new Zi(Ce,Y),Te=new rr(Ce,$,ne,Y),ie=new Ar(Ce,ne,Z,Te),oe=new kr(Ce,ie,ne,Z),_e=new Pr(Ce,Y,Q),ve=new or(J),pe=new ss(x,ee,te,$,Y,Te,ve),me=new Rs(x,J),fe=new hs,ge=new vs($,Y),be=new ir(x,ee,te,K,oe,h,o),xe=new _s(x,oe,Y),Ae=new zs(Ce,Z,Y,K),ye=new ar(Ce,$,Z,Y),we=new Cr(Ce,$,Z,Y),Z.programs=pe.programs,x.capabilities=Y,x.extensions=$,x.properties=J,x.renderLists=fe,x.shadowMap=xe,x.state=K,x.info=Z}ze();const Le=new Cs(x,Ce);function Pe(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),b=!0}function ke(){console.log("THREE.WebGLRenderer: Context Restored."),b=!1;const e=Z.autoReset,t=xe.enabled,n=xe.autoUpdate,i=xe.needsUpdate,r=xe.type;ze(),Z.autoReset=e,xe.enabled=t,xe.autoUpdate=n,xe.needsUpdate=i,xe.type=r}function De(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Ie(e){const t=e.target;t.removeEventListener("dispose",Ie),function(e){(function(e){const t=J.get(e).programs;void 0!==t&&(t.forEach((function(e){pe.releaseProgram(e)})),e.isShaderMaterial&&pe.releaseShaderCache(e))})(e),J.remove(e)}(t)}function Ue(e,t,n){!0===e.transparent&&2===e.side&&!1===e.forceSinglePass?(e.side=1,e.needsUpdate=!0,Xe(e,t,n),e.side=0,e.needsUpdate=!0,Xe(e,t,n),e.side=2):Xe(e,t,n)}this.xr=Le,this.getContext=function(){return Ce},this.getContextAttributes=function(){return Ce.getContextAttributes()},this.forceContextLoss=function(){const e=$.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=$.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return k},this.setPixelRatio=function(e){void 0!==e&&(k=e,this.setSize(L,P,!1))},this.getSize=function(e){return e.set(L,P)},this.setSize=function(e,n,i=!0){Le.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(L=e,P=n,t.width=Math.floor(e*k),t.height=Math.floor(n*k),!0===i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return e.set(L*k,P*k).floor()},this.setDrawingBufferSize=function(e,n,i){L=e,P=n,k=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return e.copy(T)},this.getViewport=function(e){return e.copy(U)},this.setViewport=function(e,t,n,i){e.isVector4?U.set(e.x,e.y,e.z,e.w):U.set(e,t,n,i),K.viewport(T.copy(U).multiplyScalar(k).floor())},this.getScissor=function(e){return e.copy(N)},this.setScissor=function(e,t,n,i){e.isVector4?N.set(e.x,e.y,e.z,e.w):N.set(e,t,n,i),K.scissor(A.copy(N).multiplyScalar(k).floor())},this.getScissorTest=function(){return O},this.setScissorTest=function(e){K.setScissorTest(O=e)},this.setOpaqueSort=function(e){D=e},this.setTransparentSort=function(e){I=e},this.getClearColor=function(e){return e.copy(be.getClearColor())},this.setClearColor=function(){be.setClearColor.apply(be,arguments)},this.getClearAlpha=function(){return be.getClearAlpha()},this.setClearAlpha=function(){be.setClearAlpha.apply(be,arguments)},this.clear=function(e=!0,t=!0,n=!0){let i=0;if(e){let e=!1;if(null!==M){const t=M.texture.format;e=1033===t||1031===t||1029===t}if(e){const e=M.texture.type,t=e===ae||e===le||e===se||e===he||1017===e||1018===e,n=be.getClearColor(),i=be.getClearAlpha(),r=n.r,a=n.g,s=n.b;t?(u[0]=r,u[1]=a,u[2]=s,u[3]=i,Ce.clearBufferuiv(Ce.COLOR,0,u)):(p[0]=r,p[1]=a,p[2]=s,p[3]=i,Ce.clearBufferiv(Ce.COLOR,0,p))}else i|=Ce.COLOR_BUFFER_BIT}t&&(i|=Ce.DEPTH_BUFFER_BIT),n&&(i|=Ce.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Ce.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",Pe,!1),t.removeEventListener("webglcontextrestored",ke,!1),t.removeEventListener("webglcontextcreationerror",De,!1),fe.dispose(),ge.dispose(),J.dispose(),ee.dispose(),te.dispose(),oe.dispose(),Te.dispose(),Ae.dispose(),pe.dispose(),Le.dispose(),Le.removeEventListener("sessionstart",Oe),Le.removeEventListener("sessionend",Fe),H&&(H.dispose(),H=null),Be.stop()},this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=q);const s=r.isMesh&&r.matrixWorld.determinant()<0,o=function(e,t,n,i,r){!0!==t.isScene&&(t=q),Q.resetTextureUnits();const a=t.fog,s=i.isMeshStandardMaterial?t.environment:null,o=null===M?x.outputColorSpace:!0===M.isXRRenderTarget?M.texture.colorSpace:Se,l=(i.isMeshStandardMaterial?te:ee).get(i.envMap||s),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,d=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),h=!!n.morphAttributes.position,u=!!n.morphAttributes.normal,p=!!n.morphAttributes.color;let m=0;i.toneMapped&&(null!==M&&!0!==M.isXRRenderTarget||(m=x.toneMapping));const g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,b=J.get(i),_=f.state.lights;if(!0===B&&(!0===V||e!==w)){const t=e===w&&i.id===S;ve.setState(i,e,t)}let y=!1;i.version===b.__version?b.needsLights&&b.lightsStateVersion!==_.state.version||b.outputColorSpace!==o||r.isBatchedMesh&&!1===b.batching?y=!0:r.isBatchedMesh||!0!==b.batching?r.isInstancedMesh&&!1===b.instancing?y=!0:r.isInstancedMesh||!0!==b.instancing?r.isSkinnedMesh&&!1===b.skinning?y=!0:r.isSkinnedMesh||!0!==b.skinning?r.isInstancedMesh&&!0===b.instancingColor&&null===r.instanceColor||r.isInstancedMesh&&!1===b.instancingColor&&null!==r.instanceColor||b.envMap!==l||!0===i.fog&&b.fog!==a?y=!0:void 0===b.numClippingPlanes||b.numClippingPlanes===ve.numPlanes&&b.numIntersection===ve.numIntersection?(b.vertexAlphas!==c||b.vertexTangents!==d||b.morphTargets!==h||b.morphNormals!==u||b.morphColors!==p||b.toneMapping!==m||!0===Y.isWebGL2&&b.morphTargetsCount!==v)&&(y=!0):y=!0:y=!0:y=!0:y=!0:(y=!0,b.__version=i.version);let E=b.currentProgram;!0===y&&(E=Xe(i,t,r));let T=!1,A=!1,C=!1;const R=E.getUniforms(),z=b.uniforms;if(K.useProgram(E.program)&&(T=!0,A=!0,C=!0),i.id!==S&&(S=i.id,A=!0),T||w!==e){R.setValue(Ce,"projectionMatrix",e.projectionMatrix),R.setValue(Ce,"viewMatrix",e.matrixWorldInverse);const t=R.map.cameraPosition;void 0!==t&&t.setValue(Ce,X.setFromMatrixPosition(e.matrixWorld)),Y.logarithmicDepthBuffer&&R.setValue(Ce,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&R.setValue(Ce,"isOrthographic",!0===e.isOrthographicCamera),w!==e&&(w=e,A=!0,C=!0)}if(r.isSkinnedMesh){R.setOptional(Ce,r,"bindMatrix"),R.setOptional(Ce,r,"bindMatrixInverse");const e=r.skeleton;e&&(Y.floatVertexTextures?(null===e.boneTexture&&e.computeBoneTexture(),R.setValue(Ce,"boneTexture",e.boneTexture,Q)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}r.isBatchedMesh&&(R.setOptional(Ce,r,"batchingTexture"),R.setValue(Ce,"batchingTexture",r._matricesTexture,Q));const L=n.morphAttributes;var D,I;if((void 0!==L.position||void 0!==L.normal||void 0!==L.color&&!0===Y.isWebGL2)&&_e.update(r,n,E),(A||b.receiveShadow!==r.receiveShadow)&&(b.receiveShadow=r.receiveShadow,R.setValue(Ce,"receiveShadow",r.receiveShadow)),i.isMeshGouraudMaterial&&null!==i.envMap&&(z.envMap.value=l,z.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1),A&&(R.setValue(Ce,"toneMappingExposure",x.toneMappingExposure),b.needsLights&&(I=C,(D=z).ambientLightColor.needsUpdate=I,D.lightProbe.needsUpdate=I,D.directionalLights.needsUpdate=I,D.directionalLightShadows.needsUpdate=I,D.pointLights.needsUpdate=I,D.pointLightShadows.needsUpdate=I,D.spotLights.needsUpdate=I,D.spotLightShadows.needsUpdate=I,D.rectAreaLights.needsUpdate=I,D.hemisphereLights.needsUpdate=I),a&&!0===i.fog&&me.refreshFogUniforms(z,a),me.refreshMaterialUniforms(z,i,k,P,H),Fa.upload(Ce,qe(b),z,Q)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(Fa.upload(Ce,qe(b),z,Q),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&R.setValue(Ce,"center",r.center),R.setValue(Ce,"modelViewMatrix",r.modelViewMatrix),R.setValue(Ce,"normalMatrix",r.normalMatrix),R.setValue(Ce,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const e=i.uniformsGroups;for(let t=0,n=e.length;t<n;t++)if(Y.isWebGL2){const n=e[t];Ae.update(n,E),Ae.bind(n,E)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return E}(e,t,n,i,r);K.setMaterial(i,s);let l=n.index,c=1;if(!0===i.wireframe){if(l=ie.getWireframeAttribute(n),void 0===l)return;c=2}const d=n.drawRange,h=n.attributes.position;let u=d.start*c,p=(d.start+d.count)*c;null!==a&&(u=Math.max(u,a.start*c),p=Math.min(p,(a.start+a.count)*c)),null!==l?(u=Math.max(u,0),p=Math.min(p,l.count)):null!=h&&(u=Math.max(u,0),p=Math.min(p,h.count));const m=p-u;if(m<0||m===1/0)return;let g;Te.setup(r,i,o,n,l);let v=ye;if(null!==l&&(g=ne.get(l),v=we,v.setIndex(g)),r.isMesh)!0===i.wireframe?(K.setLineWidth(i.wireframeLinewidth*j()),v.setMode(Ce.LINES)):v.setMode(Ce.TRIANGLES);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),K.setLineWidth(e*j()),r.isLineSegments?v.setMode(Ce.LINES):r.isLineLoop?v.setMode(Ce.LINE_LOOP):v.setMode(Ce.LINE_STRIP)}else r.isPoints?v.setMode(Ce.POINTS):r.isSprite&&v.setMode(Ce.TRIANGLES);if(r.isBatchedMesh)v.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else if(r.isInstancedMesh)v.renderInstances(u,m,r.count);else if(n.isInstancedBufferGeometry){const e=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,t=Math.min(n.instanceCount,e);v.renderInstances(u,m,t)}else v.render(u,m)},this.compile=function(e,t,n=null){null===n&&(n=e),f=ge.get(n),f.init(),v.push(f),n.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(f.pushLight(e),e.castShadow&&f.pushShadow(e))})),e!==n&&e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(f.pushLight(e),e.castShadow&&f.pushShadow(e))})),f.setupLights(x._useLegacyLights);const i=new Set;return e.traverse((function(e){const t=e.material;if(t)if(Array.isArray(t))for(let r=0;r<t.length;r++){const a=t[r];Ue(a,n,e),i.add(a)}else Ue(t,n,e),i.add(t)})),v.pop(),f=null,i},this.compileAsync=function(e,t,n=null){const i=this.compile(e,t,n);return new Promise((t=>{function n(){i.forEach((function(e){J.get(e).currentProgram.isReady()&&i.delete(e)})),0!==i.size?setTimeout(n,10):t(e)}null!==$.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let Ne=null;function Oe(){Be.stop()}function Fe(){Be.start()}const Be=new Ki;function Ve(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)f.pushLight(e),e.castShadow&&f.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||F.intersectsSprite(e)){i&&X.setFromMatrixPosition(e.matrixWorld).applyMatrix4(G);const t=oe.update(e),r=e.material;r.visible&&m.push(e,t,r,n,X.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||F.intersectsObject(e))){const t=oe.update(e),r=e.material;if(i&&(void 0!==e.boundingSphere?(null===e.boundingSphere&&e.computeBoundingSphere(),X.copy(e.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),X.copy(t.boundingSphere.center)),X.applyMatrix4(e.matrixWorld).applyMatrix4(G)),Array.isArray(r)){const i=t.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a],o=r[s.materialIndex];o&&o.visible&&m.push(e,t,o,n,X.z,s)}}else r.visible&&m.push(e,t,r,n,X.z,null)}const r=e.children;for(let a=0,s=r.length;a<s;a++)Ve(r[a],t,n,i)}function He(e,t,n,i){const r=e.opaque,a=e.transmissive,s=e.transparent;f.setupLightsView(n),!0===B&&ve.setGlobalState(x.clippingPlanes,n),a.length>0&&function(e,t,n,i){const r=!0===n.isScene?n.overrideMaterial:null;if(null!==r)return;const a=Y.isWebGL2;null===H&&(H=new wt(1,1,{generateMipmaps:!0,type:$.has("EXT_color_buffer_half_float")?de:ae,minFilter:re,samples:a?4:0})),x.getDrawingBufferSize(W),a?H.setSize(W.x,W.y):H.setSize(Ze(W.x),Ze(W.y));const s=x.getRenderTarget();x.setRenderTarget(H),x.getClearColor(R),z=x.getClearAlpha(),z<1&&x.setClearColor(16777215,.5),x.clear();const o=x.toneMapping;x.toneMapping=0,Ge(e,n,i),Q.updateMultisampleRenderTarget(H),Q.updateRenderTargetMipmap(H);let l=!1;for(let c=0,d=t.length;c<d;c++){const e=t[c],r=e.object,a=e.geometry,s=e.material,o=e.group;if(2===s.side&&r.layers.test(i.layers)){const e=s.side;s.side=1,s.needsUpdate=!0,We(r,n,i,a,s,o),s.side=e,s.needsUpdate=!0,l=!0}}!0===l&&(Q.updateMultisampleRenderTarget(H),Q.updateRenderTargetMipmap(H)),x.setRenderTarget(s),x.setClearColor(R,z),x.toneMapping=o}(r,a,t,n),i&&K.viewport(T.copy(i)),r.length>0&&Ge(r,t,n),a.length>0&&Ge(a,t,n),s.length>0&&Ge(s,t,n),K.buffers.depth.setTest(!0),K.buffers.depth.setMask(!0),K.buffers.color.setMask(!0),K.setPolygonOffset(!1)}function Ge(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){const a=e[r],s=a.object,o=a.geometry,l=null===i?a.material:i,c=a.group;s.layers.test(n.layers)&&We(s,t,n,o,l,c)}}function We(e,t,n,i,r,a){e.onBeforeRender(x,t,n,i,r,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(x,t,n,i,e,a),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=1,r.needsUpdate=!0,x.renderBufferDirect(n,t,i,r,e,a),r.side=0,r.needsUpdate=!0,x.renderBufferDirect(n,t,i,r,e,a),r.side=2):x.renderBufferDirect(n,t,i,r,e,a),e.onAfterRender(x,t,n,i,r,a)}function Xe(e,t,n){!0!==t.isScene&&(t=q);const i=J.get(e),r=f.state.lights,a=f.state.shadowsArray,s=r.state.version,o=pe.getParameters(e,r.state,a,t,n),l=pe.getProgramCacheKey(o);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=(e.isMeshStandardMaterial?te:ee).get(e.envMap||i.environment),void 0===c&&(e.addEventListener("dispose",Ie),c=new Map,i.programs=c);let d=c.get(l);if(void 0!==d){if(i.currentProgram===d&&i.lightsStateVersion===s)return je(e,o),d}else o.uniforms=pe.getUniforms(e),e.onBuild(n,o,x),e.onBeforeCompile(o,x),d=pe.acquireProgram(o,l),c.set(l,d),i.uniforms=o.uniforms;const h=i.uniforms;return(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(h.clippingPlanes=ve.uniform),je(e,o),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=s,i.needsLights&&(h.ambientLightColor.value=r.state.ambient,h.lightProbe.value=r.state.probe,h.directionalLights.value=r.state.directional,h.directionalLightShadows.value=r.state.directionalShadow,h.spotLights.value=r.state.spot,h.spotLightShadows.value=r.state.spotShadow,h.rectAreaLights.value=r.state.rectArea,h.ltc_1.value=r.state.rectAreaLTC1,h.ltc_2.value=r.state.rectAreaLTC2,h.pointLights.value=r.state.point,h.pointLightShadows.value=r.state.pointShadow,h.hemisphereLights.value=r.state.hemi,h.directionalShadowMap.value=r.state.directionalShadowMap,h.directionalShadowMatrix.value=r.state.directionalShadowMatrix,h.spotShadowMap.value=r.state.spotShadowMap,h.spotLightMatrix.value=r.state.spotLightMatrix,h.spotLightMap.value=r.state.spotLightMap,h.pointShadowMap.value=r.state.pointShadowMap,h.pointShadowMatrix.value=r.state.pointShadowMatrix),i.currentProgram=d,i.uniformsList=null,d}function qe(e){if(null===e.uniformsList){const t=e.currentProgram.getUniforms();e.uniformsList=Fa.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function je(e,t){const n=J.get(e);n.outputColorSpace=t.outputColorSpace,n.batching=t.batching,n.instancing=t.instancing,n.instancingColor=t.instancingColor,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}Be.setAnimationLoop((function(e){Ne&&Ne(e)})),"undefined"!=typeof self&&Be.setContext(self),this.setAnimationLoop=function(e){Ne=e,Le.setAnimationLoop(e),null===e?Be.stop():Be.start()},Le.addEventListener("sessionstart",Oe),Le.addEventListener("sessionend",Fe),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===b)return;!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===Le.enabled&&!0===Le.isPresenting&&(!0===Le.cameraAutoUpdate&&Le.updateCamera(t),t=Le.getCamera()),!0===e.isScene&&e.onBeforeRender(x,e,t,M),f=ge.get(e,v.length),f.init(),v.push(f),G.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),F.setFromProjectionMatrix(G),V=this.localClippingEnabled,B=ve.init(this.clippingPlanes,V),m=fe.get(e,g.length),m.init(),g.push(m),Ve(e,t,0,x.sortObjects),m.finish(),!0===x.sortObjects&&m.sort(D,I),this.info.render.frame++,!0===B&&ve.beginShadows();const n=f.state.shadowsArray;if(xe.render(n,e,t),!0===B&&ve.endShadows(),!0===this.info.autoReset&&this.info.reset(),be.render(m,e),f.setupLights(x._useLegacyLights),t.isArrayCamera){const n=t.cameras;for(let t=0,i=n.length;t<i;t++){const i=n[t];He(m,e,i,i.viewport)}}else He(m,e,t);null!==M&&(Q.updateMultisampleRenderTarget(M),Q.updateRenderTargetMipmap(M)),!0===e.isScene&&e.onAfterRender(x,e,t),Te.resetDefaultState(),S=-1,w=null,v.pop(),f=v.length>0?v[v.length-1]:null,g.pop(),m=g.length>0?g[g.length-1]:null},this.getActiveCubeFace=function(){return _},this.getActiveMipmapLevel=function(){return y},this.getRenderTarget=function(){return M},this.setRenderTargetTextures=function(e,t,n){J.get(e.texture).__webglTexture=t,J.get(e.depthTexture).__webglTexture=n;const i=J.get(e);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===$.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){const n=J.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,n=0){M=e,_=t,y=n;let i=!0,r=null,a=!1,s=!1;if(e){const o=J.get(e);void 0!==o.__useDefaultFramebuffer?(K.bindFramebuffer(Ce.FRAMEBUFFER,null),i=!1):void 0===o.__webglFramebuffer?Q.setupRenderTarget(e):o.__hasExternalTextures&&Q.rebindTextures(e,J.get(e.texture).__webglTexture,J.get(e.depthTexture).__webglTexture);const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(s=!0);const c=J.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(r=Array.isArray(c[t])?c[t][n]:c[t],a=!0):r=Y.isWebGL2&&e.samples>0&&!1===Q.useMultisampledRTT(e)?J.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,T.copy(e.viewport),A.copy(e.scissor),C=e.scissorTest}else T.copy(U).multiplyScalar(k).floor(),A.copy(N).multiplyScalar(k).floor(),C=O;if(K.bindFramebuffer(Ce.FRAMEBUFFER,r)&&Y.drawBuffers&&i&&K.drawBuffers(e,r),K.viewport(T),K.scissor(A),K.setScissorTest(C),a){const i=J.get(e.texture);Ce.framebufferTexture2D(Ce.FRAMEBUFFER,Ce.COLOR_ATTACHMENT0,Ce.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n)}else if(s){const i=J.get(e.texture),r=t||0;Ce.framebufferTextureLayer(Ce.FRAMEBUFFER,Ce.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r)}S=-1},this.readRenderTargetPixels=function(e,t,n,i,r,a,s){if(!e||!e.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=J.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){K.bindFramebuffer(Ce.FRAMEBUFFER,o);try{const s=e.texture,o=s.format,l=s.type;if(o!==ue&&Ee.convert(o)!==Ce.getParameter(Ce.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===de&&($.has("EXT_color_buffer_half_float")||Y.isWebGL2&&$.has("EXT_color_buffer_float"));if(!(l===ae||Ee.convert(l)===Ce.getParameter(Ce.IMPLEMENTATION_COLOR_READ_TYPE)||l===ce&&(Y.isWebGL2||$.has("OES_texture_float")||$.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&Ce.readPixels(t,n,i,r,Ee.convert(o),Ee.convert(l),a)}finally{const e=null!==M?J.get(M).__webglFramebuffer:null;K.bindFramebuffer(Ce.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i);Q.setTexture2D(t,0),Ce.copyTexSubImage2D(Ce.TEXTURE_2D,n,0,0,e.x,e.y,r,a),K.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i=0){const r=t.image.width,a=t.image.height,s=Ee.convert(n.format),o=Ee.convert(n.type);Q.setTexture2D(n,0),Ce.pixelStorei(Ce.UNPACK_FLIP_Y_WEBGL,n.flipY),Ce.pixelStorei(Ce.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),Ce.pixelStorei(Ce.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?Ce.texSubImage2D(Ce.TEXTURE_2D,i,e.x,e.y,r,a,s,o,t.image.data):t.isCompressedTexture?Ce.compressedTexSubImage2D(Ce.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,s,t.mipmaps[0].data):Ce.texSubImage2D(Ce.TEXTURE_2D,i,e.x,e.y,s,o,t.image),0===i&&n.generateMipmaps&&Ce.generateMipmap(Ce.TEXTURE_2D),K.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,i,r=0){if(x.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const a=e.max.x-e.min.x+1,s=e.max.y-e.min.y+1,o=e.max.z-e.min.z+1,l=Ee.convert(i.format),c=Ee.convert(i.type);let d;if(i.isData3DTexture)Q.setTexture3D(i,0),d=Ce.TEXTURE_3D;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");Q.setTexture2DArray(i,0),d=Ce.TEXTURE_2D_ARRAY}Ce.pixelStorei(Ce.UNPACK_FLIP_Y_WEBGL,i.flipY),Ce.pixelStorei(Ce.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),Ce.pixelStorei(Ce.UNPACK_ALIGNMENT,i.unpackAlignment);const h=Ce.getParameter(Ce.UNPACK_ROW_LENGTH),u=Ce.getParameter(Ce.UNPACK_IMAGE_HEIGHT),p=Ce.getParameter(Ce.UNPACK_SKIP_PIXELS),m=Ce.getParameter(Ce.UNPACK_SKIP_ROWS),f=Ce.getParameter(Ce.UNPACK_SKIP_IMAGES),g=n.isCompressedTexture?n.mipmaps[0]:n.image;Ce.pixelStorei(Ce.UNPACK_ROW_LENGTH,g.width),Ce.pixelStorei(Ce.UNPACK_IMAGE_HEIGHT,g.height),Ce.pixelStorei(Ce.UNPACK_SKIP_PIXELS,e.min.x),Ce.pixelStorei(Ce.UNPACK_SKIP_ROWS,e.min.y),Ce.pixelStorei(Ce.UNPACK_SKIP_IMAGES,e.min.z),n.isDataTexture||n.isData3DTexture?Ce.texSubImage3D(d,r,t.x,t.y,t.z,a,s,o,l,c,g.data):n.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Ce.compressedTexSubImage3D(d,r,t.x,t.y,t.z,a,s,o,l,g.data)):Ce.texSubImage3D(d,r,t.x,t.y,t.z,a,s,o,l,c,g),Ce.pixelStorei(Ce.UNPACK_ROW_LENGTH,h),Ce.pixelStorei(Ce.UNPACK_IMAGE_HEIGHT,u),Ce.pixelStorei(Ce.UNPACK_SKIP_PIXELS,p),Ce.pixelStorei(Ce.UNPACK_SKIP_ROWS,m),Ce.pixelStorei(Ce.UNPACK_SKIP_IMAGES,f),0===r&&i.generateMipmaps&&Ce.generateMipmap(d),K.unbindTexture()},this.initTexture=function(e){e.isCubeTexture?Q.setTextureCube(e,0):e.isData3DTexture?Q.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?Q.setTexture2DArray(e,0):Q.setTexture2D(e,0),K.unbindTexture()},this.resetState=function(){_=0,y=0,M=null,K.reset(),Te.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Ve}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===we?"display-p3":"srgb",t.unpackColorSpace=ut.workingColorSpace===Ee?"display-p3":"srgb"}get physicallyCorrectLights(){return console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),!this.useLegacyLights}set physicallyCorrectLights(e){console.warn("THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."),this.useLegacyLights=!e}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===Me?_e:3e3}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=e===_e?Me:Se}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=e}}(class extends Ls{}).prototype.isWebGL1Renderer=!0;class Ps{constructor(e,t=1,n=1e3){this.isFog=!0,this.name="",this.color=new jn(e),this.near=t,this.far=n}clone(){return new Ps(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class ks extends zn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.environment&&(this.environment=e.environment.clone()),null!==e.fog&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return null!==this.fog&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(t.object.backgroundIntensity=this.backgroundIntensity),t}}class Ds extends Kn{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new jn(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const Is=new Ct,Us=new Ct,Ns=new an,Os=new rn,Fs=new Yt;class Bs extends zn{constructor(e=new hi,t=new Ds){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(null===e.index){const t=e.attributes.position,n=[0];for(let e=1,i=t.count;e<i;e++)Is.fromBufferAttribute(t,e-1),Us.fromBufferAttribute(t,e),n[e]=n[e-1],n[e]+=Is.distanceTo(Us);e.setAttribute("lineDistance",new ii(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,r=e.params.Line.threshold,a=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Fs.copy(n.boundingSphere),Fs.applyMatrix4(i),Fs.radius+=r,!1===e.ray.intersectsSphere(Fs))return;Ns.copy(i).invert(),Os.copy(e.ray).applyMatrix4(Ns);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,l=new Ct,c=new Ct,d=new Ct,h=new Ct,u=this.isLineSegments?2:1,p=n.index,m=n.attributes.position;if(null!==p)for(let f=Math.max(0,a.start),g=Math.min(p.count,a.start+a.count)-1;f<g;f+=u){const n=p.getX(f),i=p.getX(f+1);if(l.fromBufferAttribute(m,n),c.fromBufferAttribute(m,i),Os.distanceSqToSegment(l,c,h,d)>o)continue;h.applyMatrix4(this.matrixWorld);const r=e.ray.origin.distanceTo(h);r<e.near||r>e.far||t.push({distance:r,point:d.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}else for(let f=Math.max(0,a.start),g=Math.min(m.count,a.start+a.count)-1;f<g;f+=u){if(l.fromBufferAttribute(m,f),c.fromBufferAttribute(m,f+1),Os.distanceSqToSegment(l,c,h,d)>o)continue;h.applyMatrix4(this.matrixWorld);const n=e.ray.origin.distanceTo(h);n<e.near||n>e.far||t.push({distance:n,point:d.clone().applyMatrix4(this.matrixWorld),index:f,face:null,faceIndex:null,object:this})}}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}}const Vs=new Ct,Hs=new Ct;class Gs extends Bs{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(null===e.index){const t=e.attributes.position,n=[];for(let e=0,i=t.count;e<i;e+=2)Vs.fromBufferAttribute(t,e),Hs.fromBufferAttribute(t,e+1),n[e]=0===e?0:n[e-1],n[e+1]=n[e]+Vs.distanceTo(Hs);e.setAttribute("lineDistance",new ii(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Ws extends hi{constructor(e=1,t=32,n=16,i=0,r=2*Math.PI,a=0,s=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:s},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const o=Math.min(a+s,Math.PI);let l=0;const c=[],d=new Ct,h=new Ct,u=[],p=[],m=[],f=[];for(let g=0;g<=n;g++){const u=[],v=g/n;let x=0;0===g&&0===a?x=.5/t:g===n&&o===Math.PI&&(x=-.5/t);for(let n=0;n<=t;n++){const o=n/t;d.x=-e*Math.cos(i+o*r)*Math.sin(a+v*s),d.y=e*Math.cos(a+v*s),d.z=e*Math.sin(i+o*r)*Math.sin(a+v*s),p.push(d.x,d.y,d.z),h.copy(d).normalize(),m.push(h.x,h.y,h.z),f.push(o+x,1-v),u.push(l++)}c.push(u)}for(let g=0;g<n;g++)for(let e=0;e<t;e++){const t=c[g][e+1],i=c[g][e],r=c[g+1][e],s=c[g+1][e+1];(0!==g||a>0)&&u.push(t,i,s),(g!==n-1||o<Math.PI)&&u.push(i,r,s)}this.setIndex(u),this.setAttribute("position",new ii(p,3)),this.setAttribute("normal",new ii(m,3)),this.setAttribute("uv",new ii(f,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ws(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Xs extends Kn{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new jn(16777215),this.specular=new jn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new jn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new et(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class qs extends zn{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new jn(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}const js=new an,$s=new Ct,Ys=new Ct;class Ks{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new et(512,512),this.map=null,this.mapPass=null,this.matrix=new an,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Yi,this._frameExtents=new et(1,1),this._viewportCount=1,this._viewports=[new Mt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;$s.setFromMatrixPosition(e.matrixWorld),t.position.copy($s),Ys.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Ys),t.updateMatrixWorld(),js.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(js),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(js)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};return 0!==this.bias&&(e.bias=this.bias),0!==this.normalBias&&(e.normalBias=this.normalBias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}const Zs=new an,Js=new Ct,Qs=new Ct;class eo extends Ks{constructor(){super(new Oi(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new et(4,2),this._viewportCount=6,this._viewports=[new Mt(2,1,1,1),new Mt(0,1,1,1),new Mt(3,1,1,1),new Mt(1,1,1,1),new Mt(3,0,1,1),new Mt(1,0,1,1)],this._cubeDirections=[new Ct(1,0,0),new Ct(-1,0,0),new Ct(0,0,1),new Ct(0,0,-1),new Ct(0,1,0),new Ct(0,-1,0)],this._cubeUps=[new Ct(0,1,0),new Ct(0,1,0),new Ct(0,1,0),new Ct(0,1,0),new Ct(0,0,1),new Ct(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,r=e.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Js.setFromMatrixPosition(e.matrixWorld),n.position.copy(Js),Qs.copy(n.position),Qs.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(Qs),n.updateMatrixWorld(),i.makeTranslation(-Js.x,-Js.y,-Js.z),Zs.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Zs)}}class to extends qs{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new eo}get power(){return 4*this.intensity*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class no extends Ks{constructor(){super(new cr(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class io extends qs{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(zn.DEFAULT_UP),this.updateMatrix(),this.target=new zn,this.shadow=new no}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class ro extends qs{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class ao{constructor(e,t,n=0,i=1/0){this.ray=new rn(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new gn,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return oo(e,this,n,t),n.sort(so),n}intersectObjects(e,t=!0,n=[]){for(let i=0,r=e.length;i<r;i++)oo(e[i],this,n,t);return n.sort(so),n}}function so(e,t){return e.distance-t.distance}function oo(e,t,n,i){if(e.layers.test(t.layers)&&e.raycast(t,n),!0===i){const i=e.children;for(let e=0,r=i.length;e<r;e++)oo(i[e],t,n,!0)}}class lo extends Gs{constructor(e=10,t=10,n=4473924,i=8947848){n=new jn(n),i=new jn(i);const r=t/2,a=e/t,s=e/2,o=[],l=[];for(let d=0,h=0,u=-s;d<=t;d++,u+=a){o.push(-s,0,u,s,0,u),o.push(u,0,-s,u,0,s);const e=d===r?n:i;e.toArray(l,h),h+=3,e.toArray(l,h),h+=3,e.toArray(l,h),h+=3,e.toArray(l,h),h+=3}const c=new hi;c.setAttribute("position",new ii(o,3)),c.setAttribute("color",new ii(l,3)),super(c,new Ds({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class co extends Gs{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=new hi;n.setAttribute("position",new ii(t,3)),n.setAttribute("color",new ii([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(n,new Ds({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(e,t,n){const i=new jn,r=this.geometry.attributes.color.array;return i.set(e),i.toArray(r,0),i.toArray(r,3),i.set(t),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:E}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=E);class ho{constructor(e,t){this.container=e,this.framework=t,this.scene=null,this.camera=null,this.renderer=null,this.controls=null,this.vectorPoints=[],this.clusterGroups=[],this.animationId=null,this.raycaster=new ao,this.mouse=new et,this.selectedVector=null,this.hoverVector=null,this.settings={pointSize:.05,pointColor:5025616,selectedColor:16733986,hoverColor:2201331,clusterColors:[16739179,5164484,4569041,9883316,16702071,15961e3,11069135,8968368,16757690,12247551],showAxes:!0,showGrid:!0,autoRotate:!1,backgroundColor:1710618},this.init()}init(){this.createScene(),this.createCamera(),this.createRenderer(),this.createControls(),this.createLighting(),this.createAxesAndGrid(),this.setupEventListeners(),this.animate(),this.framework.eventBus.on("vectorsUpdated",this.onVectorsUpdated.bind(this)),this.framework.eventBus.on("analysisCompleted",this.onAnalysisCompleted.bind(this)),this.framework.eventBus.on("vectorSelected",this.onVectorSelected.bind(this))}createScene(){this.scene=new ks,this.scene.background=new jn(this.settings.backgroundColor),this.scene.fog=new Ps(this.settings.backgroundColor,10,50)}createCamera(){const e=this.container.clientWidth/this.container.clientHeight;this.camera=new Oi(75,e,.1,1e3),this.camera.position.set(5,5,5),this.camera.lookAt(0,0,0)}createRenderer(){this.renderer=new Ls({antialias:!0,alpha:!0}),this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=2,this.container.appendChild(this.renderer.domElement)}createControls(){this.setupMouseControls()}setupMouseControls(){let e=!1,t={x:0,y:0};function n(e){return e*(Math.PI/180)}this.renderer.domElement.addEventListener("mousedown",(n=>{e=!0,t={x:n.clientX,y:n.clientY}})),this.renderer.domElement.addEventListener("mousemove",(i=>{if(e){const e={x:i.clientX-t.x,y:i.clientY-t.y},r=(new At).setFromEuler(new fn(n(1*e.y),n(1*e.x),0,"XYZ"));this.camera.quaternion.multiplyQuaternions(r,this.camera.quaternion),t={x:i.clientX,y:i.clientY}}else this.updateMousePosition(i),this.detectHover()})),this.renderer.domElement.addEventListener("mouseup",(()=>{e=!1})),this.renderer.domElement.addEventListener("wheel",(e=>{const t=e.deltaY>0?1.1:.9;this.camera.position.multiplyScalar(t)})),this.renderer.domElement.addEventListener("click",(e=>{this.updateMousePosition(e),this.handleClick()}))}createLighting(){const e=new ro(4210752,.6);this.scene.add(e);const t=new io(16777215,.8);t.position.set(10,10,5),t.castShadow=!0,t.shadow.mapSize.width=2048,t.shadow.mapSize.height=2048,this.scene.add(t);const n=new to(16777215,.5,100);n.position.set(0,10,0),this.scene.add(n)}createAxesAndGrid(){if(this.settings.showAxes){const e=new co(5);this.scene.add(e)}if(this.settings.showGrid){const e=new lo(10,10,4473924,2236962);this.scene.add(e)}}setupEventListeners(){window.addEventListener("resize",this.onWindowResize.bind(this))}onWindowResize(){const e=this.container.clientWidth,t=this.container.clientHeight;this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,t)}updateMousePosition(e){const t=this.renderer.domElement.getBoundingClientRect();this.mouse.x=(e.clientX-t.left)/t.width*2-1,this.mouse.y=-(e.clientY-t.top)/t.height*2+1}detectHover(){this.raycaster.setFromCamera(this.mouse,this.camera);const e=this.raycaster.intersectObjects(this.vectorPoints);this.hoverVector&&(this.hoverVector.material.color.setHex(this.hoverVector.userData.originalColor),this.hoverVector=null),e.length>0?(this.hoverVector=e[0].object,this.hoverVector.userData.isSelected||this.hoverVector.material.color.setHex(this.settings.hoverColor),this.updateTooltip(this.hoverVector.userData.vector)):this.hideTooltip()}handleClick(){this.raycaster.setFromCamera(this.mouse,this.camera);const e=this.raycaster.intersectObjects(this.vectorPoints);this.selectedVector&&(this.selectedVector.material.color.setHex(this.selectedVector.userData.originalColor),this.selectedVector.userData.isSelected=!1),e.length>0&&(this.selectedVector=e[0].object,this.selectedVector.material.color.setHex(this.settings.selectedColor),this.selectedVector.userData.isSelected=!0,this.framework.eventBus.emit("vector3DSelected",{vector:this.selectedVector.userData.vector,index:this.selectedVector.userData.index}))}updateTooltip(e){let t=document.getElementById("vector-tooltip-3d");t||(t=document.createElement("div"),t.id="vector-tooltip-3d",t.style.cssText="\n                position: absolute;\n                background: rgba(0, 0, 0, 0.8);\n                color: white;\n                padding: 8px;\n                border-radius: 4px;\n                font-size: 12px;\n                pointer-events: none;\n                z-index: 1000;\n                max-width: 200px;\n            ",document.body.appendChild(t)),t.innerHTML=`\n            <strong>Vector ${e.id}</strong><br>\n            Components: [${e.components.map((e=>e.toFixed(3))).join(", ")}]<br>\n            Magnitude: ${e.magnitude.toFixed(3)}\n        `,t.style.left=event.clientX+10+"px",t.style.top=event.clientY-10+"px",t.style.display="block"}hideTooltip(){const e=document.getElementById("vector-tooltip-3d");e&&(e.style.display="none")}onVectorsUpdated(e){this.clearVectors(),this.renderVectors(e)}onAnalysisCompleted(e){switch(e.type){case"pca":this.visualizePCA(e);break;case"kmeans":this.visualizeClusters(e);break;case"tsne":this.visualizeTSNE(e);break;case"hierarchical":this.visualizeHierarchical(e)}}onVectorSelected(e){this.highlightVector(e.index)}clearVectors(){this.vectorPoints.forEach((e=>{this.scene.remove(e),e.geometry.dispose(),e.material.dispose()})),this.vectorPoints=[],this.clearClusters()}clearClusters(){this.clusterGroups.forEach((e=>{this.scene.remove(e)})),this.clusterGroups=[]}renderVectors(e){e.forEach(((e,t)=>{const n=new Ws(this.settings.pointSize,16,16),i=new Xs({color:this.settings.pointColor,transparent:!0,opacity:.8}),r=new Ri(n,i),a=this.vectorToPosition(e);r.position.set(a.x,a.y,a.z),r.userData={vector:e,index:t,originalColor:this.settings.pointColor,isSelected:!1},r.castShadow=!0,r.receiveShadow=!0,this.scene.add(r),this.vectorPoints.push(r)}))}vectorToPosition(e){const t=e.components;return{x:2*(t[0]||0),y:2*(t[1]||0),z:2*(t[2]||0)}}visualizePCA(e){e.data&&e.data.forEach(((e,t)=>{t<this.vectorPoints.length&&this.vectorPoints[t].position.set(2*e[0],2*e[1],2*(e[2]||0))}))}visualizeClusters(e){if(!e.data||!e.data.assignments)return;const t=this.settings.clusterColors;e.data.assignments.forEach(((e,n)=>{if(n<this.vectorPoints.length){const i=t[e%t.length];this.vectorPoints[n].material.color.setHex(i),this.vectorPoints[n].userData.originalColor=i}}))}visualizeTSNE(e){e.data&&e.data.forEach(((e,t)=>{t<this.vectorPoints.length&&this.vectorPoints[t].position.set(2*e[0],2*e[1],2*(e[2]||0))}))}visualizeHierarchical(e){}highlightVector(e){e<this.vectorPoints.length&&(this.selectedVector&&(this.selectedVector.material.color.setHex(this.selectedVector.userData.originalColor),this.selectedVector.userData.isSelected=!1),this.selectedVector=this.vectorPoints[e],this.selectedVector.material.color.setHex(this.settings.selectedColor),this.selectedVector.userData.isSelected=!0,this.focusOnVector(this.selectedVector.position))}focusOnVector(e){const t=e.clone().add(new Ct(2,2,2)),n=this.camera.position.clone(),i=Date.now(),r=()=>{const a=Date.now()-i,s=Math.min(a/1e3,1);this.camera.position.lerpVectors(n,t,s),this.camera.lookAt(e),s<1&&requestAnimationFrame(r)};r()}animate(){this.animationId=requestAnimationFrame(this.animate.bind(this)),this.settings.autoRotate&&(this.scene.rotation.y+=.005),this.renderer.render(this.scene,this.camera)}updateSettings(e){Object.assign(this.settings,e),void 0!==e.backgroundColor&&(this.scene.background.setHex(e.backgroundColor),this.scene.fog.color.setHex(e.backgroundColor)),void 0!==e.pointSize&&this.vectorPoints.forEach((t=>{t.scale.setScalar(e.pointSize/this.settings.pointSize)})),void 0!==e.pointColor&&this.vectorPoints.forEach((t=>{t.userData.isSelected||(t.material.color.setHex(e.pointColor),t.userData.originalColor=e.pointColor)}))}exportScene(){return{cameraPosition:this.camera.position.toArray(),cameraRotation:this.camera.rotation.toArray(),settings:{...this.settings},vectorCount:this.vectorPoints.length,clusterCount:this.clusterGroups.length}}importScene(e){e.cameraPosition&&this.camera.position.fromArray(e.cameraPosition),e.cameraRotation&&this.camera.rotation.fromArray(e.cameraRotation),e.settings&&this.updateSettings(e.settings)}dispose(){this.animationId&&cancelAnimationFrame(this.animationId),this.clearVectors(),this.clearClusters(),this.renderer&&(this.renderer.dispose(),this.renderer.domElement.parentNode&&this.renderer.domElement.parentNode.removeChild(this.renderer.domElement));const e=document.getElementById("vector-tooltip-3d");e&&e.remove(),window.removeEventListener("resize",this.onWindowResize.bind(this))}}class uo{constructor(e,t){this.container=e,this.framework=t,this.d3=window.d3,this.svg=null,this.periodicData=[],this.selectedElement=null,this.d3?(this.config={elementWidth:60,elementHeight:60,padding:2,maxColumns:18,fontSize:10,symbolFontSize:14},this.init()):console.error("D3.js is not loaded. PeriodicTableVisualization requires D3.js.")}init(){this.createPeriodicTableContainer(),this.setupEventListeners()}createPeriodicTableContainer(){this.container.getBoundingClientRect(),this.svg=this.d3.select(this.container).append("div").attr("class","periodic-table-container").style("width","100%").style("height","200px").style("background","rgba(0,0,0,0.1)").style("border-top","2px solid rgba(255,255,255,0.2)").style("padding","10px").style("overflow-x","auto").style("overflow-y","hidden").append("svg").attr("width","100%").attr("height",180).attr("class","periodic-table-svg"),this.svg.append("text").attr("x",20).attr("y",20).attr("fill","white").attr("font-size","16px").attr("font-weight","bold").text("🧪 Vector Periodic Table")}setupEventListeners(){this.framework.eventBus.on("stateChanged",(()=>{this.updatePeriodicTable()})),this.framework.eventBus.on("vectorSelected",(e=>{this.highlightElement(e.vectorId)}))}updatePeriodicTable(){if(!this.d3||!this.svg)return;const e=this.framework.getState().vectors;e&&0!==e.length?(this.periodicData=this.vectorsToPeriodicElements(e),this.renderPeriodicTable()):this.clearTable()}vectorsToPeriodicElements(e){const t=this.framework.getModules().forceCalculator;return e.map(((n,i)=>{const r=t.getVectorStatistics(n),a=t.getInformationQuantums(n);return{id:n.id,symbol:this.generateElementSymbol(n,i),name:`Vector ${n.id+1}`,atomicNumber:n.id+1,atomicMass:Math.round(100*r.magnitude)/100,excitatory:a.excitatory,inhibitory:a.inhibitory,neutral:a.neutral,entropy:Math.round(1e3*t.informationEntropy(n))/1e3,stability:Math.round(1e3*t.nuclearStability(n))/1e3,color:this.getElementColor(n,r,a),position:this.calculateElementPosition(n,i,e.length),vector:n}}))}generateElementSymbol(e,t){const n=this.framework.getModules().forceCalculator.magnitude(e),i=this.framework.getModules().forceCalculator.informationEntropy(e),r=String.fromCharCode(65+t%26);return n>1.5?r+"h":i>2?r+"e":n<.5?r+"l":r+"m"}getElementColor(e,t,n){return n.excitatory>n.inhibitory&&n.excitatory>n.neutral?"#ff6b6b":n.inhibitory>n.excitatory&&n.inhibitory>n.neutral?"#4ecdc4":n.neutral>n.excitatory&&n.neutral>n.inhibitory?"#95a5a6":"#f39c12"}calculateElementPosition(e,t,n){const i=Math.min(this.config.maxColumns,Math.ceil(Math.sqrt(2*n))),r=Math.floor(t/i),a=t%i;return{row:r,col:a,x:50+a*(this.config.elementWidth+this.config.padding),y:40+r*(this.config.elementHeight+this.config.padding)}}renderPeriodicTable(){if(!this.d3||!this.svg)return;this.svg.selectAll(".periodic-element").remove();const e=this.svg.selectAll(".periodic-element").data(this.periodicData,(e=>e.id)).enter().append("g").attr("class","periodic-element").attr("transform",(e=>`translate(${e.position.x}, ${e.position.y})`)).style("cursor","pointer").on("click",((e,t)=>{this.framework.selectVector(t.id)})).on("mouseenter",((e,t)=>{this.showElementTooltip(e,t)})).on("mouseleave",(()=>{this.hideElementTooltip()}));e.append("rect").attr("width",this.config.elementWidth).attr("height",this.config.elementHeight).attr("fill",(e=>e.color)).attr("stroke","rgba(255,255,255,0.3)").attr("stroke-width",1).attr("rx",4).attr("opacity",.8),e.append("text").attr("x",4).attr("y",12).attr("fill","white").attr("font-size",this.config.fontSize).attr("font-weight","bold").text((e=>e.atomicNumber)),e.append("text").attr("x",this.config.elementWidth/2).attr("y",this.config.elementHeight/2+2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill","white").attr("font-size",this.config.symbolFontSize).attr("font-weight","bold").text((e=>e.symbol)),e.append("text").attr("x",this.config.elementWidth/2).attr("y",this.config.elementHeight-6).attr("text-anchor","middle").attr("fill","rgba(255,255,255,0.8)").attr("font-size",this.config.fontSize-1).text((e=>e.atomicMass)),this.addQuantumIndicators(e)}addQuantumIndicators(e){const t=this.config.elementHeight;e.each((function(e){const n=d3.select(this);for(let i=0;i<Math.min(e.excitatory,5);i++)n.append("circle").attr("cx",4+4*i).attr("cy",t-16).attr("r",3).attr("fill","#ff4757").attr("opacity",.7);for(let i=0;i<Math.min(e.inhibitory,5);i++)n.append("circle").attr("cx",4+4*i).attr("cy",t-24).attr("r",3).attr("fill","#3742fa").attr("opacity",.7)}))}highlightElement(e){this.svg.selectAll(".periodic-element").classed("selected",!1).select("rect").attr("stroke-width",1).attr("stroke","rgba(255,255,255,0.3)"),this.svg.selectAll(".periodic-element").filter((t=>t.id===e)).classed("selected",!0).select("rect").attr("stroke-width",3).attr("stroke","#ffd700")}showElementTooltip(e,t){const n=this.d3.select("body").append("div").attr("class","periodic-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","10px").style("border-radius","6px").style("font-size","12px").style("pointer-events","none").style("z-index","1000").style("box-shadow","0 4px 8px rgba(0,0,0,0.3)").html(`\n                <div><strong>${t.name}</strong></div>\n                <div>Symbol: ${t.symbol}</div>\n                <div>Atomic Mass: ${t.atomicMass}</div>\n                <div>Entropy: ${t.entropy}</div>\n                <div>Stability: ${t.stability}</div>\n                <div>Excitatory: ${t.excitatory}</div>\n                <div>Inhibitory: ${t.inhibitory}</div>\n                <div>Neutral: ${t.neutral}</div>\n            `),[i,r]=this.d3.pointer(e,document.body);n.style("left",i+10+"px").style("top",r-10+"px")}hideElementTooltip(){this.d3.selectAll(".periodic-tooltip").remove()}clearTable(){this.svg.selectAll(".periodic-element").remove()}setElementHighlight(e,t=!0){t?this.highlightElement(e):this.svg.selectAll(".periodic-element").classed("selected",!1).select("rect").attr("stroke-width",1).attr("stroke","rgba(255,255,255,0.3)")}getElementData(e){return this.periodicData.find((t=>t.id===e))}exportPeriodicData(){return{elements:this.periodicData,timestamp:(new Date).toISOString(),totalElements:this.periodicData.length}}}class po{constructor(e){this.framework=e,this.d3=window.d3,this.isActive=!1,this.inputVector=null,this.neuronVectors=[],this.connections=[],this.activations=[],this.config={connectionOpacity:.6,activationThreshold:.5,maxConnectionWidth:8,minConnectionWidth:1,activationColors:{high:"#ff6b6b",medium:"#ffa726",low:"#66bb6a",inactive:"#95a5a6"}},this.setupEventListeners()}setupEventListeners(){this.framework.eventBus.on("vectorSelected",(e=>{this.isActive&&null!==e.vectorId&&this.setInputVector(e.vectorId)})),this.framework.eventBus.on("stateChanged",(()=>{this.isActive&&this.updateNeuralNetwork()}))}activate(e=null){if(this.isActive=!0,null!==e)this.setInputVector(e);else{const e=this.framework.getState();e.vectors.length>0&&this.setInputVector(e.vectors[0].id)}this.updateNeuralNetwork(),this.framework.notify("neuralModeActivated",{inputVectorId:this.inputVector?.id})}deactivate(){this.isActive=!1,this.inputVector=null,this.neuronVectors=[],this.connections=[],this.activations=[],this.clearNeuralVisualizations(),this.framework.notify("neuralModeDeactivated")}setInputVector(e){const t=this.framework.getState();this.inputVector=t.vectors.find((t=>t.id===e)),this.inputVector&&(this.neuronVectors=t.vectors.filter((t=>t.id!==e)),this.calculateNeuralNetwork(),this.renderNeuralNetwork())}calculateNeuralNetwork(){if(!this.inputVector||0===this.neuronVectors.length)return;const e=this.framework.getModules().forceCalculator,t=this.framework.getConfig().forceType||"resonance",n=this.neuronVectors.map((n=>{const i=e.calculateSelectedMetric(this.inputVector,n,t),r=Math.abs(e.correlation(this.inputVector,n)),a=e.euclideanDistance(this.inputVector,n);return{neuron:n,metricValue:i,correlation:r,distance:a,synapticStrength:r/(1+a)}})),i=n.map((e=>e.metricValue));this.activations=n.map((n=>{const r=e.activationFunction;let a;return a="softmax"===r||"softermax"===r?e.applyActivation(n.metricValue,r,i):e.applyActivation(n.metricValue,r),{neuronId:n.neuron.id,activation:a,synapticStrength:n.synapticStrength,activationLevel:this.categorizeActivation(a),rawInput:n.metricValue,metricType:t}})),this.connections=this.activations.map((e=>({from:this.inputVector.id,to:e.neuronId,strength:e.synapticStrength,activation:e.activation})))}categorizeActivation(e){switch(this.framework.getModules().forceCalculator.activationFunction){case"tanh":return Math.abs(e)>.7?"high":Math.abs(e)>.3?"medium":Math.abs(e)>.1?"low":"inactive";case"relu":case"leaky_relu":return e>2?"high":e>.5?"medium":e>.1?"low":"inactive";case"softplus":case"swish":return e>1.5?"high":e>.8?"medium":e>.2?"low":"inactive";case"softmax":case"softermax":return e>.4?"high":e>.2?"medium":e>.05?"low":"inactive";default:return e>.7?"high":e>.4?"medium":e>.1?"low":"inactive"}}updateNeuralNetwork(){this.isActive&&this.inputVector&&(this.calculateNeuralNetwork(),this.renderNeuralNetwork())}renderNeuralNetwork(){const e=this.framework.modules.vectorRenderer.svg;this.clearNeuralVisualizations(),this.renderNeuralConnections(e),this.renderNeuralActivations(e),this.renderInputHighlight(e),this.renderNeuralInfoPanel()}renderNeuralConnections(e){const t=this.connections.filter((e=>e.strength>.1));e.selectAll(".neural-connection").data(t,(e=>`${e.from}-${e.to}`)).enter().append("line").attr("class","neural-connection").attr("x1",(e=>this.getVectorPosition(e.from).x)).attr("y1",(e=>this.getVectorPosition(e.from).y)).attr("x2",(e=>this.getVectorPosition(e.to).x)).attr("y2",(e=>this.getVectorPosition(e.to).y)).attr("stroke","#e74c3c").attr("stroke-width",(e=>{const t=this.config.minConnectionWidth+e.strength*(this.config.maxConnectionWidth-this.config.minConnectionWidth);return Math.max(this.config.minConnectionWidth,Math.min(this.config.maxConnectionWidth,t))})).attr("opacity",(e=>this.config.connectionOpacity*e.strength))}renderNeuralActivations(e){e.selectAll(".activation-ring").data(this.activations,(e=>e.neuronId)).enter().append("circle").attr("class","activation-ring").attr("cx",(e=>this.getVectorPosition(e.neuronId).x)).attr("cy",(e=>this.getVectorPosition(e.neuronId).y)).attr("r",(e=>30+20*e.activation)).attr("fill","none").attr("stroke",(e=>this.config.activationColors[e.activationLevel])).attr("stroke-width",3).attr("opacity",.7),e.selectAll(".activation-label").data(this.activations,(e=>e.neuronId)).enter().append("text").attr("class","activation-label").attr("x",(e=>this.getVectorPosition(e.neuronId).x+25)).attr("y",(e=>this.getVectorPosition(e.neuronId).y-25)).attr("fill","white").attr("font-size","10px").attr("font-weight","bold").text((e=>`${(100*e.activation).toFixed(0)}%`))}renderInputHighlight(e){if(!this.inputVector)return;const t=this.getVectorPosition(this.inputVector.id);e.append("circle").attr("class","neural-input-highlight").attr("cx",t.x).attr("cy",t.y).attr("r",50).attr("fill","none").attr("stroke","#f39c12").attr("stroke-width",4).attr("stroke-dasharray","10,5").attr("opacity",.8),e.append("text").attr("class","neural-input-label").attr("x",t.x).attr("y",t.y-60).attr("text-anchor","middle").attr("fill","#f39c12").attr("font-size","14px").attr("font-weight","bold").text("🧠 INPUT NEURON")}renderNeuralInfoPanel(){let e=this.d3.select(".neural-info-panel");e.empty()&&(e=this.d3.select("body").append("div").attr("class","neural-info-panel").style("position","fixed").style("top","10px").style("right","10px").style("width","250px").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","15px").style("border-radius","8px").style("font-size","12px").style("z-index","1000").style("border","2px solid #f39c12"));const t=this.calculateNetworkStatistics(),n=this.framework.getModules().forceCalculator,i=n.activationFunction,r=n.learningRate,a=this.framework.getConfig().forceType||"resonance";e.html(`\n            <h4 style="margin: 0 0 10px 0; color: #f39c12;">🧠 Neural Network Mode</h4>\n            <div><strong>Input:</strong> Vector ${this.inputVector.id+1}</div>\n            <div><strong>Input Metric:</strong> ${{resonance:"Resonance Force",cosine:"Cosine Similarity",correlation:"Pearson Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",quantum:"Quantum Entanglement"}[a]}</div>\n            <div><strong>Activation:</strong> ${i.charAt(0).toUpperCase()+i.slice(1)}</div>\n            <div><strong>Learning Rate:</strong> ${r.toFixed(3)}</div>\n            <div><strong>Neurons:</strong> ${this.neuronVectors.length}</div>\n            <div><strong>Connections:</strong> ${this.connections.length}</div>\n            <div><strong>Avg Activation:</strong> ${(100*t.avgActivation).toFixed(1)}%</div>\n            <div><strong>Max Activation:</strong> ${(100*t.maxActivation).toFixed(1)}%</div>\n            <div><strong>Network Output:</strong> ${(100*t.networkOutput).toFixed(1)}%</div>\n            <div style="margin-top: 10px;">\n                <button id="neural-mode-toggle" style="width: 100%; padding: 5px; background: #e74c3c; color: white; border: none; border-radius: 4px; cursor: pointer;">\n                    Deactivate Neural Mode\n                </button>\n            </div>\n        `),e.select("#neural-mode-toggle").on("click",(()=>{this.deactivate()}))}calculateNetworkStatistics(){if(0===this.activations.length)return{avgActivation:0,maxActivation:0,networkOutput:0};const e=this.activations.map((e=>e.activation)),t=e.reduce(((e,t)=>e+t),0)/e.length,n=Math.max(...e),i=this.activations.reduce(((e,t)=>e+t.activation*t.synapticStrength),0),r=this.activations.reduce(((e,t)=>e+t.synapticStrength),0);return{avgActivation:t,maxActivation:n,networkOutput:r>0?i/r:0}}getVectorPosition(e){const t=this.framework.getState().vectors.find((t=>t.id===e));return t?{x:t.x,y:t.y}:{x:0,y:0}}clearNeuralVisualizations(){const e=this.framework.modules.vectorRenderer.svg;e.selectAll(".neural-connection").remove(),e.selectAll(".activation-ring").remove(),e.selectAll(".activation-label").remove(),e.selectAll(".neural-input-highlight").remove(),e.selectAll(".neural-input-label").remove(),this.d3.selectAll(".neural-info-panel").remove()}isNeuralModeActive(){return this.isActive}getCurrentInputVector(){return this.inputVector}getNeuronActivations(){return this.activations}getNetworkConnections(){return this.connections}}class mo{constructor(e){this.framework=e,this.state=this.initializeState(),this.elements=new Map,this.components=this.initializeComponents(),this.boundHandlers=this.createBoundHandlers(),this.initializeEventListeners(),this.deferredInitialize()}initializeState(){return{selectedVector:null,currentView:"overview",activeTab:"individual",activeIndividualTab:"components",isInitialized:!1}}initializeComponents(){return{charts:null,statistics:null,clustering:null,relationships:null,patterns:null}}createBoundHandlers(){return{onStateChanged:this.onStateChanged.bind(this)}}initializeEventListeners(){try{const{eventBus:e}=this.framework;e.on("stateChanged",this.boundHandlers.onStateChanged)}catch(e){console.error("Failed to initialize event listeners:",e)}}deferredInitialize(){const e=()=>this.initialize();"loading"===document.readyState?document.addEventListener("DOMContentLoaded",e):requestAnimationFrame((()=>setTimeout(e,100)))}async initialize(){if(!this.state.isInitialized)try{this.cacheElements(),this.setupUIEventHandlers(),this.initializeTabSystem(),this.updateInitialState(),this.state.isInitialized=!0,console.log("VectorAnalysisStudio initialized successfully")}catch(e){console.error("Failed to initialize VectorAnalysisStudio:",e)}}cacheElements(){["analysis-content","analysis-overview","analysis-detailed","vector-select","vector-analysis-content","total-vectors","vector-dimensions","avg-magnitude","max-similarity","toggle-analysis-view","compare-vectors","export-analysis","back-to-overview"].forEach((e=>{const t=document.getElementById(e);t&&this.elements.set(e,t)}))}setupUIEventHandlers(){[["toggle-analysis-view","click",this.toggleView.bind(this)],["back-to-overview","click",this.showOverview.bind(this)],["compare-vectors","click",this.compareVectors.bind(this)],["export-analysis","click",this.exportAnalysis.bind(this)],["vector-select","change",this.handleVectorSelection.bind(this)]].forEach((([e,t,n])=>{const i=this.elements.get(e);i&&i.addEventListener(t,n)}))}initializeTabSystem(){const e=document.querySelectorAll(".tab-btn"),t=document.querySelectorAll(".tab-panel");e.forEach((n=>{n.addEventListener("click",(()=>{const i=n.getAttribute("data-tab");this.switchTab(i,e,t)}))}))}updateInitialState(){this.updateOverviewStats(),this.updateVectorSelector()}onStateChanged(e){this.safeExecute((()=>{const t=e?.reason;"vectorsGenerated"===t?this.onVectorsUpdated():"vectorSelected"===t?this.onVectorSelected():"inputVectorAdded"!==t&&"inputVectorRemoved"!==t||(this.updateOverviewStats(),this.updateVectorSelector())}),"state changed")}onVectorsUpdated(){this.updateOverviewStats(),this.updateVectorSelector(),this.updateTabContent()}onVectorSelected(){const e=this.framework.stateManager.getSelectedVector();this.state.selectedVector=e,this.updateVectorSelector(),this.updateIndividualAnalysis(),this.toggleCompareButton(!e)}switchTab(e,t,n){this.safeExecute((()=>{this.updateTabStates(t,n,e),this.state.activeTab=e,this.updateTabContent()}),"tab switch")}updateTabStates(e,t,n){e.forEach((e=>e.classList.remove("active"))),t.forEach((e=>e.classList.remove("active")));const i=document.querySelector(`[data-tab="${n}"]`),r=document.getElementById(`${n}-tab`);i&&r&&(i.classList.add("active"),r.classList.add("active"))}updateTabContent(){const{activeTab:e}=this.state,t={individual:()=>this.updateIndividualAnalysis(),relationships:()=>this.updateRelationships(),clusters:()=>this.updateClustering(),statistics:()=>this.updateStatistics()}[e];t&&t()}toggleView(){this.safeExecute((()=>{const e="overview"===this.state.currentView;this.state.currentView=e?"detailed":"overview",this.updateViewDisplay(e)}),"view toggle")}updateViewDisplay(e){const t=this.elements.get("analysis-overview"),n=this.elements.get("analysis-detailed"),i=this.elements.get("toggle-analysis-view");t&&n&&i&&(e?(t.style.display="none",n.style.display="block",i.innerHTML='<span class="btn-icon">📊</span><span class="btn-text">Overview</span>'):(t.style.display="block",n.style.display="none",i.innerHTML='<span class="btn-icon">🔍</span><span class="btn-text">Detailed View</span>'))}showOverview(){this.safeExecute((()=>{this.state.currentView="overview",this.updateViewDisplay(!1)}),"show overview")}toggleCompareButton(e){const t=this.elements.get("compare-vectors");t&&(t.disabled=e)}updateOverviewStats(){this.safeExecute((()=>{const{forceCalculator:e}=this.getModules(),{vectors:t}=this.getState();if(!e||!t.length)return void this.clearOverviewStats();const n=this.calculateOverviewStats(t,e);this.displayOverviewStats(n)}),"overview stats update")}calculateOverviewStats(e,t){const n=e.length,i=e[0]?.components.length||0,r=e.reduce(((e,n)=>e+t.magnitude(n)),0)/e.length;let a=0;for(let s=0;s<e.length;s++)for(let n=s+1;n<e.length;n++){const i=Math.abs(t.cosineSimilarity(e[s],e[n]));a=Math.max(a,i)}return{totalVectors:n,dimensions:i,avgMagnitude:r,maxSimilarity:a}}displayOverviewStats({totalVectors:e,dimensions:t,avgMagnitude:n,maxSimilarity:i}){this.updateElement("total-vectors",e.toString()),this.updateElement("vector-dimensions",t.toString()),this.updateElement("avg-magnitude",n.toFixed(2)),this.updateElement("max-similarity",i.toFixed(2))}clearOverviewStats(){["total-vectors","vector-dimensions","avg-magnitude","max-similarity"].forEach((e=>this.updateElement(e,"0")))}updateVectorSelector(){this.safeExecute((()=>{const e=this.elements.get("vector-select");if(!e)return;const{vectors:t}=this.getState(),n=this.state.selectedVector?.id;e.innerHTML='<option value="">Click a vector or select here...</option>',t.forEach((t=>{const i=document.createElement("option");i.value=t.id,i.textContent=`Vector ${t.id}`,i.selected=t.id===n,e.appendChild(i)}))}),"vector selector update")}updateIndividualAnalysis(){this.safeExecute((()=>{const e=this.elements.get("vector-analysis-content");if(!e)return;if(!this.state.selectedVector)return void this.showAnalysisPlaceholder(e);const{forceCalculator:t}=this.getModules();t?this.renderIndividualAnalysis(e):this.showError(e,"Force calculator not available")}),"individual analysis update")}renderIndividualAnalysis(e){const t=this.state.selectedVector,{forceCalculator:n}=this.getModules(),i=this.calculateAnalysisData(t,n);e.innerHTML=this.generateAnalysisHTML(t,i),this.setupIndividualAnalysisTabs(),this.populateAnalysisContent(t,n,i)}calculateAnalysisData(e,t){const n=t.getInformationQuantums(e);return{quantums:n,stats:this.calculateVectorStats(e,t),charge:this.determineCharge(n),magnitude:t.magnitude(e),entropy:t.informationEntropy(e),sparsity:this.calculateSparsity(e)}}determineCharge(e){return e.excitatory>e.inhibitory?"Positive":e.inhibitory>e.excitatory?"Negative":"Neutral"}calculateVectorStats(e,t){const n=e.components,i=n.reduce(((e,t)=>e+t),0)/n.length,r=n.reduce(((e,t)=>e+Math.pow(t-i,2)),0)/n.length;return{mean:i,variance:r,standardDeviation:Math.sqrt(r),magnitude:t.magnitude(e),min:Math.min(...n),max:Math.max(...n)}}calculateSparsity(e){return e.components.filter((e=>Math.abs(e)<.001)).length/e.components.length}generateAnalysisHTML(e,t){const{charge:n,magnitude:i,entropy:r,sparsity:a}=t;return`\n            <div class="vector-analysis-card">\n                ${this.generateAnalysisHeader(e,{charge:n,magnitude:i,entropy:r,sparsity:a})}\n                ${this.generateAnalysisTabs()}\n            </div>\n        `}generateAnalysisHeader(e,{charge:t,magnitude:n,entropy:i,sparsity:r}){return`\n            <div class="vector-header-enhanced">\n                <div class="vector-title-section">\n                    <h4>🎯 Vector ${e.id} Deep Analysis</h4>\n                    <div class="vector-summary">\n                        <span class="summary-item">\n                            <span class="summary-label">Dimensionality:</span>\n                            <span class="summary-value">${e.components.length}D</span>\n                        </span>\n                        <span class="summary-item">\n                            <span class="summary-label">Magnitude:</span>\n                            <span class="summary-value">${n.toFixed(4)}</span>\n                        </span>\n                        <span class="summary-item">\n                            <span class="summary-label">Entropy:</span>\n                            <span class="summary-value">${i.toFixed(4)}</span>\n                        </span>\n                    </div>\n                </div>\n                <div class="vector-badges-enhanced">\n                    ${this.generateBadge("charge",t,this.getChargeIcon(t))}\n                    ${this.generateBadge("magnitude",n.toFixed(3),"📏")}\n                    ${this.generateBadge("sparsity",`${(100*r).toFixed(1)}% sparse`,"💎")}\n                </div>\n            </div>\n        `}generateBadge(e,t,n){return`\n            <span class="vector-badge ${e}" title="${e}">\n                <span class="badge-icon">${n}</span>\n                ${t}\n            </span>\n        `}getChargeIcon(e){return{Positive:"⚡",Negative:"🔋",Neutral:"⚖️"}[e]||"⚖️"}generateAnalysisTabs(){return`\n            <div class="analysis-tabs-enhanced">\n                <div class="tab-nav">\n                    <button class="tab-nav-btn active" data-target="components">📊 Components</button>\n                    <button class="tab-nav-btn" data-target="statistics">📈 Statistics</button>\n                    <button class="tab-nav-btn" data-target="relationships">🔗 Relationships</button>\n                    <button class="tab-nav-btn" data-target="clusters">🔍 Clusters</button>\n                    <button class="tab-nav-btn" data-target="patterns">🧩 Patterns</button>\n                    <button class="tab-nav-btn" data-target="information">🧠 Information</button>\n                </div>\n                \n                <div class="tab-content-enhanced">\n                    ${this.generateTabPanes()}\n                </div>\n            </div>\n        `}generateTabPanes(){return[{id:"components",content:this.generateComponentsPane()},{id:"statistics",content:this.generateStatisticsPane()},{id:"relationships",content:'<div class="relationships-enhanced" id="relationships-enhanced"></div>'},{id:"clusters",content:'<div class="clusters-enhanced" id="clusters-enhanced"></div>'},{id:"patterns",content:'<div class="patterns-analysis" id="patterns-analysis"></div>'},{id:"information",content:'<div class="information-analysis" id="information-analysis"></div>'}].map(((e,t)=>`\n            <div class="tab-pane ${0===t?"active":""}" id="${e.id}-pane">\n                ${e.content}\n            </div>\n        `)).join("")}generateComponentsPane(){return'\n            <div class="components-analysis">\n                <div class="visualization-container">\n                    <div class="chart-header">\n                        <h6>Component Distribution Visualization</h6>\n                        <div class="chart-controls">\n                            <select id="chart-type-select" class="mini-select">\n                                <option value="bar">Bar Chart</option>\n                                <option value="line">Line Chart</option>\n                                <option value="histogram">Histogram</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class="components-chart-enhanced" id="components-chart-individual"></div>\n                </div>\n                \n                <div class="components-insights">\n                    <div class="insight-grid" id="insight-grid"></div>\n                    <div class="component-extremes">\n                        <h6>🎯 Notable Components</h6>\n                        <div class="extremes-list" id="extremes-list"></div>\n                    </div>\n                </div>\n            </div>\n        '}generateStatisticsPane(){return'\n            <div class="statistics-enhanced">\n                <div class="stats-categories" id="stats-categories"></div>\n                <div class="statistical-insights">\n                    <h6>💡 Statistical Insights</h6>\n                    <div class="insights-list" id="statistical-insights"></div>\n                </div>\n            </div>\n        '}setupIndividualAnalysisTabs(){this.safeExecute((()=>{const e=document.querySelectorAll(".tab-nav-btn"),t=document.querySelectorAll(".tab-pane");e.forEach((n=>{n.addEventListener("click",(()=>{const i=n.getAttribute("data-target");this.switchIndividualTab(i,e,t)}))})),this.setupChartTypeSelector()}),"individual analysis tabs setup")}switchIndividualTab(e,t,n){t.forEach((e=>e.classList.remove("active"))),n.forEach((e=>e.classList.remove("active")));const i=document.querySelector(`[data-target="${e}"]`),r=document.getElementById(`${e}-pane`);i&&r&&(i.classList.add("active"),r.classList.add("active"),this.state.activeIndividualTab=e,this.updateIndividualTabContent(e))}updateIndividualTabContent(e){this.safeExecute((()=>{const{selectedVector:t}=this.state;if(!t)return;const{forceCalculator:n}=this.getModules();if(n)switch(e){case"relationships":this.updateIndividualRelationships();break;case"clusters":this.updateClustering();break;case"patterns":this.populatePatternsAnalysis(t);break;case"information":const e=n.getInformationQuantums(t);this.populateInformationAnalysis(t,n,e);break;case"statistics":const i=this.calculateVectorStats(t,n);this.populateStatisticsAnalysis(t,i,n);break;case"components":this.renderChart("components-chart-individual",t.components)}}),`individual tab content update for ${e}`)}setupChartTypeSelector(){const e=document.getElementById("chart-type-select");e&&e.addEventListener("change",(()=>{this.state.selectedVector&&this.renderChart("components-chart-individual",this.state.selectedVector.components)}))}populateAnalysisContent(e,t,n){this.safeExecute((()=>{this.populateComponentsAnalysis(e,n.stats),this.populateStatisticsAnalysis(e,n.stats,t),this.populateInformationAnalysis(e,t,n.quantums),this.populatePatternsAnalysis(e),this.renderChart("components-chart-individual",e.components)}),"analysis content population")}populateComponentsAnalysis(e,t){const n=document.getElementById("insight-grid"),i=document.getElementById("extremes-list");if(n){const i=this.calculateComponentInsights(e,t);n.innerHTML=this.generateInsightCards(i)}if(i){const t=this.calculateComponentExtremes(e);i.innerHTML=this.generateExtremesHTML(t)}}calculateComponentInsights(e,t){const n=e.components.filter((e=>e>0)),i=e.components.filter((e=>e<0)),r=t.magnitude||0,a=e.components.filter((e=>Math.abs(e)>.3*r));return[{type:"positive",icon:"⬆️",title:"Positive Components",value:n.length,detail:`Avg: ${n.length>0?(n.reduce(((e,t)=>e+t),0)/n.length).toFixed(3):"0.000"}`},{type:"negative",icon:"⬇️",title:"Negative Components",value:i.length,detail:`Avg: ${i.length>0?(i.reduce(((e,t)=>e+t),0)/i.length).toFixed(3):"0.000"}`},{type:"dominant",icon:"💪",title:"Strong Components",value:a.length,detail:"> 30% of magnitude"}]}generateInsightCards(e){return e.map((e=>`\n            <div class="insight-card ${e.type}">\n                <div class="insight-header">\n                    <span class="insight-icon">${e.icon}</span>\n                    <span class="insight-title">${e.title}</span>\n                </div>\n                <div class="insight-value">${e.value}</div>\n                <div class="insight-detail">${e.detail}</div>\n            </div>\n        `)).join("")}calculateComponentExtremes(e){return[...e.components.map(((e,t)=>({value:e,index:t})))].sort(((e,t)=>Math.abs(t.value)-Math.abs(e.value))).slice(0,3)}generateExtremesHTML(e){return`\n            <div class="extreme-category">\n                <div class="extreme-header">\n                    <span class="extreme-icon">🔝</span>\n                    <span class="extreme-title">Highest Components</span>\n                </div>\n                <div class="extreme-items">\n                    ${e.map((e=>`\n                        <div class="extreme-item">\n                            <span class="extreme-index">dim ${e.index+1}</span>\n                            <span class="extreme-value ${e.value>=0?"positive":"negative"}">${e.value.toFixed(4)}</span>\n                        </div>\n                    `)).join("")}\n                </div>\n            </div>\n        `}populateStatisticsAnalysis(e,t,n){const i=document.getElementById("stats-categories"),r=document.getElementById("statistical-insights");if(i&&(i.innerHTML=this.generateStatsCategories(t)),r){const n=this.generateStatisticalInsights(e,t);r.innerHTML=this.generateInsightsHTML(n)}}generateStatsCategories(e){return`\n            <div class="stats-category">\n                <h6>📊 Basic Statistics</h6>\n                <div class="stats-detailed">\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Mean:</span>\n                        <span class="stat-value">${e.mean?.toFixed(4)||"0.0000"}</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Standard Deviation:</span>\n                        <span class="stat-value">${e.standardDeviation?.toFixed(4)||"0.0000"}</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Min Value:</span>\n                        <span class="stat-value">${e.min?.toFixed(4)||"0.0000"}</span>\n                    </div>\n                    <div class="stat-row enhanced">\n                        <span class="stat-name">Max Value:</span>\n                        <span class="stat-value">${e.max?.toFixed(4)||"0.0000"}</span>\n                    </div>\n                </div>\n            </div>\n        `}generateStatisticalInsights(e,t){const n=[],i=t.magnitude||0;i>2?n.push({icon:"⚡",text:`High magnitude vector (${i.toFixed(2)}) indicates strong signal strength`}):i<.5&&n.push({icon:"🔋",text:`Low magnitude vector (${i.toFixed(2)}) indicates weak signal strength`});const r=this.calculateSparsity(e);return r>.7&&n.push({icon:"💎",text:`Highly sparse vector (${(100*r).toFixed(1)}% zeros) - efficient representation`}),n}generateInsightsHTML(e){return e.map((e=>`\n            <div class="insight-item">\n                <span class="insight-indicator">${e.icon}</span>\n                <span class="insight-text">${e.text}</span>\n            </div>\n        `)).join("")}populateInformationAnalysis(e,t,n){const i=document.getElementById("information-analysis");if(!i)return;const r=t.informationEntropy(e),a=r/Math.log2(e.components.length);i.innerHTML=`\n            <div class="quantum-analysis">\n                <h6>⚛️ Information Quantum Analysis</h6>\n                <div class="quantum-metrics">\n                    ${this.generateQuantumCard("excitatory",n.excitatory,n)}\n                    ${this.generateQuantumCard("inhibitory",n.inhibitory,n)}\n                    ${this.generateQuantumBalanceCard(n)}\n                </div>\n            </div>\n            \n            <div class="entropy-analysis">\n                <h6>🌊 Entropy & Information Content</h6>\n                <div class="entropy-metrics">\n                    ${this.generateEntropyCard("Shannon Entropy",r,"bits",a)}\n                    ${this.generateEffectiveDimensionalityCard(e)}\n                    ${this.generateInformationDensityCard(r,e.components.length)}\n                </div>\n            </div>\n        `}generateQuantumCard(e,t,n){const i=n.excitatory+n.inhibitory,r=i>0?(t/i*100).toFixed(1):"0.0";return`\n            <div class="quantum-card ${e}">\n                <div class="quantum-header">\n                    <span class="quantum-icon">${"excitatory"===e?"⚡":"🔋"}</span>\n                    <span class="quantum-title">${e.charAt(0).toUpperCase()+e.slice(1)} Quantum</span>\n                </div>\n                <div class="quantum-value">${t.toFixed(4)}</div>\n                <div class="quantum-bar">\n                    <div class="quantum-fill ${e}" style="width: ${r}%"></div>\n                </div>\n            </div>\n        `}generateQuantumBalanceCard(e){const t=e.excitatory-e.inhibitory,n=this.getQuantumInterpretation(e);return`\n            <div class="quantum-card balance">\n                <div class="quantum-header">\n                    <span class="quantum-icon">⚖️</span>\n                    <span class="quantum-title">Quantum Balance</span>\n                </div>\n                <div class="quantum-value">${t.toFixed(4)}</div>\n                <div class="quantum-interpretation">${n}</div>\n            </div>\n        `}getQuantumInterpretation(e){const t=e.excitatory-e.inhibitory;return Math.abs(t)<.1?"Balanced information state":t>0?"Excitatory dominant - activating":"Inhibitory dominant - suppressing"}generateEntropyCard(e,t,n,i){return`\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">📊</span>\n                    <span class="entropy-title">${e}</span>\n                </div>\n                <div class="entropy-value">${t.toFixed(4)} ${n}</div>\n                <div class="entropy-bar">\n                    <div class="entropy-fill" style="width: ${(100*i).toFixed(1)}%"></div>\n                </div>\n                <div class="entropy-detail">${(100*i).toFixed(1)}% of maximum entropy</div>\n            </div>\n        `}generateEffectiveDimensionalityCard(e){const t=e.components.filter((e=>Math.abs(e)>.001)).length;return`\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">🎯</span>\n                    <span class="entropy-title">Effective Dimensionality</span>\n                </div>\n                <div class="entropy-value">${(t/e.components.length*100).toFixed(1)}%</div>\n                <div class="entropy-detail">${t} of ${e.components.length} dimensions active</div>\n            </div>\n        `}generateInformationDensityCard(e,t){return`\n            <div class="entropy-card">\n                <div class="entropy-header">\n                    <span class="entropy-icon">💎</span>\n                    <span class="entropy-title">Information Density</span>\n                </div>\n                <div class="entropy-value">${(e/t).toFixed(4)}</div>\n                <div class="entropy-detail">bits per dimension</div>\n            </div>\n        `}renderChart(e,t){this.safeExecute((()=>{this.components.charts||(this.components.charts=new fo(this)),this.components.charts.renderChart(e,t)}),"chart rendering")}updateRelationships(){this.safeExecute((()=>{this.components.relationships||(this.components.relationships=new bo(this)),this.components.relationships.update()}),"relationships update")}updateIndividualRelationships(){this.safeExecute((()=>{const e=document.getElementById("relationships-enhanced");if(!e)return;const{selectedVector:t}=this.state,{vectors:n}=this.getState(),{forceCalculator:i}=this.getModules();if(!t||!n||n.length<2)return void(e.innerHTML="<p>Need at least 2 vectors and a selected vector for relationship analysis.</p>");const r=n.filter((e=>e.id!==t.id)),a=this.calculateAllMetricsRelationships(t,r,i);e.innerHTML=this.generateIndividualRelationshipHTML(a),this.setupIndividualRelationshipControls(a)}),"individual relationships update")}calculateAllMetricsRelationships(e,t,n){return t.map((t=>({vector:t,metrics:{cosine:n.cosineSimilarity(e,t),correlation:n.correlation(e,t),euclidean:n.euclideanDistance(e,t),manhattan:n.manhattanDistance(e,t),resonance:n.resonanceForce(e,t),quantum:n.quantumEntanglement?n.quantumEntanglement(e,t):Math.abs(n.correlation(e,t))}})))}generateIndividualRelationshipHTML(e){return`\n            <div class="individual-relationships">\n                <div class="relationship-header">\n                    <h6>🔗 Vector ${this.state.selectedVector.id} Relationships</h6>\n                    <div class="metric-selector">\n                        <label for="individual-metric-select">Sort by:</label>\n                        <select id="individual-metric-select" class="mini-select">\n                            <option value="cosine">Cosine Similarity</option>\n                            <option value="correlation">Pearson Correlation</option>\n                            <option value="euclidean">Euclidean Distance (inverted)</option>\n                            <option value="manhattan">Manhattan Distance (inverted)</option>\n                            <option value="resonance">Resonance Force</option>\n                            <option value="quantum">Quantum Entanglement</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class="metrics-overview">\n                    <h6>📊 Metrics Overview</h6>\n                    <div class="metrics-grid" id="metrics-overview-grid">\n                        ${this.generateMetricsOverview(e)}\n                    </div>\n                </div>\n                \n                <div class="relationship-details">\n                    <h6>📋 Detailed Relationships</h6>\n                    <div class="relationships-table" id="individual-relationships-table">\n                        ${this.generateRelationshipsTable(e,"cosine")}\n                    </div>\n                </div>\n            </div>\n        `}generateMetricsOverview(e){const t={cosine:"Cosine Similarity",correlation:"Correlation",euclidean:"Euclidean Distance",manhattan:"Manhattan Distance",resonance:"Resonance Force",quantum:"Quantum Entanglement"},n={cosine:"📐",correlation:"📈",euclidean:"📏",manhattan:"🛣️",resonance:"🌊",quantum:"⚛️"};return["cosine","correlation","euclidean","manhattan","resonance","quantum"].map((i=>{const r=e.map((e=>Math.abs(e.metrics[i]))),a=r.reduce(((e,t)=>e+t),0)/r.length,s=Math.max(...r),o=e.find((e=>Math.abs(e.metrics[i])===s));return`\n                <div class="metric-overview-card">\n                    <div class="metric-header">\n                        <span class="metric-icon">${n[i]}</span>\n                        <span class="metric-name">${t[i]}</span>\n                    </div>\n                    <div class="metric-stats">\n                        <div class="stat-item">\n                            <span class="stat-label">Average:</span>\n                            <span class="stat-value">${a.toFixed(3)}</span>\n                        </div>\n                        <div class="stat-item">\n                            <span class="stat-label">Best Match:</span>\n                            <span class="stat-value">V${o?.vector.id} (${s.toFixed(3)})</span>\n                        </div>\n                    </div>\n                </div>\n            `})).join("")}generateRelationshipsTable(e,t){return`\n            <div class="relationships-table-container">\n                <table class="relationships-table">\n                    <thead>\n                        <tr>\n                            <th>Vector</th>\n                            <th>Cosine</th>\n                            <th>Correlation</th>\n                            <th>Euclidean</th>\n                            <th>Manhattan</th>\n                            <th>Resonance</th>\n                            <th>Quantum</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${[...e].sort(((e,n)=>{const i="euclidean"===t||"manhattan"===t?-Math.abs(e.metrics[t]):Math.abs(e.metrics[t]);return("euclidean"===t||"manhattan"===t?-Math.abs(n.metrics[t]):Math.abs(n.metrics[t]))-i})).map((e=>`\n                            <tr class="relationship-row">\n                                <td class="vector-cell">\n                                    <span class="vector-id">V${e.vector.id}</span>\n                                </td>\n                                <td class="metric-cell ${"cosine"===t?"highlighted":""}">${e.metrics.cosine.toFixed(3)}</td>\n                                <td class="metric-cell ${"correlation"===t?"highlighted":""}">${e.metrics.correlation.toFixed(3)}</td>\n                                <td class="metric-cell ${"euclidean"===t?"highlighted":""}">${e.metrics.euclidean.toFixed(3)}</td>\n                                <td class="metric-cell ${"manhattan"===t?"highlighted":""}">${e.metrics.manhattan.toFixed(3)}</td>\n                                <td class="metric-cell ${"resonance"===t?"highlighted":""}">${e.metrics.resonance.toFixed(3)}</td>\n                                <td class="metric-cell ${"quantum"===t?"highlighted":""}">${e.metrics.quantum.toFixed(3)}</td>\n                            </tr>\n                        `)).join("")}\n                    </tbody>\n                </table>\n            </div>\n        `}setupIndividualRelationshipControls(e){const t=document.getElementById("individual-metric-select");t&&t.addEventListener("change",(t=>{const n=t.target.value,i=document.getElementById("individual-relationships-table");i&&(i.innerHTML=this.generateRelationshipsTable(e,n))}))}updateClustering(){console.log("🎯 VectorAnalysisStudio.updateClustering() called"),this.safeExecute((()=>{const e=document.getElementById("clusters-tab"),t=document.getElementById("clusters-enhanced");console.log("Container check:",{mainClusters:!!e,individualClusters:!!t}),e?(console.log("Updating main clusters tab"),this.updateMainClustering(e)):t?(console.log("Updating individual clusters tab"),this.components.clustering||(console.log("Creating new ClusteringAnalyzer instance"),this.components.clustering=new _o(this)),console.log("Calling clustering.update()"),this.components.clustering.update()):console.warn("No clustering container found")}),"clustering update")}updateMainClustering(e){const{vectors:t}=this.getState();if(!t||t.length<2)return void(e.innerHTML="<p>Need at least 2 vectors for clustering analysis.</p>");const n={studio:this,currentAlgorithm:"kmeans",numClusters:3,generateClusteringHTML:()=>'\n                    <div class="clustering-controls">\n                        <div class="control-group">\n                            <label for="main-clustering-algorithm">Algorithm:</label>\n                            <select id="main-clustering-algorithm" class="mini-select">\n                                <option value="kmeans">K-Means</option>\n                                <option value="hierarchical">Hierarchical</option>\n                                <option value="dbscan">DBSCAN</option>\n                            </select>\n                        </div>\n                        <div class="control-group">\n                            <label for="main-num-clusters">Number of Clusters:</label>\n                            <input type="range" id="main-num-clusters" min="2" max="10" value="3">\n                            <span id="main-clusters-value">3</span>\n                        </div>\n                        <button id="main-run-clustering" class="btn-compact">🔄 Run Clustering</button>\n                    </div>\n                    \n                    <div class="clustering-results">\n                        <div class="cluster-summary" id="main-cluster-summary"></div>\n                        <div class="cluster-details" id="main-cluster-details"></div>\n                    </div>\n                ',setupControls(){console.log("🎛️ Setting up main clustering controls..."),setTimeout((()=>{const e=document.getElementById("main-run-clustering");e&&(e.addEventListener("click",(()=>{console.log("🔄 Main clustering button clicked!"),this.performClustering()})),console.log("✅ Main clustering button handler registered"))}),100)},performClustering(){console.log("🔄 Performing main clustering..."),this.studio.components.clustering||(this.studio.components.clustering=new _o(this.studio));const e=this.studio.getState().vectors,t=this.studio.components.clustering.kMeansClustering(e,this.numClusters);this.renderResults(t)},renderResults(e){const t=document.getElementById("main-cluster-summary"),n=document.getElementById("main-cluster-details");t&&n&&(this.studio.components.clustering||(this.studio.components.clustering=new _o(this.studio)),t.id="cluster-summary",n.id="cluster-details",this.studio.components.clustering.renderClusteringResults(e),t.id="main-cluster-summary",n.id="main-cluster-details")}};e.innerHTML=n.generateClusteringHTML(),n.setupControls(),n.performClustering()}updateStatistics(){this.safeExecute((()=>{this.components.statistics||(this.components.statistics=new yo(this)),this.components.statistics.update()}),"statistics update")}showAnalysisPlaceholder(e){e.innerHTML='\n            <div class="analysis-placeholder">\n                <div class="placeholder-icon">🎯</div>\n                <h3>Select a Vector to Begin Analysis</h3>\n                <p>Click on any vector in the visualization or use the dropdown above to start exploring detailed properties and relationships.</p>\n            </div>\n        '}showError(e,t){e.innerHTML=`\n            <div class="analysis-error">\n                <div class="error-icon">⚠️</div>\n                <h3>Analysis Error</h3>\n                <p>${t}</p>\n            </div>\n        `}handleVectorSelection(e){this.safeExecute((()=>{const t=parseInt(e.target.value);(t||0===t)&&this.framework.selectVector(t)}),"vector selection")}compareVectors(){this.safeExecute((()=>{this.components.comparison||(this.components.comparison=new vo(this)),this.components.comparison.show()}),"vector comparison")}exportAnalysis(){this.safeExecute((()=>{this.components.exporter||(this.components.exporter=new xo(this)),this.components.exporter.exportCurrentAnalysis()}),"analysis export")}updateElement(e,t){const n=this.elements.get(e)||document.getElementById(e);n&&(n.textContent=t)}getModules(){try{return this.framework.getModules()}catch(e){return console.error("Failed to get modules:",e),{}}}getState(){try{return this.framework.getState()}catch(e){return console.error("Failed to get state:",e),{vectors:[]}}}safeExecute(e,t){try{e()}catch(n){console.error(`Error in ${t}:`,n)}}dispose(){try{const{eventBus:e}=this.framework;e.off("stateChanged",this.boundHandlers.onStateChanged),Object.values(this.components).forEach((e=>{e?.dispose&&e.dispose()})),this.elements.clear()}catch(e){console.error("Error during disposal:",e)}}populatePatternsAnalysis(e){this.components.patterns||(this.components.patterns=new go(this)),this.components.patterns.update()}}class fo{constructor(e){this.studio=e,this.chartTypes=["bar","line","histogram","radial"],this.currentChartType="bar"}renderChart(e,t){const n=document.getElementById(e);if(!n||!window.d3)return;n.innerHTML="";const i=20,r=20,a=40,s=50,o=n.clientWidth-s-r,l=300-i-a,c=window.d3.select(n).append("svg").attr("width","100%").attr("height","300px").attr("viewBox",`0 0 ${n.clientWidth} 300`).append("g").attr("transform",`translate(${s},${i})`),d=document.getElementById("chart-type-select");switch(d?.value||"bar"){case"line":this.renderLineChart(c,t,o,l);break;case"histogram":this.renderHistogram(c,t,o,l);break;case"radial":this.renderRadialChart(c,t,o,l);break;default:this.renderBarChart(c,t,o,l)}}renderBarChart(e,t,n,i){const r=window.d3.scaleBand().range([0,n]).padding(.1).domain(t.map(((e,t)=>t))),a=window.d3.scaleLinear().range([i,0]).domain(window.d3.extent(t));e.selectAll(".bar").data(t).enter().append("rect").attr("class","bar").attr("x",((e,t)=>r(t))).attr("width",r.bandwidth()).attr("y",(e=>a(Math.max(0,e)))).attr("height",(e=>Math.abs(a(e)-a(0)))).attr("fill",(e=>e>=0?"#4ecdc4":"#f06292")).attr("opacity",.8).on("mouseover",((e,t)=>this.showTooltip(e,t))).on("mouseout",(()=>this.hideTooltip())),this.addAxes(e,r,a,i,t.length)}renderLineChart(e,t,n,i){const r=window.d3.scaleLinear().range([0,n]).domain([0,t.length-1]),a=window.d3.scaleLinear().range([i,0]).domain(window.d3.extent(t)),s=window.d3.line().x(((e,t)=>r(t))).y((e=>a(e))).curve(window.d3.curveMonotoneX);e.append("path").datum(t).attr("fill","none").attr("stroke","#4ecdc4").attr("stroke-width",2).attr("d",s),e.selectAll(".dot").data(t).enter().append("circle").attr("class","dot").attr("cx",((e,t)=>r(t))).attr("cy",(e=>a(e))).attr("r",4).attr("fill",(e=>e>=0?"#4ecdc4":"#f06292")).on("mouseover",((e,t)=>this.showTooltip(e,t))).on("mouseout",(()=>this.hideTooltip())),this.addAxes(e,r,a,i,t.length)}renderHistogram(e,t,n,i){const r=window.d3.histogram().domain(window.d3.extent(t)).thresholds(10)(t),a=window.d3.scaleLinear().domain(window.d3.extent(t)).range([0,n]),s=window.d3.scaleLinear().domain([0,window.d3.max(r,(e=>e.length))]).range([i,0]);e.selectAll(".bar").data(r).enter().append("rect").attr("class","bar").attr("x",(e=>a(e.x0))).attr("width",(e=>Math.max(0,a(e.x1)-a(e.x0)-1))).attr("y",(e=>s(e.length))).attr("height",(e=>i-s(e.length))).attr("fill","#4ecdc4").attr("opacity",.8),e.append("g").attr("transform",`translate(0,${i})`).call(window.d3.axisBottom(a)),e.append("g").call(window.d3.axisLeft(s))}renderRadialChart(e,t,n,i){const r=Math.min(n,i)/2-20,a=n/2,s=i/2,o=window.d3.scaleLinear().domain([0,t.length]).range([0,2*Math.PI]),l=window.d3.scaleLinear().domain(window.d3.extent(t)).range([0,r]);e.append("circle").attr("cx",a).attr("cy",s).attr("r",3).attr("fill","#fff"),t.forEach(((t,n)=>{const i=o(n),r=Math.abs(l(t));e.append("line").attr("x1",a).attr("y1",s).attr("x2",a+r*Math.cos(i-Math.PI/2)).attr("y2",s+r*Math.sin(i-Math.PI/2)).attr("stroke",t>=0?"#4ecdc4":"#f06292").attr("stroke-width",2),e.append("circle").attr("cx",a+r*Math.cos(i-Math.PI/2)).attr("cy",s+r*Math.sin(i-Math.PI/2)).attr("r",3).attr("fill",t>=0?"#4ecdc4":"#f06292")}))}addAxes(e,t,n,i,r){e.append("g").attr("transform",`translate(0,${n(0)})`).call(window.d3.axisBottom(t).tickFormat(((e,t)=>t%Math.ceil(r/10)===0?t:""))),e.append("g").call(window.d3.axisLeft(n).ticks(8))}showTooltip(e,t){const n=window.d3.select("body").append("div").attr("class","chart-tooltip").style("position","absolute").style("background","rgba(0,0,0,0.9)").style("color","white").style("padding","8px").style("border-radius","4px").style("font-size","12px").style("pointer-events","none").style("z-index","1000").text(`Value: ${t.toFixed(4)}`),[i,r]=window.d3.pointer(e,document.body);n.style("left",i+10+"px").style("top",r-10+"px")}hideTooltip(){window.d3.selectAll(".chart-tooltip").remove()}dispose(){}}class go{constructor(e){this.studio=e}update(){const e=document.getElementById("patterns-analysis");if(!e)return;const{selectedVector:t}=this.studio.state;t?(e.innerHTML=this.generatePatternHTML(),this.analyzePatterns(t)):e.innerHTML="<p>No vector selected for pattern analysis.</p>"}generatePatternHTML(){return'\n            <div class="pattern-detection">\n                <h6>🧩 Pattern Detection</h6>\n                <div class="pattern-results" id="pattern-results"></div>\n            </div>\n            \n            <div class="anomaly-detection">\n                <h6>⚠️ Anomaly Detection</h6>\n                <div class="anomaly-results" id="anomaly-results"></div>\n            </div>\n        '}analyzePatterns(e){const t=this.detectPatterns(e.components),n=this.detectAnomalies(e.components);this.renderPatternResults(t),this.renderAnomalyResults(n)}detectPatterns(e){const t=[],n=this.checkMonotonic(e);n.confidence>.6&&t.push({type:"Monotonic",icon:"📈",description:`${n.direction} trend`,confidence:n.confidence,strength:n.strength});const i=this.checkPeriodic(e);i.confidence>.5&&t.push({type:"Periodic",icon:"🌊",description:`Period: ${i.period}`,confidence:i.confidence,strength:i.strength});const r=this.checkSymmetry(e);return r.confidence>.7&&t.push({type:"Symmetry",icon:"🪞",description:`${r.type} symmetry`,confidence:r.confidence,strength:r.strength}),t}checkMonotonic(e){let t=0,n=0;for(let o=1;o<e.length;o++)e[o]>e[o-1]?t++:e[o]<e[o-1]&&n++;const i=e.length-1,r=t/i,a=n/i,s=Math.max(r,a);return{confidence:s,direction:r>a?"Increasing":"Decreasing",strength:s}}checkPeriodic(e){let t=0,n=0;for(let i=2;i<=Math.floor(e.length/3);i++){const r=this.autocorrelation(e,i);r>n&&(n=r,t=i)}return{confidence:n,period:t,strength:n}}autocorrelation(e,t){const n=e.length-t;if(n<=0)return 0;const i=e.reduce(((e,t)=>e+t),0)/e.length;let r=0,a=0;for(let s=0;s<n;s++){const n=e[s]-i;r+=n*(e[s+t]-i),a+=n*n}return a>0?Math.abs(r/a):0}checkSymmetry(e){const t=e.length;let n=0;for(let r=0;r<Math.floor(t/2);r++){const i=Math.abs(e[r]-e[t-1-r]),a=(Math.abs(e[r])+Math.abs(e[t-1-r]))/2;n+=a>0?1-i/a:1}const i=n/Math.floor(t/2);return{confidence:Math.max(0,i),type:"Reflection",strength:i}}detectAnomalies(e){const t=e.reduce(((e,t)=>e+t),0)/e.length,n=e.reduce(((e,n)=>e+Math.pow(n-t,2)),0)/e.length,i=Math.sqrt(n),r=[];return e.forEach(((e,n)=>{const a=Math.abs((e-t)/i);a>2.5&&r.push({index:n,value:e,zScore:a,severity:a>3?"High":"Medium"})})),r}renderPatternResults(e){const t=document.getElementById("pattern-results");t&&(0!==e.length?t.innerHTML=e.map((e=>`\n            <div class="pattern-item">\n                <div class="pattern-header">\n                    <span class="pattern-icon">${e.icon}</span>\n                    <span class="pattern-type">${e.type}</span>\n                    <span class="pattern-confidence">${(100*e.confidence).toFixed(1)}%</span>\n                </div>\n                <div class="pattern-description">${e.description}</div>\n                <div class="pattern-strength-bar">\n                    <div class="pattern-strength-fill" style="width: ${100*e.strength}%"></div>\n                </div>\n            </div>\n        `)).join(""):t.innerHTML="<p>No significant patterns detected.</p>")}renderAnomalyResults(e){const t=document.getElementById("anomaly-results");t&&(0!==e.length?t.innerHTML=`\n            <div class="anomaly-summary">\n                <span class="anomaly-count">${e.length} anomalies detected</span>\n            </div>\n            <div class="anomaly-list">\n                ${e.map((e=>`\n                    <div class="anomaly-item ${e.severity.toLowerCase()}">\n                        <div class="anomaly-position">Dim ${e.index+1}</div>\n                        <div class="anomaly-value">${e.value.toFixed(4)}</div>\n                        <div class="anomaly-score">Z: ${e.zScore.toFixed(2)}</div>\n                        <div class="anomaly-severity">${e.severity}</div>\n                    </div>\n                `)).join("")}\n            </div>\n        `:t.innerHTML="<p>No anomalies detected.</p>")}dispose(){}}class vo{constructor(e){this.studio=e}show(){const{vectors:e}=this.studio.getState();!e||e.length<2?alert("Need at least 2 vectors for comparison."):this.createComparisonModal(e)}createComparisonModal(e){const t=document.createElement("div");t.className="comparison-modal-overlay",t.innerHTML=`\n            <div class="comparison-modal">\n                <div class="comparison-header">\n                    <h3>🔍 Vector Comparison</h3>\n                    <button class="close-comparison">✕</button>\n                </div>\n                <div class="comparison-content">\n                    <div class="vector-selector-grid">\n                        <div class="selector-group">\n                            <label>Vector A:</label>\n                            <select id="vector-a-select">\n                                ${e.map((e=>`<option value="${e.id}">Vector ${e.id}</option>`)).join("")}\n                            </select>\n                        </div>\n                        <div class="selector-group">\n                            <label>Vector B:</label>\n                            <select id="vector-b-select">\n                                ${e.map((e=>`<option value="${e.id}">Vector ${e.id}</option>`)).join("")}\n                            </select>\n                        </div>\n                    </div>\n                    <div class="comparison-results" id="comparison-results"></div>\n                </div>\n            </div>\n        `,document.body.appendChild(t),this.setupComparisonEventHandlers(t,e),this.performComparison(e)}setupComparisonEventHandlers(e,t){const n=e.querySelector(".close-comparison"),i=e.querySelector("#vector-a-select"),r=e.querySelector("#vector-b-select");n.addEventListener("click",(()=>{document.body.removeChild(e)})),e.addEventListener("click",(t=>{t.target===e&&document.body.removeChild(e)})),i.addEventListener("change",(()=>this.performComparison(t))),r.addEventListener("change",(()=>this.performComparison(t)))}performComparison(e){const t=document.getElementById("vector-a-select"),n=document.getElementById("vector-b-select"),i=document.getElementById("comparison-results");if(!t||!n||!i)return;const r=e.find((e=>e.id===parseInt(t.value))),a=e.find((e=>e.id===parseInt(n.value)));if(!r||!a)return;const s=this.calculateComparison(r,a);this.renderComparisonResults(s,i)}calculateComparison(e,t){const{forceCalculator:n}=this.studio.getModules();return{vectorA:e,vectorB:t,cosineSimilarity:n.cosineSimilarity(e,t),euclideanDistance:n.euclideanDistance(e,t),manhattanDistance:n.manhattanDistance(e,t),magnitudeA:n.magnitude(e),magnitudeB:n.magnitude(t),dotProduct:this.dotProduct(e.components,t.components),angleBetween:this.angleBetween(e.components,t.components)}}dotProduct(e,t){return e.reduce(((e,n,i)=>e+n*t[i]),0)}angleBetween(e,t){const n=this.dotProduct(e,t),i=Math.sqrt(e.reduce(((e,t)=>e+t*t),0)),r=Math.sqrt(t.reduce(((e,t)=>e+t*t),0));return Math.acos(n/(i*r))*(180/Math.PI)}renderComparisonResults(e,t){t.innerHTML=`\n            <div class="comparison-metrics">\n                <div class="metric-card">\n                    <div class="metric-label">Cosine Similarity</div>\n                    <div class="metric-value">${e.cosineSimilarity.toFixed(4)}</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Euclidean Distance</div>\n                    <div class="metric-value">${e.euclideanDistance.toFixed(4)}</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Manhattan Distance</div>\n                    <div class="metric-value">${e.manhattanDistance.toFixed(4)}</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Angle Between</div>\n                    <div class="metric-value">${e.angleBetween.toFixed(2)}°</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Dot Product</div>\n                    <div class="metric-value">${e.dotProduct.toFixed(4)}</div>\n                </div>\n                <div class="metric-card">\n                    <div class="metric-label">Magnitude Ratio</div>\n                    <div class="metric-value">${(e.magnitudeA/e.magnitudeB).toFixed(4)}</div>\n                </div>\n            </div>\n        `}dispose(){}}class xo{constructor(e){this.studio=e}exportCurrentAnalysis(){const{vectors:e}=this.studio.getState(),t=this.studio.state.selectedVector;if(!e||0===e.length)return void alert("No vectors available for export.");const n=this.gatherAnalysisData(e,t);this.showExportModal(n)}gatherAnalysisData(e,t){const{forceCalculator:n}=this.studio.getModules(),i={timestamp:(new Date).toISOString(),totalVectors:e.length,selectedVector:t?.id||null,globalStats:this.calculateGlobalStats(e,n),vectors:e.map((e=>({id:e.id,components:e.components,magnitude:n.magnitude(e),entropy:n.informationEntropy(e),quantums:n.getInformationQuantums(e)})))};return t&&(i.selectedVectorAnalysis=this.getSelectedVectorAnalysis(t,n)),i}calculateGlobalStats(e,t){const n=e.map((e=>t.magnitude(e))),i=e.map((e=>t.informationEntropy(e)));return{avgMagnitude:n.reduce(((e,t)=>e+t),0)/n.length,avgEntropy:i.reduce(((e,t)=>e+t),0)/i.length,dimensions:e[0]?.components.length||0}}getSelectedVectorAnalysis(e,t){return{id:e.id,magnitude:t.magnitude(e),entropy:t.informationEntropy(e),quantums:t.getInformationQuantums(e),statistics:{mean:e.components.reduce(((e,t)=>e+t),0)/e.components.length,min:Math.min(...e.components),max:Math.max(...e.components)}}}showExportModal(e){const t=document.createElement("div");t.className="export-modal-overlay",t.innerHTML=`\n            <div class="export-modal">\n                <div class="export-header">\n                    <h3>📤 Export Analysis</h3>\n                    <button class="close-export">✕</button>\n                </div>\n                <div class="export-content">\n                    <div class="export-options">\n                        <button class="export-btn" data-format="json">📄 Export as JSON</button>\n                        <button class="export-btn" data-format="csv">📊 Export as CSV</button>\n                        <button class="export-btn" data-format="txt">📝 Export as Text Report</button>\n                    </div>\n                    <div class="export-preview">\n                        <h4>Preview:</h4>\n                        <pre id="export-preview-content">${JSON.stringify(e,null,2)}</pre>\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(t),this.setupExportEventHandlers(t,e)}setupExportEventHandlers(e,t){const n=e.querySelector(".close-export"),i=e.querySelectorAll(".export-btn");e.querySelector("#export-preview-content"),n.addEventListener("click",(()=>{document.body.removeChild(e)})),e.addEventListener("click",(t=>{t.target===e&&document.body.removeChild(e)})),i.forEach((n=>{n.addEventListener("click",(()=>{const i=n.getAttribute("data-format");this.performExport(t,i),document.body.removeChild(e)}))}))}performExport(e,t){let n,i,r;switch(t){case"json":n=JSON.stringify(e,null,2),i=`vector-analysis-${Date.now()}.json`,r="application/json";break;case"csv":n=this.convertToCSV(e),i=`vector-analysis-${Date.now()}.csv`,r="text/csv";break;case"txt":n=this.convertToTextReport(e),i=`vector-analysis-${Date.now()}.txt`,r="text/plain";break;default:return}this.downloadFile(n,i,r)}convertToCSV(e){let t="Vector ID,Magnitude,Entropy,Excitatory Quantum,Inhibitory Quantum\n";return e.vectors.forEach((e=>{t+=`${e.id},${e.magnitude},${e.entropy},${e.quantums.excitatory},${e.quantums.inhibitory}\n`})),t}convertToTextReport(e){let t="Vector Analysis Report\n";return t+=`Generated: ${e.timestamp}\n`,t+=`Total Vectors: ${e.totalVectors}\n`,t+=`Dimensions: ${e.globalStats.dimensions}\n\n`,t+="Global Statistics:\n",t+=`Average Magnitude: ${e.globalStats.avgMagnitude.toFixed(4)}\n`,t+=`Average Entropy: ${e.globalStats.avgEntropy.toFixed(4)}\n\n`,e.selectedVectorAnalysis&&(t+=`Selected Vector Analysis (Vector ${e.selectedVectorAnalysis.id}):\n`,t+=`Magnitude: ${e.selectedVectorAnalysis.magnitude.toFixed(4)}\n`,t+=`Entropy: ${e.selectedVectorAnalysis.entropy.toFixed(4)}\n`,t+=`Excitatory Quantum: ${e.selectedVectorAnalysis.quantums.excitatory.toFixed(4)}\n`,t+=`Inhibitory Quantum: ${e.selectedVectorAnalysis.quantums.inhibitory.toFixed(4)}\n\n`),t+="Detailed Vector Data:\n",e.vectors.forEach((e=>{t+=`Vector ${e.id}: Magnitude=${e.magnitude.toFixed(4)}, Entropy=${e.entropy.toFixed(4)}\n`})),t}downloadFile(e,t,n){const i=new Blob([e],{type:n}),r=URL.createObjectURL(i),a=document.createElement("a");a.href=r,a.download=t,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(r)}dispose(){}}class bo{constructor(e){this.studio=e,this.metrics=["cosine","correlation","euclidean","manhattan","resonance","quantum"],this.currentMetric="cosine"}update(){const e=document.getElementById("relationships-enhanced");if(!e)return;const{vectors:t}=this.studio.getState();!t||t.length<2?e.innerHTML="<p>Need at least 2 vectors for relationship analysis.</p>":(e.innerHTML=this.generateRelationshipHTML(),this.calculateRelationships(),this.setupRelationshipControls())}generateRelationshipHTML(){return'\n            <div class="relationship-controls">\n                <div class="control-group">\n                    <label for="similarity-metric">Similarity Metric:</label>\n                    <select id="similarity-metric" class="mini-select">\n                        <option value="cosine">Cosine Similarity</option>\n                        <option value="correlation">Pearson Correlation</option>\n                        <option value="euclidean">Euclidean Distance</option>\n                        <option value="manhattan">Manhattan Distance</option>\n                        <option value="resonance">Resonance Force</option>\n                        <option value="quantum">Quantum Entanglement</option>\n                    </select>\n                </div>\n                <div class="control-group">\n                    <label for="similarity-threshold">Threshold:</label>\n                    <input type="range" id="similarity-threshold" min="0" max="1" step="0.01" value="0.5">\n                    <span id="threshold-value">0.5</span>\n                </div>\n            </div>\n            \n            <div class="relationship-visualization">\n                <div class="similarity-matrix" id="similarity-matrix"></div>\n                <div class="relationship-list" id="relationship-list"></div>\n            </div>\n        '}calculateRelationships(){const{vectors:e}=this.studio.getState(),{forceCalculator:t}=this.studio.getModules(),n=[],i=[];for(let r=0;r<e.length;r++){i[r]=[];for(let a=0;a<e.length;a++){let s;switch(this.currentMetric){case"correlation":s=t.correlation(e[r],e[a]);break;case"euclidean":s=1/(1+t.euclideanDistance(e[r],e[a]));break;case"manhattan":s=1/(1+t.manhattanDistance(e[r],e[a]));break;case"resonance":s=t.resonanceForce(e[r],e[a]);break;case"quantum":s=t.quantumEntanglement?t.quantumEntanglement(e[r],e[a]):Math.abs(t.correlation(e[r],e[a]));break;default:s=t.cosineSimilarity(e[r],e[a])}i[r][a]=s,r<a&&n.push({vector1:e[r],vector2:e[a],similarity:Math.abs(s),rawSimilarity:s})}}this.renderSimilarityMatrix(i,e),this.renderRelationshipList(n)}renderSimilarityMatrix(e,t){const n=document.getElementById("similarity-matrix");if(!n)return;if(n.innerHTML="<h6>📊 Similarity Matrix</h6>",!window.d3)return void(n.innerHTML+='<div class="matrix-fallback">D3.js not available. Matrix visualization disabled.</div>');const i=Math.min(300,n.clientWidth||300),r=i/t.length,a=window.d3.select(n).append("svg").attr("width",i).attr("height",i),s=window.d3.scaleSequential(window.d3.interpolateRdYlBu).domain([-1,1]);for(let o=0;o<t.length;o++)for(let n=0;n<t.length;n++)a.append("rect").attr("x",n*r).attr("y",o*r).attr("width",r).attr("height",r).attr("fill",s(e[o][n])).attr("stroke","white").attr("stroke-width",1),r>20&&a.append("text").attr("x",n*r+r/2).attr("y",o*r+r/2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",Math.abs(e[o][n])>.5?"white":"black").attr("font-size","10px").text(e[o][n].toFixed(2))}renderRelationshipList(e){const t=document.getElementById("relationship-list");if(!t)return;e.sort(((e,t)=>t.similarity-e.similarity));const n=parseFloat(document.getElementById("similarity-threshold")?.value||.5),i=e.filter((e=>e.similarity>=n));t.innerHTML=`\n            <h6>🔗 Vector Relationships (${i.length})</h6>\n            <div class="relationships-list">\n                ${i.map((e=>`\n                    <div class="relationship-item">\n                        <div class="relationship-vectors">\n                            <span class="vector-id">V${e.vector1.id}</span>\n                            <span class="relationship-arrow">↔</span>\n                            <span class="vector-id">V${e.vector2.id}</span>\n                        </div>\n                        <div class="relationship-strength">\n                            <div class="strength-bar">\n                                <div class="strength-fill" style="width: ${100*e.similarity}%"></div>\n                            </div>\n                            <span class="strength-value">${e.rawSimilarity.toFixed(3)}</span>\n                        </div>\n                    </div>\n                `)).join("")}\n            </div>\n        `}setupRelationshipControls(){const e=document.getElementById("similarity-metric"),t=document.getElementById("similarity-threshold"),n=document.getElementById("threshold-value");e&&e.addEventListener("change",(e=>{this.currentMetric=e.target.value,this.calculateRelationships()})),t&&n&&t.addEventListener("input",(e=>{n.textContent=e.target.value,this.calculateRelationships()}))}dispose(){}}class _o{constructor(e){this.studio=e,this.algorithms=["kmeans","hierarchical","dbscan"],this.currentAlgorithm="kmeans",this.numClusters=3}update(){console.log("🔍 ClusteringAnalyzer.update() called");const e=document.getElementById("clusters-enhanced");if(!e)return void console.warn("clusters-enhanced container not found");const{vectors:t}=this.studio.getState();if(console.log("Vectors available for clustering:",t?.length||0),!t||t.length<2)return console.log("Not enough vectors for clustering"),void(e.innerHTML="<p>Need at least 2 vectors for clustering analysis.</p>");const n=e.querySelector(".clustering-controls");console.log("Container has controls:",!!n),n?console.log("Controls already exist, skipping setup"):(console.log("Generating clustering HTML and setting up controls..."),e.innerHTML=this.generateClusteringHTML(),this.setupClusteringControls()),console.log("Performing initial clustering..."),this.performClustering()}generateClusteringHTML(){return'\n            <div class="clustering-controls">\n                <div class="control-group">\n                    <label for="clustering-algorithm">Algorithm:</label>\n                    <select id="clustering-algorithm" class="mini-select">\n                        <option value="kmeans">K-Means</option>\n                        <option value="hierarchical">Hierarchical</option>\n                        <option value="dbscan">DBSCAN</option>\n                    </select>\n                </div>\n                <div class="control-group">\n                    <label for="num-clusters">Number of Clusters:</label>\n                    <input type="range" id="num-clusters" min="2" max="10" value="3">\n                    <span id="clusters-value">3</span>\n                </div>\n                <button id="run-clustering" class="btn-compact">🔄 Run Clustering</button>\n            </div>\n            \n            <div class="clustering-results">\n                <div class="cluster-summary" id="cluster-summary"></div>\n                <div class="cluster-details" id="cluster-details"></div>\n            </div>\n        '}performClustering(){console.log("🔄 Starting clustering analysis...");try{const{vectors:e}=this.studio.getState();if(!e||e.length<2)return void console.warn("Not enough vectors for clustering:",e?.length||0);console.log("Clustering",e.length,"vectors into",this.numClusters,"clusters");const t=this.kMeansClustering(e,this.numClusters);console.log("Clustering complete. Results:",t),this.renderClusteringResults(t)}catch(e){console.error("Error during clustering:",e);const t=document.getElementById("clusters-enhanced");t&&(t.innerHTML=`<div class="error-message">Clustering failed: ${e.message}</div>`)}}kMeansClustering(e,t){const n=Array.from({length:t},(()=>({centroid:null,vectors:[]})));for(let a=0;a<t;a++){const t=e[Math.floor(Math.random()*e.length)];n[a].centroid=[...t.components]}let i=!0,r=0;for(;i&&r<100;)i=!1,n.forEach((e=>e.vectors=[])),e.forEach((e=>{let t=1/0,i=0;n.forEach(((n,r)=>{const a=this.euclideanDistance(e.components,n.centroid);a<t&&(t=a,i=r)})),n[i].vectors.push(e)})),n.forEach((e=>{if(e.vectors.length>0){const t=new Array(e.vectors[0].components.length).fill(0);e.vectors.forEach((n=>{n.components.forEach(((n,i)=>{t[i]+=n/e.vectors.length}))})),this.euclideanDistance(e.centroid,t)>.001&&(i=!0),e.centroid=t}})),r++;return n}euclideanDistance(e,t){return Math.sqrt(e.reduce(((e,n,i)=>e+Math.pow(n-t[i],2)),0))}renderClusteringResults(e){console.log("📊 Rendering clustering results for",e.length,"clusters");const t=document.getElementById("cluster-summary"),n=document.getElementById("cluster-details");if(console.log("Containers found:",{summary:!!t,details:!!n}),!t||!n)return void console.error("Missing clustering result containers:",{summary:t,details:n});t.innerHTML=`\n            <h6>📊 Clustering Summary</h6>\n            <div class="cluster-stats">\n                <div class="stat-item">\n                    <span class="stat-label">Clusters:</span>\n                    <span class="stat-value">${e.length}</span>\n                </div>\n                <div class="stat-item">\n                    <span class="stat-label">Algorithm:</span>\n                    <span class="stat-value">${this.currentAlgorithm}</span>\n                </div>\n                <div class="stat-item">\n                    <span class="stat-label">Vectors:</span>\n                    <span class="stat-value">${e.reduce(((e,t)=>e+t.vectors.length),0)}</span>\n                </div>\n            </div>\n        `;const i=["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c"];n.innerHTML=`\n            <h6>🎯 Cluster Details</h6>\n            <div class="clusters-list">\n                ${e.map(((e,t)=>`\n                    <div class="cluster-item">\n                        <div class="cluster-header">\n                            <div class="cluster-color" style="background-color: ${i[t%i.length]}"></div>\n                            <span class="cluster-title">Cluster ${t+1}</span>\n                            <span class="cluster-size">${e.vectors.length} vectors</span>\n                        </div>\n                        <div class="cluster-vectors">\n                            ${e.vectors.map((e=>`<span class="vector-chip">V${e.id}</span>`)).join("")}\n                        </div>\n                        <div class="cluster-centroid">\n                            <strong>Centroid:</strong> [${e.centroid.map((e=>e.toFixed(3))).join(", ")}]\n                        </div>\n                    </div>\n                `)).join("")}\n            </div>\n        `}setupClusteringControls(){console.log("🎛️ Setting up clustering controls..."),setTimeout((()=>{const e=document.getElementById("clustering-algorithm"),t=document.getElementById("num-clusters"),n=document.getElementById("clusters-value"),i=document.getElementById("run-clustering");console.log("Controls found (after timeout):",{algorithm:!!e,slider:!!t,value:!!n,button:!!i});const r=document.querySelectorAll("#run-clustering");if(console.log("Number of run-clustering buttons found:",r.length),e&&e.addEventListener("change",(e=>{console.log("Algorithm changed to:",e.target.value),this.currentAlgorithm=e.target.value})),t&&n&&t.addEventListener("input",(e=>{this.numClusters=parseInt(e.target.value),n.textContent=this.numClusters,console.log("Number of clusters changed to:",this.numClusters)})),i)console.log("Attempting to attach click handler..."),i.addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),console.log("🔄 Run clustering button clicked! (method 1)"),this.performClustering()})),i.onclick=e=>{e.preventDefault(),e.stopPropagation(),console.log("🔄 Run clustering button clicked! (method 2)"),this.performClustering()},i.addEventListener("mousedown",(()=>{console.log("🖱️ Run clustering button mousedown detected")})),i.addEventListener("mouseup",(()=>{console.log("🖱️ Run clustering button mouseup detected")})),console.log("✅ Run clustering button handler registered"),console.log("Button properties:",{id:i.id,className:i.className,disabled:i.disabled,style:i.style.cssText,offsetParent:i.offsetParent});else{console.error("❌ Run clustering button not found!");const e=document.querySelector(".btn-compact");console.log("Button found by class:",!!e)}}),100)}dispose(){}}class yo{constructor(e){this.studio=e}update(){const e=document.getElementById("statistics-tab");if(!e)return;const{vectors:t}=this.studio.getState();t&&0!==t.length?(e.innerHTML=this.generateStatisticsHTML(),this.calculateGlobalStatistics()):e.innerHTML="<p>No vectors available for analysis.</p>"}generateStatisticsHTML(){return'\n            <div class="global-statistics">\n                <h6>📈 Global Vector Statistics</h6>\n                <div class="stats-grid" id="global-stats-grid"></div>\n            </div>\n            \n            <div class="distribution-analysis">\n                <h6>📊 Distribution Analysis</h6>\n                <div class="distribution-charts" id="distribution-charts"></div>\n            </div>\n            \n            <div class="correlation-analysis">\n                <h6>🔗 Dimension Correlation Analysis</h6>\n                <div class="correlation-heatmap" id="correlation-heatmap"></div>\n            </div>\n        '}calculateGlobalStatistics(){const{vectors:e}=this.studio.getState(),{forceCalculator:t}=this.studio.getModules(),n=this.computeGlobalStats(e,t);this.renderGlobalStats(n),this.renderDistributionAnalysis(e),this.renderCorrelationAnalysis(e)}computeGlobalStats(e,t){const n=e.map((e=>t.magnitude(e))),i=e.map((e=>t.informationEntropy(e))),r=e.flatMap((e=>e.components));return{totalVectors:e.length,avgMagnitude:n.reduce(((e,t)=>e+t),0)/n.length,stdMagnitude:this.standardDeviation(n),avgEntropy:i.reduce(((e,t)=>e+t),0)/i.length,stdEntropy:this.standardDeviation(i),globalMean:r.reduce(((e,t)=>e+t),0)/r.length,globalStd:this.standardDeviation(r),minComponent:Math.min(...r),maxComponent:Math.max(...r),sparsity:r.filter((e=>Math.abs(e)<.001)).length/r.length}}standardDeviation(e){const t=e.reduce(((e,t)=>e+t),0)/e.length,n=e.reduce(((e,n)=>e+Math.pow(n-t,2)),0)/e.length;return Math.sqrt(n)}renderGlobalStats(e){const t=document.getElementById("global-stats-grid");t&&(t.innerHTML=`\n            <div class="stat-card-global">\n                <div class="stat-icon">📊</div>\n                <div class="stat-content">\n                    <div class="stat-value">${e.totalVectors}</div>\n                    <div class="stat-label">Total Vectors</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📏</div>\n                <div class="stat-content">\n                    <div class="stat-value">${e.avgMagnitude.toFixed(3)}</div>\n                    <div class="stat-label">Avg Magnitude</div>\n                    <div class="stat-detail">±${e.stdMagnitude.toFixed(3)}</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">🌊</div>\n                <div class="stat-content">\n                    <div class="stat-value">${e.avgEntropy.toFixed(3)}</div>\n                    <div class="stat-label">Avg Entropy</div>\n                    <div class="stat-detail">±${e.stdEntropy.toFixed(3)}</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">🎯</div>\n                <div class="stat-content">\n                    <div class="stat-value">${(100*e.sparsity).toFixed(1)}%</div>\n                    <div class="stat-label">Global Sparsity</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📈</div>\n                <div class="stat-content">\n                    <div class="stat-value">${e.globalMean.toFixed(3)}</div>\n                    <div class="stat-label">Global Mean</div>\n                    <div class="stat-detail">±${e.globalStd.toFixed(3)}</div>\n                </div>\n            </div>\n            \n            <div class="stat-card-global">\n                <div class="stat-icon">📉</div>\n                <div class="stat-content">\n                    <div class="stat-value">[${e.minComponent.toFixed(2)}, ${e.maxComponent.toFixed(2)}]</div>\n                    <div class="stat-label">Value Range</div>\n                </div>\n            </div>\n        `)}renderDistributionAnalysis(e){const t=document.getElementById("distribution-charts");if(!t||!window.d3)return;const n=e.flatMap((e=>e.components));t.innerHTML='<div class="distribution-chart" id="component-distribution"></div>';const i=document.getElementById("component-distribution"),r=i.clientWidth||400,a=200,s=20,o=20,l=40,c=50,d=window.d3.select(i).append("svg").attr("width",r).attr("height",a),h=window.d3.histogram().domain(window.d3.extent(n)).thresholds(20)(n),u=window.d3.scaleLinear().domain(window.d3.extent(n)).range([c,r-o]),p=window.d3.scaleLinear().domain([0,window.d3.max(h,(e=>e.length))]).range([a-l,s]);d.selectAll(".bar").data(h).enter().append("rect").attr("class","bar").attr("x",(e=>u(e.x0))).attr("width",(e=>Math.max(0,u(e.x1)-u(e.x0)-1))).attr("y",(e=>p(e.length))).attr("height",(e=>a-l-p(e.length))).attr("fill","#4ecdc4").attr("opacity",.8),d.append("g").attr("transform",`translate(0,${a-l})`).call(window.d3.axisBottom(u)),d.append("g").attr("transform",`translate(${c},0)`).call(window.d3.axisLeft(p))}renderCorrelationAnalysis(e){const t=document.getElementById("correlation-heatmap");if(!t||!window.d3||0===e.length)return;const n=e[0].components.length;if(n>20)return void(t.innerHTML="<p>Too many dimensions for correlation heatmap display.</p>");const i=this.calculateCorrelationMatrix(e),r=Math.min(400,t.clientWidth),a=r/n;t.innerHTML="";const s=window.d3.select(t).append("svg").attr("width",r).attr("height",r),o=window.d3.scaleSequential(window.d3.interpolateRdBu).domain([-1,1]);for(let l=0;l<n;l++)for(let e=0;e<n;e++)s.append("rect").attr("x",e*a).attr("y",l*a).attr("width",a).attr("height",a).attr("fill",o(i[l][e])).attr("stroke","white").attr("stroke-width",1),a>15&&s.append("text").attr("x",e*a+a/2).attr("y",l*a+a/2).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("fill",Math.abs(i[l][e])>.5?"white":"black").attr("font-size","8px").text(i[l][e].toFixed(2))}calculateCorrelationMatrix(e){const t=e[0].components.length,n=[];for(let i=0;i<t;i++){n[i]=[];for(let r=0;r<t;r++){const t=e.map((e=>e.components[i])),a=e.map((e=>e.components[r]));n[i][r]=this.correlation(t,a)}}return n}correlation(e,t){const n=e.length,i=e.reduce(((e,t)=>e+t),0)/n,r=t.reduce(((e,t)=>e+t),0)/n;let a=0,s=0,o=0;for(let l=0;l<n;l++){const n=e[l]-i,c=t[l]-r;a+=n*c,s+=n*n,o+=c*c}return a/Math.sqrt(s*o)}dispose(){}}class Mo{constructor(){if(void 0===window.d3)throw new Error("D3.js is not loaded. Please ensure D3 is available globally before initializing VectorAtomicFramework.");this.eventBus=new _,this.configManager=new y,this.stateManager=new b(this);const e=this.configManager.getConfig();this.svg=window.d3.select("#main-viz").attr("width",e.width).attr("height",e.height).attr("viewBox",`0 0 ${e.width} ${e.height}`),this.modules={forceCalculator:new f,vectorRenderer:new u(this.svg,this),uiController:new g(this),fileHandler:new v(this),animationEngine:new x(this.svg,this),keyboardShortcuts:new M(this),vectorOperations:p,analysisEngine:new w(this),threeJSVisualization:null,periodicTableVisualization:null,neuralNetworkMode:new po(this),vectorAnalysisStudio:null},this.modules.fileHandler.ui=this.modules.uiController,this.modules.vectorAnalysisStudio=new mo(this),this.initialize()}initialize(){this.eventBus.on("stateChanged",(e=>{const t=e&&e.fullRender;this.render(t)})),this.eventBus.on("configChanged",(()=>{this.render(!0),this.modules.uiController.updateControls()})),this.modules.uiController.setupControls(),this.stateManager.generateVectors(),this.modules.animationEngine.start(),this.modules.keyboardShortcuts.initialize()}render(e=!1){this.modules.vectorRenderer.render(e),this.modules.uiController.updateVectorDetails()}updateConfig(e,t){this.configManager.updateConfig(e,t),"dimensions"!==e&&"numVectors"!==e||this.stateManager.generateVectors(),this.eventBus.emit("configChanged")}renderMath(e=document.body){if("function"==typeof window.renderMathInElement)try{window.renderMathInElement(e,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,trust:!0})}catch(t){console.warn("KaTeX rendering failed:",t)}}selectVector(e){this.stateManager.selectVector(e)}addInputVector(){this.modules.uiController.showAddVectorModal()}getState(){return this.stateManager.state}getConfig(){return this.configManager.getConfig()}getModules(){return this.modules}notify(e,t){this.eventBus.emit(e,t)}initialize3DVisualization(e){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.dispose(),this.modules.threeJSVisualization=new ho(e,this),this.eventBus.on("vectorsUpdated",(()=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onVectorsUpdated(this.stateManager.getVectors())})),this.eventBus.on("analysisCompleted",(e=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onAnalysisCompleted(e)})),this.eventBus.on("vectorSelected",(e=>{this.modules.threeJSVisualization&&this.modules.threeJSVisualization.onVectorSelected(e)}));const t=this.stateManager.getVectors();return t.length>0&&this.modules.threeJSVisualization.onVectorsUpdated(t),this.modules.threeJSVisualization}dispose3DVisualization(){this.modules.threeJSVisualization&&(this.modules.threeJSVisualization.dispose(),this.modules.threeJSVisualization=null)}update3DSettings(e){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.updateSettings(e)}export3DScene(){return this.modules.threeJSVisualization?this.modules.threeJSVisualization.exportScene():null}import3DScene(e){this.modules.threeJSVisualization&&this.modules.threeJSVisualization.importScene(e)}initializePeriodicTable(e){return this.modules.periodicTableVisualization&&(this.modules.periodicTableVisualization=null),this.modules.periodicTableVisualization=new uo(e,this),this.modules.periodicTableVisualization}activateNeuralNetworkMode(e=null){this.modules.neuralNetworkMode.activate(e)}deactivateNeuralNetworkMode(){this.modules.neuralNetworkMode.deactivate()}isNeuralModeActive(){return this.modules.neuralNetworkMode.isNeuralModeActive()}setActivationFunction(e){this.modules.forceCalculator.activationFunction=e,this.isNeuralModeActive()&&this.modules.neuralNetworkMode.updateNeuralNetwork(),this.notify("activationFunctionChanged",{function:e})}getActivationFunction(){return this.modules.forceCalculator.activationFunction}setLearningRate(e){this.modules.forceCalculator.learningRate=e,this.isNeuralModeActive()&&this.modules.neuralNetworkMode.updateNeuralNetwork(),this.notify("learningRateChanged",{rate:e})}getLearningRate(){return this.modules.forceCalculator.learningRate}getAvailableActivationFunctions(){return["sigmoid","tanh","relu","leaky_relu","softplus","swish","softmax","softermax","soft_sigmoid"]}setForceType(e){this.updateConfig("forceType",e)}getAvailableForceTypes(){return["resonance","cosine","correlation","euclidean","manhattan","quantum"]}getEnhancedVectorAnalysis(e){const t=this.stateManager.state.vectors.find((t=>t.id===e));if(!t)return null;const n=this.stateManager.state.vectors;return this.modules.forceCalculator.getEnhancedVectorStatistics(t,n)}exportEnhancedData(){const e=this.getState(),t=this.getConfig();return{vectors:e.vectors,inputVector:e.inputVector,selectedVectorId:e.selectedVectorId,config:t,periodicTableData:this.modules.periodicTableVisualization?this.modules.periodicTableVisualization.exportPeriodicData():null,neuralNetworkData:this.modules.neuralNetworkMode.isNeuralModeActive()?this.modules.neuralNetworkMode.exportNeuralNetworkData():null,timestamp:(new Date).toISOString(),version:"2.0.0"}}}window.d3=i,document.addEventListener("DOMContentLoaded",(function(){const e=function(){try{return window.katex=n,window.renderMathInElement=o,o(document.body,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,trust:!0,macros:{"\\vec":"\\mathbf{#1}","\\norm":"\\left\\|#1\\right\\|","\\cos":"\\text{cos}","\\sin":"\\text{sin}","\\dot":"\\cdot"}}),window.renderMath=function(e=document.body){try{o(e,{delimiters:[{left:"$$",right:"$$",display:!0},{left:"$",right:"$",display:!1},{left:"\\(",right:"\\)",display:!1},{left:"\\[",right:"\\]",display:!0}],throwOnError:!1,errorColor:"#cc0000",strict:!1,macros:{"\\vec":"\\mathbf{#1}","\\norm":"\\left\\|#1\\right\\|","\\cos":"\\text{cos}","\\sin":"\\text{sin}","\\dot":"\\cdot"}})}catch(t){console.warn("Math rendering error:",t)}},console.log("KaTeX initialized successfully with npm package"),!0}catch(e){return console.error("KaTeX initialization failed:",e),!1}}();try{const t=new Mo;window.VectoVerse=t,console.log("VectoVerse initialized successfully!");const n=document.querySelector(".visualization-container");n&&(t.initializePeriodicTable(n),console.log("Periodic table initialized")),function(e){const t=document.getElementById("toggle-neural-mode");t&&t.addEventListener("click",(()=>{if(e.isNeuralModeActive())e.deactivateNeuralNetworkMode(),t.setAttribute("data-state","off"),t.querySelector(".btn-state").textContent="OFF",t.classList.remove("active");else{const n=e.getState().selectedVectorId;e.activateNeuralNetworkMode(n),t.setAttribute("data-state","on"),t.querySelector(".btn-state").textContent="ON",t.classList.add("active")}}));const n=document.getElementById("force-type");n&&n.addEventListener("change",(t=>{e.setForceType(t.target.value),console.log(`Force type changed to: ${t.target.value}`),e.isNeuralModeActive()&&e.modules.neuralNetworkMode.updateNeuralNetwork()}));const i=document.getElementById("activation-function");i&&(i.value=e.getActivationFunction(),i.addEventListener("change",(t=>{e.setActivationFunction(t.target.value),console.log(`Activation function changed to: ${t.target.value}`)})));const r=document.getElementById("learning-rate"),a=document.getElementById("lr-value");r&&a&&(r.value=e.getLearningRate(),a.textContent=e.getLearningRate().toFixed(3),r.addEventListener("input",(t=>{const n=parseFloat(t.target.value);e.setLearningRate(n),a.textContent=n.toFixed(3)}))),e.eventBus.on("neuralModeActivated",(e=>{console.log("Neural network mode activated with input vector:",e.inputVectorId),t&&(t.setAttribute("data-state","on"),t.querySelector(".btn-state").textContent="ON",t.classList.add("active"))})),e.eventBus.on("neuralModeDeactivated",(()=>{console.log("Neural network mode deactivated"),t&&(t.setAttribute("data-state","off"),t.querySelector(".btn-state").textContent="OFF",t.classList.remove("active"))})),e.eventBus.on("activationFunctionChanged",(e=>{console.log("Activation function changed to:",e.function),i&&i.parentElement.setAttribute("data-tooltip",`Current: ${e.function.charAt(0).toUpperCase()+e.function.slice(1)} Activation`)})),e.eventBus.on("learningRateChanged",(e=>{console.log("Learning rate changed to:",e.rate),r&&r.parentElement.setAttribute("data-tooltip",`Learning Rate: ${e.rate.toFixed(3)} (${e.rate>=.05?"Fast":e.rate>=.01?"Medium":"Slow"})`)})),document.addEventListener("keydown",(r=>{if(r.ctrlKey||r.metaKey)switch(r.key){case"n":r.preventDefault(),t?.click();break;case"f":r.preventDefault();const a=(e.getAvailableForceTypes().indexOf(e.getConfig().forceType||"resonance")+1)%e.getAvailableForceTypes().length,s=e.getAvailableForceTypes()[a];e.setForceType(s),n&&(n.value=s);break;case"a":if(r.preventDefault(),e.isNeuralModeActive()){const t=(e.getAvailableActivationFunctions().indexOf(e.getActivationFunction())+1)%e.getAvailableActivationFunctions().length,n=e.getAvailableActivationFunctions()[t];e.setActivationFunction(n),i&&(i.value=n)}}}))}(t),e&&setTimeout((()=>window.renderMath()),100),document.querySelectorAll(".sidebar-panel.collapsible > h3").forEach((e=>{e.addEventListener("click",(()=>{e.parentElement.classList.toggle("collapsed")}))}))}catch(t){console.error("Failed to initialize VectoVerse:",t);const e=document.querySelector(".container");e&&(e.innerHTML=`\n                <div style="text-align: center; padding: 50px; color: #ff4757;">\n                    <h2>⚠️ Error Loading VectoVerse</h2>\n                    <p>Please refresh the page and try again.</p>\n                    <p style="font-size: 0.8em; opacity: 0.7;">Error: ${t.message}</p>\n                    <button onclick="location.reload()" style="\n                        margin-top: 20px; \n                        padding: 10px 20px; \n                        background: #667eea; \n                        color: white; \n                        border: none; \n                        border-radius: 8px; \n                        cursor: pointer;\n                    ">Reload Page</button>\n                </div>\n            `)}}))}}}));
//# sourceMappingURL=main-legacy-BD3Rl-vY.js.map
